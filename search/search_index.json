{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TorOnionProxyLibrary-Android \u00b6 An Android Library for embedding Tor as a service into your Application NOTE: This project exists independently of the Tor Project, & Guardian Project. This is a Fork of the Tor_Onion_Proxy_Library project. It\u2019s been re-built from the ground up and engineered specifically for Android , where it was once multi-platform. It\u2019s been re-written in Kotlin, heavily refactored to improve reliability/ease of use, and an android.app.Service built on top as an additional module/Library for abstracting away complexities. The topl-service module/Library has simple to use APIs for integrating Tor into your application, and customizing the notification to meet your liking. Project Roadmap \u00b6 Get started! \u00b6 Other Projects Using It \u00b6 Info Add your project to the list by submitting a PR! Edit This Document License \u00b6 TorOnionProxyLibrary-Android (a.k.a. topl-android) is a derivation of work from the Tor_Onion_Proxy_Library project that started at commit hash 74407114cbfa8ea6f2ac51417dda8be98d8aba86. Contributions made after said commit hash are: Copyright (C) 2020 Matthew Nelson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see here . =========================================================================== +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ =========================================================================== The original code, prior to commit hash 74407114cbfa8ea6f2ac51417dda8be98d8aba86, was: Copyright \u00a9 Microsoft Open Technologies, Inc. All Rights Reserved Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 THIS CODE IS PROVIDED ON AN AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT. See the Apache 2 License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#toronionproxylibrary-android","text":"An Android Library for embedding Tor as a service into your Application NOTE: This project exists independently of the Tor Project, & Guardian Project. This is a Fork of the Tor_Onion_Proxy_Library project. It\u2019s been re-built from the ground up and engineered specifically for Android , where it was once multi-platform. It\u2019s been re-written in Kotlin, heavily refactored to improve reliability/ease of use, and an android.app.Service built on top as an additional module/Library for abstracting away complexities. The topl-service module/Library has simple to use APIs for integrating Tor into your application, and customizing the notification to meet your liking.","title":"TorOnionProxyLibrary-Android"},{"location":"#project-roadmap","text":"","title":"Project Roadmap"},{"location":"#get-started","text":"","title":"Get started!"},{"location":"#other-projects-using-it","text":"Info Add your project to the list by submitting a PR! Edit This Document","title":"Other Projects Using It"},{"location":"#license","text":"TorOnionProxyLibrary-Android (a.k.a. topl-android) is a derivation of work from the Tor_Onion_Proxy_Library project that started at commit hash 74407114cbfa8ea6f2ac51417dda8be98d8aba86. Contributions made after said commit hash are: Copyright (C) 2020 Matthew Nelson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see here . =========================================================================== +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ =========================================================================== The original code, prior to commit hash 74407114cbfa8ea6f2ac51417dda8be98d8aba86, was: Copyright \u00a9 Microsoft Open Technologies, Inc. All Rights Reserved Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 THIS CODE IS PROVIDED ON AN AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT. See the Apache 2 License for the specific language governing permissions and limitations under the License.","title":"License "},{"location":"changelog/","text":"Change Log \u00b6 Version 1.0.0-alpha01 (2020-07-18) \u00b6 Initial Release","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-100-alpha01-2020-07-18","text":"Initial Release","title":"Version 1.0.0-alpha01 (2020-07-18)"},{"location":"documentation/","text":"API Documentation \u00b6 topl-service \u00b6 topl-core-base \u00b6 Info Documentation here only includes Public methods/classes, meaning links to non-public methods/classes are broken. You can view all methods/classes from the Project View in Android Studio via: Project/External Libraries/io.matthewnelson.topl_android:topl_*@arr","title":"Documentation"},{"location":"documentation/#api-documentation","text":"","title":"API Documentation"},{"location":"documentation/#topl-service","text":"","title":"topl-service"},{"location":"documentation/#topl-core-base","text":"Info Documentation here only includes Public methods/classes, meaning links to non-public methods/classes are broken. You can view all methods/classes from the Project View in Android Studio via: Project/External Libraries/io.matthewnelson.topl_android:topl_*@arr","title":"topl-core-base"},{"location":"get_started/","text":"Get Started \u00b6 Implementation - Step 1: Assets/Binaries \u00b6 GeoIP files : Your application will need geoip and geoip6 files. Due to this issue they currently cannot be provided via a dependency that can be easily updated. Until then, you\u2019ll have to provide them. Steps: Download geoip and geoip6 files from https://github.com/torproject/tor/tree/master/src/config If you prefer the non-mirror repository, you can also obtain them from https://gitweb.torproject.org/tor.git/tree/src/config In your Application module\u2019s src/main/ directory, create a new Directory named assets Copy geoip and geoip6 files into the assets directory (or a subdirectory within assets , such as assets/common/ . File extensions not necessary). torrc file : Not needed Your application\u2019s torrc file gets created for you based on what you have stored in TorServicePrefs . If nothing is in TorServicePrefs for that particular setting, then it will fall back on your static/default TorSettings that you supply upon initialization of TorServiceController.Builder . Tor Binaries : I use The GuardianProject\u2019s tor-android project to build binaries, and provided them here . The difference is in how they are packaged as a dependency, and the contents of what you are importing as a dependency. I package them in the jniLibs directory so that the Android OS will automatically install them into your application\u2019s /data/app/... directory, and include no unnecessary classes or resources; just the binaries. Android API 29+ no longer supports execution of executable files from your application\u2019s /data/data/ directory, and must now be installed in the context.applicationInfo.nativeLibraryDir directory (aka, /data/app/... ) to execute. - Nothing more is needed in terms of configuring initialization via the TorServiceController.Builder , as files will be installed in the correct directory, and named to match what topl-service looks for. If you wish to use GuardianProject\u2019s binaries, see tor-android . You\u2019ll need to use their NativeResouceInstaller to install the binaries. You\u2019ll need to also implement TorServiceController.Builder.useCustomTorConfigFiles method when initializing topl-service and provide it with your own TorConfigFiles . See the sample provided in the TorConfigFiles.Builder documentation. Transport Plugin Binaries : Currently unsupported. Working on it!!! Info Tor Binaries are ~8MB for each ABI, so it\u2019s advised that builds are split to keep apk sizes down. See the sampleapp \u2018s build.gradle file for more details. here Implementation - Step 2: topl-service \u00b6 In your Application module\u2019s build.gradle file, add the following to the dependencies block: def topl_android_version = \"1.0.0-alpha01\" implementation \"io.matthewnelson.topl-android:topl-core-base:$topl_android_version\" implementation \"io.matthewnelson.topl-android:topl-service:$topl_android_version\" Create a new class which extends TorSettings and apply your own default settings. See the SampleApp\u2019s MyTorSettings class for help. Also checkout the documentation in the TorSettings class for more of a breakdown and help. In your Application class\u2019 onCreate implement, and customize as desired, the TorServiceController.Builder Call APIs provided from TorServiceController.Companion Using the SNAPSHOT version of topl-service \u00b6 In your Application module\u2019s build.gradle file, add the following ( outside the android block): repositories { maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } } In your Application module\u2019s build.gradle file, add (or modify) the following in the dependencies block: def topl_android_version = \"1.0.0-alpha02-SNAPSHOT\" implementation 'io.matthewnelson.topl-android:topl-core-base:$topl_android_version' implementation 'io.matthewnelson.topl-android:topl-service:$topl_android_version' Warning SNAPSHOT versions are ever changing and may contain not yet fully fleshed out features. Do not ship a release.","title":"Get Started"},{"location":"get_started/#get-started","text":"","title":"Get Started"},{"location":"get_started/#implementation-step-1-assetsbinaries","text":"GeoIP files : Your application will need geoip and geoip6 files. Due to this issue they currently cannot be provided via a dependency that can be easily updated. Until then, you\u2019ll have to provide them. Steps: Download geoip and geoip6 files from https://github.com/torproject/tor/tree/master/src/config If you prefer the non-mirror repository, you can also obtain them from https://gitweb.torproject.org/tor.git/tree/src/config In your Application module\u2019s src/main/ directory, create a new Directory named assets Copy geoip and geoip6 files into the assets directory (or a subdirectory within assets , such as assets/common/ . File extensions not necessary). torrc file : Not needed Your application\u2019s torrc file gets created for you based on what you have stored in TorServicePrefs . If nothing is in TorServicePrefs for that particular setting, then it will fall back on your static/default TorSettings that you supply upon initialization of TorServiceController.Builder . Tor Binaries : I use The GuardianProject\u2019s tor-android project to build binaries, and provided them here . The difference is in how they are packaged as a dependency, and the contents of what you are importing as a dependency. I package them in the jniLibs directory so that the Android OS will automatically install them into your application\u2019s /data/app/... directory, and include no unnecessary classes or resources; just the binaries. Android API 29+ no longer supports execution of executable files from your application\u2019s /data/data/ directory, and must now be installed in the context.applicationInfo.nativeLibraryDir directory (aka, /data/app/... ) to execute. - Nothing more is needed in terms of configuring initialization via the TorServiceController.Builder , as files will be installed in the correct directory, and named to match what topl-service looks for. If you wish to use GuardianProject\u2019s binaries, see tor-android . You\u2019ll need to use their NativeResouceInstaller to install the binaries. You\u2019ll need to also implement TorServiceController.Builder.useCustomTorConfigFiles method when initializing topl-service and provide it with your own TorConfigFiles . See the sample provided in the TorConfigFiles.Builder documentation. Transport Plugin Binaries : Currently unsupported. Working on it!!! Info Tor Binaries are ~8MB for each ABI, so it\u2019s advised that builds are split to keep apk sizes down. See the sampleapp \u2018s build.gradle file for more details. here","title":"Implementation - Step 1: Assets/Binaries"},{"location":"get_started/#implementation-step-2-topl-service","text":"In your Application module\u2019s build.gradle file, add the following to the dependencies block: def topl_android_version = \"1.0.0-alpha01\" implementation \"io.matthewnelson.topl-android:topl-core-base:$topl_android_version\" implementation \"io.matthewnelson.topl-android:topl-service:$topl_android_version\" Create a new class which extends TorSettings and apply your own default settings. See the SampleApp\u2019s MyTorSettings class for help. Also checkout the documentation in the TorSettings class for more of a breakdown and help. In your Application class\u2019 onCreate implement, and customize as desired, the TorServiceController.Builder Call APIs provided from TorServiceController.Companion","title":"Implementation - Step 2: topl-service"},{"location":"get_started/#using-the-snapshot-version-of-topl-service","text":"In your Application module\u2019s build.gradle file, add the following ( outside the android block): repositories { maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } } In your Application module\u2019s build.gradle file, add (or modify) the following in the dependencies block: def topl_android_version = \"1.0.0-alpha02-SNAPSHOT\" implementation 'io.matthewnelson.topl-android:topl-core-base:$topl_android_version' implementation 'io.matthewnelson.topl-android:topl-service:$topl_android_version' Warning SNAPSHOT versions are ever changing and may contain not yet fully fleshed out features. Do not ship a release.","title":"Using the SNAPSHOT version of topl-service"},{"location":"releasing/","text":"Releasing TorOnionProxyLibrary-Android \u00b6 Create a local release branch from master git checkout master git pull git checkout -b release_1.0.0-alpha02 Update VERSION_NAME (remove -SNAPSHOT ) in gradle.properties VERSION_NAME=1.0.0-alpha02 Update the current version and next version in mkdocs.yml extra: topl_android: release: '1.0.0-alpha02' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Perform a clean build ./gradlew clean ./gradlew build Generate the Dokka docs rm -rf docs/topl-core docs/topl-core-base docs/topl-service ./gradlew topl-core-base:dokka topl-core:dokka topl-service:dokka Fix Dokka doc links ./gradlew fixDokkaDocLinks Update docs/changelog.md after checking out all changes: compare changes Update docs/roadmap.md with with new milestones: Project Roadmap Take one last look git diff Commit all local changes and PGP sign git commit -S -am \"Prepare 1.0.0-alpha02 release\" Create a PGP signed tag, and push it git tag -s 1.0.0-alpha02 -m \"Release v1.0.0-alpha02\" git push origin 1.0.0-alpha02 Make sure you have valid credentials in ~/.gradle/gradle.properties to sign and upload the artifacts SONATYPE_NEXUS_USERNAME=<Your Username> SONATYPE_NEXUS_PASSWORD=<Your Password> signing.gnupg.homeDir=/home/matthew/.gnupg/ signing.gnupg.optionsFile=/home/matthew/.gnupg/gpg.conf signing.gnupg.keyName=0x61471B8AB3890961 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Release to Maven Central Login to Sonatype OSS Nexus: oss.sonatype.org Click on Staging Repositories Scroll to the bottom, you should see an entry named iomatthewnelson-XXXX Check the box next to the iomatthewnelson-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the iomatthewnelson-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff -S release_1.0.0-alpha02 Update VERSION_NAME (increase version and add -SNAPSHOT ) and VERSION_CODE in gradle.properties VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT VERSION_CODE=INCREMENT Commit your changes and sign with PGP keys git commit -S -am \"Prepare for next development iteration\" Push your changes git push Wait for the release to become available on Maven Central , then: Redeploy the docs: pipenv shell mkdocs serve to check locally mkdocs gh-deploy to deploy Ensure docs are served Here exit Sign SampleApp release apks: scripts/sign_sampleapp_release_build.sh Go to the Draft a new release page Enter the release name (1.0.0-alpha02) as tag and title. Have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. Upload the signed release apks.","title":"Releasing"},{"location":"releasing/#releasing-toronionproxylibrary-android","text":"Create a local release branch from master git checkout master git pull git checkout -b release_1.0.0-alpha02 Update VERSION_NAME (remove -SNAPSHOT ) in gradle.properties VERSION_NAME=1.0.0-alpha02 Update the current version and next version in mkdocs.yml extra: topl_android: release: '1.0.0-alpha02' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Perform a clean build ./gradlew clean ./gradlew build Generate the Dokka docs rm -rf docs/topl-core docs/topl-core-base docs/topl-service ./gradlew topl-core-base:dokka topl-core:dokka topl-service:dokka Fix Dokka doc links ./gradlew fixDokkaDocLinks Update docs/changelog.md after checking out all changes: compare changes Update docs/roadmap.md with with new milestones: Project Roadmap Take one last look git diff Commit all local changes and PGP sign git commit -S -am \"Prepare 1.0.0-alpha02 release\" Create a PGP signed tag, and push it git tag -s 1.0.0-alpha02 -m \"Release v1.0.0-alpha02\" git push origin 1.0.0-alpha02 Make sure you have valid credentials in ~/.gradle/gradle.properties to sign and upload the artifacts SONATYPE_NEXUS_USERNAME=<Your Username> SONATYPE_NEXUS_PASSWORD=<Your Password> signing.gnupg.homeDir=/home/matthew/.gnupg/ signing.gnupg.optionsFile=/home/matthew/.gnupg/gpg.conf signing.gnupg.keyName=0x61471B8AB3890961 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Release to Maven Central Login to Sonatype OSS Nexus: oss.sonatype.org Click on Staging Repositories Scroll to the bottom, you should see an entry named iomatthewnelson-XXXX Check the box next to the iomatthewnelson-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the iomatthewnelson-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff -S release_1.0.0-alpha02 Update VERSION_NAME (increase version and add -SNAPSHOT ) and VERSION_CODE in gradle.properties VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT VERSION_CODE=INCREMENT Commit your changes and sign with PGP keys git commit -S -am \"Prepare for next development iteration\" Push your changes git push Wait for the release to become available on Maven Central , then: Redeploy the docs: pipenv shell mkdocs serve to check locally mkdocs gh-deploy to deploy Ensure docs are served Here exit Sign SampleApp release apks: scripts/sign_sampleapp_release_build.sh Go to the Draft a new release page Enter the release name (1.0.0-alpha02) as tag and title. Have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. Upload the signed release apks.","title":"Releasing TorOnionProxyLibrary-Android"},{"location":"roadmap/","text":"TOPL-Android Roadmap \u00b6 Alpha release Pass-through commands to the TorControlConnection Settings/Debug Activity (so devs don\u2019t have to create one if they don\u2019t wish to) Builder Option to disable stop service on task termination Transport Plugin support v3 Hidden Service Authentication support v3 Hidden Service Creation back","title":"Project Roadmap"},{"location":"roadmap/#topl-android-roadmap","text":"Alpha release Pass-through commands to the TorControlConnection Settings/Debug Activity (so devs don\u2019t have to create one if they don\u2019t wish to) Builder Option to disable stop service on task termination Transport Plugin support v3 Hidden Service Authentication support v3 Hidden Service Creation back","title":"TOPL-Android Roadmap"},{"location":"topl-core/","text":"topl-core Packages \u00b6 Name Summary io.matthewnelson.topl_core io.matthewnelson.topl_core.broadcaster io.matthewnelson.topl_core.listener io.matthewnelson.topl_core.settings io.matthewnelson.topl_core.util Index \u00b6 All Types","title":"Index"},{"location":"topl-core/#packages","text":"Name Summary io.matthewnelson.topl_core io.matthewnelson.topl_core.broadcaster io.matthewnelson.topl_core.listener io.matthewnelson.topl_core.settings io.matthewnelson.topl_core.util","title":"Packages"},{"location":"topl-core/#index","text":"All Types","title":"Index"},{"location":"topl-core/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.topl_core.listener.BaseEventListener \u00b6 Extend this class to customize implementation of the member overrides. | io.matthewnelson.topl_core.broadcaster.BroadcastLogger \u00b6 This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. | io.matthewnelson.topl_core.util.CoreConsts \u00b6 | io.matthewnelson.topl_core.util.FileUtilities \u00b6 | io.matthewnelson.topl_core.OnionProxyManager \u00b6 This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. | io.matthewnelson.topl_core.util.TorInstaller \u00b6 Extend this class and implement the need methods. | io.matthewnelson.topl_core.settings.TorSettingsBuilder \u00b6 Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. | io.matthewnelson.topl_core.broadcaster.TorStateMachine \u00b6 Current State of Tor | io.matthewnelson.topl_core.util.Utilities \u00b6 | io.matthewnelson.topl_core.util.WriteObserver \u00b6 Adapted from the Briar WriteObserver code","title":"Index"},{"location":"topl-core/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_corelistenerbaseeventlistener","text":"Extend this class to customize implementation of the member overrides. |","title":"io.matthewnelson.topl_core.listener.BaseEventListener"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_corebroadcasterbroadcastlogger","text":"This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. |","title":"io.matthewnelson.topl_core.broadcaster.BroadcastLogger"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilcoreconsts","text":"|","title":"io.matthewnelson.topl_core.util.CoreConsts"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilfileutilities","text":"|","title":"io.matthewnelson.topl_core.util.FileUtilities"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreonionproxymanager","text":"This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. |","title":"io.matthewnelson.topl_core.OnionProxyManager"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutiltorinstaller","text":"Extend this class and implement the need methods. |","title":"io.matthewnelson.topl_core.util.TorInstaller"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coresettingstorsettingsbuilder","text":"Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. |","title":"io.matthewnelson.topl_core.settings.TorSettingsBuilder"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_corebroadcastertorstatemachine","text":"Current State of Tor |","title":"io.matthewnelson.topl_core.broadcaster.TorStateMachine"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilutilities","text":"|","title":"io.matthewnelson.topl_core.util.Utilities"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilwriteobserver","text":"Adapted from the Briar WriteObserver code","title":"io.matthewnelson.topl_core.util.WriteObserver"},{"location":"topl-core/io.matthewnelson.topl_core/","text":"topl-core / io.matthewnelson.topl_core Package io.matthewnelson.topl_core \u00b6 Types \u00b6 Name Summary OnionProxyManager This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. class OnionProxyManager : CoreConsts","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core/#package-iomatthewnelsontopl_core","text":"","title":"Package io.matthewnelson.topl_core"},{"location":"topl-core/io.matthewnelson.topl_core/#types","text":"Name Summary OnionProxyManager This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. class OnionProxyManager : CoreConsts","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager OnionProxyManager \u00b6 class OnionProxyManager : CoreConsts (source) This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. This class is thread safe but that\u2019s mostly because we hit everything over the head with \u2018synchronized\u2019. Given the way this class is used there shouldn\u2019t be any performance implications of this. This class began life as TorPlugin from the Briar Project val serviceTorInstaller = ServiceTorInstaller ( torService , torConfigFiles , buildConfigVersionCode , buildConfigDebug ?: BuildConfig . DEBUG , geoipAssetPath , geoip6AssetPath ) onionProxyManager = OnionProxyManager ( torService , torConfigFiles , serviceTorInstaller , ServiceTorSettings ( torSettings , torService ), ServiceEventListener (), ServiceEventBroadcaster ( torService ), buildConfigDebug ) Parameters \u00b6 context - Context. torConfigFiles - TorConfigFiles For setting up OnionProxyContext torInstaller - TorInstaller For setting up OnionProxyContext torSettings - TorSettings For setting up OnionProxyContext eventListener - BaseEventListener For processing Tor OP messages. eventBroadcaster - Your own broadcaster which extends EventBroadcaster buildConfigDebug - Send BuildConfig.DEBUG which will show Logcat messages for this module on Debug builds of your Application. If null , all the messages will still be broadcast to the provided EventBroadcaster and you can handle them there how you\u2019d like. Constructors \u00b6 Name Summary <init> This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. OnionProxyManager(context: Context , torConfigFiles: TorConfigFiles , torInstaller: TorInstaller , torSettings: TorSettings , eventListener: BaseEventListener , eventBroadcaster: EventBroadcaster , buildConfigDebug: Boolean ? = null) Properties \u00b6 Name Summary eventListener BaseEventListener For processing Tor OP messages. val eventListener: BaseEventListener hasControlConnection val hasControlConnection: Boolean iPv4LocalHostSocksPort Returns the socks port on the IPv4 localhost address that the Tor OP is listening on val iPv4LocalHostSocksPort: Int isIPv4LocalHostSocksPortOpen val isIPv4LocalHostSocksPortOpen: Boolean isRunning Checks to see if the Tor OP is running (e.g. fully bootstrapped) and open to network connections. val isRunning: Boolean processId val processId: String torConfigFiles val torConfigFiles: TorConfigFiles torInstaller val torInstaller: TorInstaller torPid val torPid: Int torSettings val torSettings: TorSettings torStateMachine val torStateMachine: TorStateMachine Functions \u00b6 Name Summary disableNetwork Tells the Tor OP if it should accept network connections. fun disableNetwork(disable: Boolean ): Unit getBroadcastLogger See BroadcastLoggerHelper.getBroadcastLogger fun getBroadcastLogger(clazz: Class <*>): BroadcastLogger fun getBroadcastLogger(tagName: String ): BroadcastLogger getInfo See the torspec for accepted queries: fun getInfo(queryCommand: String ): String ? getNewSettingsBuilder fun getNewSettingsBuilder(): TorSettingsBuilder killTorProcess fun killTorProcess(): Unit publishHiddenService Publishes a hidden service fun publishHiddenService(hiddenServicePort: Int , localPort: Int ): String refreshBroadcastLoggersHasDebugLogsVar See BroadcastLoggerHelper.refreshBroadcastLoggersHasDebugLogsVar fun refreshBroadcastLoggersHasDebugLogsVar(): Unit reloadTorConfig fun reloadTorConfig(): Boolean restartTorProcess fun restartTorProcess(): Unit setExitNode Sets the exit nodes through the tor control connection fun setExitNode(exitNodes: String ?): Boolean setup Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. fun setup(): Unit signalControlConnection Sends a signal to the TorControlConnection fun signalControlConnection(torControlSignalCommand: String ): Boolean signalNewNym Will signal for a NewNym, then broadcast NEWNYM_SUCCESS_MESSAGE if successful. suspend fun signalNewNym(): Unit start Starts tor control service if it isn\u2019t already running. fun start(): Unit stop Kills the Tor OP Process. Once you have called this method nothing is going to work until you either call startWithRepeat or start fun stop(): Unit Companion Object Properties \u00b6 Name Summary NEWNYM_NO_NETWORK const val NEWNYM_NO_NETWORK: String NEWNYM_RATE_LIMIT_PARTIAL_MSG const val NEWNYM_RATE_LIMIT_PARTIAL_MSG: String NEWNYM_SUCCESS_MESSAGE const val NEWNYM_SUCCESS_MESSAGE: String","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#onionproxymanager","text":"class OnionProxyManager : CoreConsts (source) This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. This class is thread safe but that\u2019s mostly because we hit everything over the head with \u2018synchronized\u2019. Given the way this class is used there shouldn\u2019t be any performance implications of this. This class began life as TorPlugin from the Briar Project val serviceTorInstaller = ServiceTorInstaller ( torService , torConfigFiles , buildConfigVersionCode , buildConfigDebug ?: BuildConfig . DEBUG , geoipAssetPath , geoip6AssetPath ) onionProxyManager = OnionProxyManager ( torService , torConfigFiles , serviceTorInstaller , ServiceTorSettings ( torSettings , torService ), ServiceEventListener (), ServiceEventBroadcaster ( torService ), buildConfigDebug )","title":"OnionProxyManager"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#parameters","text":"context - Context. torConfigFiles - TorConfigFiles For setting up OnionProxyContext torInstaller - TorInstaller For setting up OnionProxyContext torSettings - TorSettings For setting up OnionProxyContext eventListener - BaseEventListener For processing Tor OP messages. eventBroadcaster - Your own broadcaster which extends EventBroadcaster buildConfigDebug - Send BuildConfig.DEBUG which will show Logcat messages for this module on Debug builds of your Application. If null , all the messages will still be broadcast to the provided EventBroadcaster and you can handle them there how you\u2019d like.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#constructors","text":"Name Summary <init> This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. OnionProxyManager(context: Context , torConfigFiles: TorConfigFiles , torInstaller: TorInstaller , torSettings: TorSettings , eventListener: BaseEventListener , eventBroadcaster: EventBroadcaster , buildConfigDebug: Boolean ? = null)","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#properties","text":"Name Summary eventListener BaseEventListener For processing Tor OP messages. val eventListener: BaseEventListener hasControlConnection val hasControlConnection: Boolean iPv4LocalHostSocksPort Returns the socks port on the IPv4 localhost address that the Tor OP is listening on val iPv4LocalHostSocksPort: Int isIPv4LocalHostSocksPortOpen val isIPv4LocalHostSocksPortOpen: Boolean isRunning Checks to see if the Tor OP is running (e.g. fully bootstrapped) and open to network connections. val isRunning: Boolean processId val processId: String torConfigFiles val torConfigFiles: TorConfigFiles torInstaller val torInstaller: TorInstaller torPid val torPid: Int torSettings val torSettings: TorSettings torStateMachine val torStateMachine: TorStateMachine","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#functions","text":"Name Summary disableNetwork Tells the Tor OP if it should accept network connections. fun disableNetwork(disable: Boolean ): Unit getBroadcastLogger See BroadcastLoggerHelper.getBroadcastLogger fun getBroadcastLogger(clazz: Class <*>): BroadcastLogger fun getBroadcastLogger(tagName: String ): BroadcastLogger getInfo See the torspec for accepted queries: fun getInfo(queryCommand: String ): String ? getNewSettingsBuilder fun getNewSettingsBuilder(): TorSettingsBuilder killTorProcess fun killTorProcess(): Unit publishHiddenService Publishes a hidden service fun publishHiddenService(hiddenServicePort: Int , localPort: Int ): String refreshBroadcastLoggersHasDebugLogsVar See BroadcastLoggerHelper.refreshBroadcastLoggersHasDebugLogsVar fun refreshBroadcastLoggersHasDebugLogsVar(): Unit reloadTorConfig fun reloadTorConfig(): Boolean restartTorProcess fun restartTorProcess(): Unit setExitNode Sets the exit nodes through the tor control connection fun setExitNode(exitNodes: String ?): Boolean setup Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. fun setup(): Unit signalControlConnection Sends a signal to the TorControlConnection fun signalControlConnection(torControlSignalCommand: String ): Boolean signalNewNym Will signal for a NewNym, then broadcast NEWNYM_SUCCESS_MESSAGE if successful. suspend fun signalNewNym(): Unit start Starts tor control service if it isn\u2019t already running. fun start(): Unit stop Kills the Tor OP Process. Once you have called this method nothing is going to work until you either call startWithRepeat or start fun stop(): Unit","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#companion-object-properties","text":"Name Summary NEWNYM_NO_NETWORK const val NEWNYM_NO_NETWORK: String NEWNYM_RATE_LIMIT_PARTIAL_MSG const val NEWNYM_RATE_LIMIT_PARTIAL_MSG: String NEWNYM_SUCCESS_MESSAGE const val NEWNYM_SUCCESS_MESSAGE: String","title":"Companion Object Properties"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-init-/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / <init> <init> \u00b6 OnionProxyManager(context: Context , torConfigFiles: TorConfigFiles , torInstaller: TorInstaller , torSettings: TorSettings , eventListener: BaseEventListener , eventBroadcaster: EventBroadcaster , buildConfigDebug: Boolean ? = null) This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. This class is thread safe but that\u2019s mostly because we hit everything over the head with \u2018synchronized\u2019. Given the way this class is used there shouldn\u2019t be any performance implications of this. This class began life as TorPlugin from the Briar Project val serviceTorInstaller = ServiceTorInstaller ( torService , torConfigFiles , buildConfigVersionCode , buildConfigDebug ?: BuildConfig . DEBUG , geoipAssetPath , geoip6AssetPath ) onionProxyManager = OnionProxyManager ( torService , torConfigFiles , serviceTorInstaller , ServiceTorSettings ( torSettings , torService ), ServiceEventListener (), ServiceEventBroadcaster ( torService ), buildConfigDebug ) Parameters \u00b6 context - Context. torConfigFiles - TorConfigFiles For setting up OnionProxyContext torInstaller - TorInstaller For setting up OnionProxyContext torSettings - TorSettings For setting up OnionProxyContext eventListener - BaseEventListener For processing Tor OP messages. eventBroadcaster - Your own broadcaster which extends EventBroadcaster buildConfigDebug - Send BuildConfig.DEBUG which will show Logcat messages for this module on Debug builds of your Application. If null , all the messages will still be broadcast to the provided EventBroadcaster and you can handle them there how you\u2019d like.","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-init-/#init","text":"OnionProxyManager(context: Context , torConfigFiles: TorConfigFiles , torInstaller: TorInstaller , torSettings: TorSettings , eventListener: BaseEventListener , eventBroadcaster: EventBroadcaster , buildConfigDebug: Boolean ? = null) This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. This class is thread safe but that\u2019s mostly because we hit everything over the head with \u2018synchronized\u2019. Given the way this class is used there shouldn\u2019t be any performance implications of this. This class began life as TorPlugin from the Briar Project val serviceTorInstaller = ServiceTorInstaller ( torService , torConfigFiles , buildConfigVersionCode , buildConfigDebug ?: BuildConfig . DEBUG , geoipAssetPath , geoip6AssetPath ) onionProxyManager = OnionProxyManager ( torService , torConfigFiles , serviceTorInstaller , ServiceTorSettings ( torSettings , torService ), ServiceEventListener (), ServiceEventBroadcaster ( torService ), buildConfigDebug )","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-init-/#parameters","text":"context - Context. torConfigFiles - TorConfigFiles For setting up OnionProxyContext torInstaller - TorInstaller For setting up OnionProxyContext torSettings - TorSettings For setting up OnionProxyContext eventListener - BaseEventListener For processing Tor OP messages. eventBroadcaster - Your own broadcaster which extends EventBroadcaster buildConfigDebug - Send BuildConfig.DEBUG which will show Logcat messages for this module on Debug builds of your Application. If null , all the messages will still be broadcast to the provided EventBroadcaster and you can handle them there how you\u2019d like.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-n-o_-n-e-t-w-o-r-k/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / NEWNYM_NO_NETWORK NEWNYM_NO_NETWORK \u00b6 const val NEWNYM_NO_NETWORK: String (source)","title":" n e w n y m  n o  n e t w o r k"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-n-o_-n-e-t-w-o-r-k/#newnym_no_network","text":"const val NEWNYM_NO_NETWORK: String (source)","title":"NEWNYM_NO_NETWORK"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-r-a-t-e_-l-i-m-i-t_-p-a-r-t-i-a-l_-m-s-g/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / NEWNYM_RATE_LIMIT_PARTIAL_MSG NEWNYM_RATE_LIMIT_PARTIAL_MSG \u00b6 const val NEWNYM_RATE_LIMIT_PARTIAL_MSG: String (source)","title":" n e w n y m  r a t e  l i m i t  p a r t i a l  m s g"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-r-a-t-e_-l-i-m-i-t_-p-a-r-t-i-a-l_-m-s-g/#newnym_rate_limit_partial_msg","text":"const val NEWNYM_RATE_LIMIT_PARTIAL_MSG: String (source)","title":"NEWNYM_RATE_LIMIT_PARTIAL_MSG"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-s-u-c-c-e-s-s_-m-e-s-s-a-g-e/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / NEWNYM_SUCCESS_MESSAGE NEWNYM_SUCCESS_MESSAGE \u00b6 const val NEWNYM_SUCCESS_MESSAGE: String (source)","title":" n e w n y m  s u c c e s s  m e s s a g e"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-s-u-c-c-e-s-s_-m-e-s-s-a-g-e/#newnym_success_message","text":"const val NEWNYM_SUCCESS_MESSAGE: String (source)","title":"NEWNYM_SUCCESS_MESSAGE"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/disable-network/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / disableNetwork disableNetwork \u00b6 fun disableNetwork(disable: Boolean ): Unit (source) Tells the Tor OP if it should accept network connections. Whenever setting Tor\u2019s Conf to DisableNetwork X , ONLY use this method to do it such that torStateMachine will reflect the proper io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState . Parameters \u00b6 disable - If true then the Tor OP will not accept SOCKS connections, otherwise yes. Exceptions \u00b6 IOException - if having issues with TorControlConnection#setConf KotlinNullPointerException - if controlConnection is null even after checking.","title":"Disable network"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/disable-network/#disablenetwork","text":"fun disableNetwork(disable: Boolean ): Unit (source) Tells the Tor OP if it should accept network connections. Whenever setting Tor\u2019s Conf to DisableNetwork X , ONLY use this method to do it such that torStateMachine will reflect the proper io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState .","title":"disableNetwork"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/disable-network/#parameters","text":"disable - If true then the Tor OP will not accept SOCKS connections, otherwise yes.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/disable-network/#exceptions","text":"IOException - if having issues with TorControlConnection#setConf KotlinNullPointerException - if controlConnection is null even after checking.","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/event-listener/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / eventListener eventListener \u00b6 val eventListener: BaseEventListener (source) BaseEventListener For processing Tor OP messages.","title":"Event listener"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/event-listener/#eventlistener","text":"val eventListener: BaseEventListener (source) BaseEventListener For processing Tor OP messages.","title":"eventListener"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-broadcast-logger/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / getBroadcastLogger getBroadcastLogger \u00b6 fun getBroadcastLogger(clazz: Class <*>): BroadcastLogger (source) See BroadcastLoggerHelper.getBroadcastLogger Parameters \u00b6 clazz - Class<*> - For initializing BroadcastLogger.TAG with your class\u2019 name. fun getBroadcastLogger(tagName: String ): BroadcastLogger (source) See BroadcastLoggerHelper.getBroadcastLogger Parameters \u00b6 tagName - String - For initializing BroadcastLogger.TAG .","title":"Get broadcast logger"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-broadcast-logger/#getbroadcastlogger","text":"fun getBroadcastLogger(clazz: Class <*>): BroadcastLogger (source) See BroadcastLoggerHelper.getBroadcastLogger","title":"getBroadcastLogger"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-broadcast-logger/#parameters","text":"clazz - Class<*> - For initializing BroadcastLogger.TAG with your class\u2019 name. fun getBroadcastLogger(tagName: String ): BroadcastLogger (source) See BroadcastLoggerHelper.getBroadcastLogger","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-broadcast-logger/#parameters_1","text":"tagName - String - For initializing BroadcastLogger.TAG .","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-info/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / getInfo getInfo \u00b6 fun getInfo(queryCommand: String ): String ? (source) See the torspec for accepted queries: https://torproject.gitlab.io/torspec/control-spec/#getinfo Parameters \u00b6 queryCommand - What data you are querying the TorControlConnection for","title":"Get info"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-info/#getinfo","text":"fun getInfo(queryCommand: String ): String ? (source) See the torspec for accepted queries: https://torproject.gitlab.io/torspec/control-spec/#getinfo","title":"getInfo"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-info/#parameters","text":"queryCommand - What data you are querying the TorControlConnection for","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-new-settings-builder/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / getNewSettingsBuilder getNewSettingsBuilder \u00b6 fun getNewSettingsBuilder(): TorSettingsBuilder (source)","title":"Get new settings builder"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-new-settings-builder/#getnewsettingsbuilder","text":"fun getNewSettingsBuilder(): TorSettingsBuilder (source)","title":"getNewSettingsBuilder"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/has-control-connection/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / hasControlConnection hasControlConnection \u00b6 val hasControlConnection: Boolean (source)","title":"Has control connection"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/has-control-connection/#hascontrolconnection","text":"val hasControlConnection: Boolean (source)","title":"hasControlConnection"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/i-pv4-local-host-socks-port/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / iPv4LocalHostSocksPort iPv4LocalHostSocksPort \u00b6 val iPv4LocalHostSocksPort: Int (source) Returns the socks port on the IPv4 localhost address that the Tor OP is listening on Exceptions \u00b6 IOException - TorControlConnection or File errors. RuntimeException - If Tor is not running or there\u2019s no localhost binding for Socks. NullPointerException - If controlConnection is null even after checking. Return Discovered socks port","title":"I pv4 local host socks port"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/i-pv4-local-host-socks-port/#ipv4localhostsocksport","text":"val iPv4LocalHostSocksPort: Int (source) Returns the socks port on the IPv4 localhost address that the Tor OP is listening on","title":"iPv4LocalHostSocksPort"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/i-pv4-local-host-socks-port/#exceptions","text":"IOException - TorControlConnection or File errors. RuntimeException - If Tor is not running or there\u2019s no localhost binding for Socks. NullPointerException - If controlConnection is null even after checking. Return Discovered socks port","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/is-i-pv4-local-host-socks-port-open/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / isIPv4LocalHostSocksPortOpen isIPv4LocalHostSocksPortOpen \u00b6 val isIPv4LocalHostSocksPortOpen: Boolean (source)","title":"Is i pv4 local host socks port open"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/is-i-pv4-local-host-socks-port-open/#isipv4localhostsocksportopen","text":"val isIPv4LocalHostSocksPortOpen: Boolean (source)","title":"isIPv4LocalHostSocksPortOpen"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/is-running/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / isRunning isRunning \u00b6 val isRunning: Boolean (source) Checks to see if the Tor OP is running (e.g. fully bootstrapped) and open to network connections. Return True if running","title":"Is running"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/is-running/#isrunning","text":"val isRunning: Boolean (source) Checks to see if the Tor OP is running (e.g. fully bootstrapped) and open to network connections. Return True if running","title":"isRunning"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/kill-tor-process/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / killTorProcess killTorProcess \u00b6 fun killTorProcess(): Unit (source)","title":"Kill tor process"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/kill-tor-process/#killtorprocess","text":"fun killTorProcess(): Unit (source)","title":"killTorProcess"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/process-id/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / processId processId \u00b6 val processId: String (source)","title":"Process id"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/process-id/#processid","text":"val processId: String (source)","title":"processId"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/publish-hidden-service/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / publishHiddenService publishHiddenService \u00b6 @Synchronized fun publishHiddenService(hiddenServicePort: Int , localPort: Int ): String (source) Publishes a hidden service Parameters \u00b6 hiddenServicePort - The port that the hidden service will accept connections on localPort - The local port that the hidden service will relay connections to Exceptions \u00b6 IOException - File errors RuntimeException - See io.matthewnelson.topl_core.util.WriteObserver.poll IllegalStateException - If controlConnection is null (service isn\u2019t running) NullPointerException - If controlConnection is null even after checking SecurityException - Unauthorized access to file/directory. IllegalArgumentException - Return The hidden service\u2019s onion address in the form X.onion.","title":"Publish hidden service"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/publish-hidden-service/#publishhiddenservice","text":"@Synchronized fun publishHiddenService(hiddenServicePort: Int , localPort: Int ): String (source) Publishes a hidden service","title":"publishHiddenService"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/publish-hidden-service/#parameters","text":"hiddenServicePort - The port that the hidden service will accept connections on localPort - The local port that the hidden service will relay connections to","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/publish-hidden-service/#exceptions","text":"IOException - File errors RuntimeException - See io.matthewnelson.topl_core.util.WriteObserver.poll IllegalStateException - If controlConnection is null (service isn\u2019t running) NullPointerException - If controlConnection is null even after checking SecurityException - Unauthorized access to file/directory. IllegalArgumentException - Return The hidden service\u2019s onion address in the form X.onion.","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/refresh-broadcast-loggers-has-debug-logs-var/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / refreshBroadcastLoggersHasDebugLogsVar refreshBroadcastLoggersHasDebugLogsVar \u00b6 fun refreshBroadcastLoggersHasDebugLogsVar(): Unit (source) See BroadcastLoggerHelper.refreshBroadcastLoggersHasDebugLogsVar","title":"Refresh broadcast loggers has debug logs var"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/refresh-broadcast-loggers-has-debug-logs-var/#refreshbroadcastloggershasdebuglogsvar","text":"fun refreshBroadcastLoggersHasDebugLogsVar(): Unit (source) See BroadcastLoggerHelper.refreshBroadcastLoggersHasDebugLogsVar","title":"refreshBroadcastLoggersHasDebugLogsVar"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/reload-tor-config/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / reloadTorConfig reloadTorConfig \u00b6 fun reloadTorConfig(): Boolean (source)","title":"Reload tor config"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/reload-tor-config/#reloadtorconfig","text":"fun reloadTorConfig(): Boolean (source)","title":"reloadTorConfig"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/restart-tor-process/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / restartTorProcess restartTorProcess \u00b6 fun restartTorProcess(): Unit (source)","title":"Restart tor process"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/restart-tor-process/#restarttorprocess","text":"fun restartTorProcess(): Unit (source)","title":"restartTorProcess"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/set-exit-node/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / setExitNode setExitNode \u00b6 fun setExitNode(exitNodes: String ?): Boolean (source) Sets the exit nodes through the tor control connection Parameters \u00b6 exitNodes - Return true if successfully set, otherwise false","title":"Set exit node"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/set-exit-node/#setexitnode","text":"fun setExitNode(exitNodes: String ?): Boolean (source) Sets the exit nodes through the tor control connection","title":"setExitNode"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/set-exit-node/#parameters","text":"exitNodes - Return true if successfully set, otherwise false","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/setup/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / setup setup \u00b6 fun setup(): Unit (source) Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked.","title":"Setup"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/setup/#setup","text":"fun setup(): Unit (source) Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked.","title":"setup"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-control-connection/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / signalControlConnection signalControlConnection \u00b6 fun signalControlConnection(torControlSignalCommand: String ): Boolean (source) Sends a signal to the TorControlConnection Parameters \u00b6 torControlSignalCommand - See TorControlCommands for acceptable SIGNAL_ values. Return true if the signal was received by TorControlConnection , false if not.","title":"Signal control connection"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-control-connection/#signalcontrolconnection","text":"fun signalControlConnection(torControlSignalCommand: String ): Boolean (source) Sends a signal to the TorControlConnection","title":"signalControlConnection"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-control-connection/#parameters","text":"torControlSignalCommand - See TorControlCommands for acceptable SIGNAL_ values. Return true if the signal was received by TorControlConnection , false if not.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-new-nym/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / signalNewNym signalNewNym \u00b6 @Synchronized suspend fun signalNewNym(): Unit (source) Will signal for a NewNym, then broadcast NEWNYM_SUCCESS_MESSAGE if successful. Because there is no way to easily ascertain success, we need to check see if we\u2019ve been rate limited. Being rate limited means we were not successful when signaling NEWNYM, so we don\u2019t want to broadcast the success message. See BaseEventListener for more information on how this is done via calling the BaseEventListener.beginWatchingNoticeMsgs & BaseEventListener.doesNoticeMsgBufferContain methods. If the eventListener you\u2019re instantiating OnionProxyManager with has it\u2019s BaseEventListener.noticeMsg being piped to the EventBroadcaster.broadcastNotice , you will receive the message of being rate limited.","title":"Signal new nym"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-new-nym/#signalnewnym","text":"@Synchronized suspend fun signalNewNym(): Unit (source) Will signal for a NewNym, then broadcast NEWNYM_SUCCESS_MESSAGE if successful. Because there is no way to easily ascertain success, we need to check see if we\u2019ve been rate limited. Being rate limited means we were not successful when signaling NEWNYM, so we don\u2019t want to broadcast the success message. See BaseEventListener for more information on how this is done via calling the BaseEventListener.beginWatchingNoticeMsgs & BaseEventListener.doesNoticeMsgBufferContain methods. If the eventListener you\u2019re instantiating OnionProxyManager with has it\u2019s BaseEventListener.noticeMsg being piped to the EventBroadcaster.broadcastNotice , you will receive the message of being rate limited.","title":"signalNewNym"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/start/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / start start \u00b6 @Synchronized fun start(): Unit (source) Starts tor control service if it isn\u2019t already running. Exceptions \u00b6 IOException - File errors SecurityException - Unauthorized access to file/directory. IllegalArgumentException - if onionProxyContext methods are passed incorrect CoreConsts.ConfigFile string values","title":"Start"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/start/#start","text":"@Synchronized fun start(): Unit (source) Starts tor control service if it isn\u2019t already running.","title":"start"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/start/#exceptions","text":"IOException - File errors SecurityException - Unauthorized access to file/directory. IllegalArgumentException - if onionProxyContext methods are passed incorrect CoreConsts.ConfigFile string values","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/stop/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / stop stop \u00b6 @Synchronized fun stop(): Unit (source) Kills the Tor OP Process. Once you have called this method nothing is going to work until you either call startWithRepeat or start Exceptions \u00b6 NullPointerException - If controlConnection magically changes to null. IOException - If controlConnection is not responding to shutdownTor .","title":"Stop"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/stop/#stop","text":"@Synchronized fun stop(): Unit (source) Kills the Tor OP Process. Once you have called this method nothing is going to work until you either call startWithRepeat or start","title":"stop"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/stop/#exceptions","text":"NullPointerException - If controlConnection magically changes to null. IOException - If controlConnection is not responding to shutdownTor .","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-config-files/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torConfigFiles torConfigFiles \u00b6 val torConfigFiles: TorConfigFiles (source)","title":"Tor config files"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-config-files/#torconfigfiles","text":"val torConfigFiles: TorConfigFiles (source)","title":"torConfigFiles"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-installer/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torInstaller torInstaller \u00b6 val torInstaller: TorInstaller (source)","title":"Tor installer"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-installer/#torinstaller","text":"val torInstaller: TorInstaller (source)","title":"torInstaller"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-pid/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torPid torPid \u00b6 val torPid: Int (source)","title":"Tor pid"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-pid/#torpid","text":"val torPid: Int (source)","title":"torPid"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-settings/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torSettings torSettings \u00b6 val torSettings: TorSettings (source)","title":"Tor settings"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-settings/#torsettings","text":"val torSettings: TorSettings (source)","title":"torSettings"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-state-machine/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torStateMachine torStateMachine \u00b6 val torStateMachine: TorStateMachine (source)","title":"Tor state machine"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-state-machine/#torstatemachine","text":"val torStateMachine: TorStateMachine (source)","title":"torStateMachine"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/","text":"topl-core / io.matthewnelson.topl_core.broadcaster Package io.matthewnelson.topl_core.broadcaster \u00b6 Types \u00b6 Name Summary BroadcastLogger This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. class BroadcastLogger : CoreConsts TorStateMachine Current State of Tor class TorStateMachine : CoreConsts","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/#package-iomatthewnelsontopl_corebroadcaster","text":"","title":"Package io.matthewnelson.topl_core.broadcaster"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/#types","text":"Name Summary BroadcastLogger This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. class BroadcastLogger : CoreConsts TorStateMachine Current State of Tor class TorStateMachine : CoreConsts","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger BroadcastLogger \u00b6 class BroadcastLogger : CoreConsts (source) This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. To enable Logcat messages, buildConfigDebug must be true (w/e you have sent io.matthewnelson.topl_core.OnionProxyManager upon instantiation), and TorSettings.hasDebugLogs must also be true . This way if your implementation of the Library is causing problems in your App you need only set TorSettings.hasDebugLogs to true for a Debug build of your App. See helper method io.matthewnelson.topl_core.OnionProxyManager.getBroadcastLogger to instantiate. Parameters \u00b6 TAG - Typically, the class name, but able to be set to whatever you wish eventBroadcaster - For broadcasting the info buildConfigDebug - To enable/disable Logcat messages hasDebugLogs - To switch debug logs on/off, as well as Logcat messages on Debug builds. Properties \u00b6 Name Summary eventBroadcaster For broadcasting the info val eventBroadcaster: EventBroadcaster TAG Typically, the class name, but able to be set to whatever you wish val TAG: String Functions \u00b6 Name Summary debug Will only broadcast if hasDebugLogs is on. fun debug(msg: String ): Unit error fun error(msg: String ): Unit exception fun exception(e: Exception ): Unit notice fun notice(msg: String ): Unit torState fun torState(state: String , networkState: String ): Unit warn fun warn(msg: String ): Unit","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/#broadcastlogger","text":"class BroadcastLogger : CoreConsts (source) This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. To enable Logcat messages, buildConfigDebug must be true (w/e you have sent io.matthewnelson.topl_core.OnionProxyManager upon instantiation), and TorSettings.hasDebugLogs must also be true . This way if your implementation of the Library is causing problems in your App you need only set TorSettings.hasDebugLogs to true for a Debug build of your App. See helper method io.matthewnelson.topl_core.OnionProxyManager.getBroadcastLogger to instantiate.","title":"BroadcastLogger"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/#parameters","text":"TAG - Typically, the class name, but able to be set to whatever you wish eventBroadcaster - For broadcasting the info buildConfigDebug - To enable/disable Logcat messages hasDebugLogs - To switch debug logs on/off, as well as Logcat messages on Debug builds.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/#properties","text":"Name Summary eventBroadcaster For broadcasting the info val eventBroadcaster: EventBroadcaster TAG Typically, the class name, but able to be set to whatever you wish val TAG: String","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/#functions","text":"Name Summary debug Will only broadcast if hasDebugLogs is on. fun debug(msg: String ): Unit error fun error(msg: String ): Unit exception fun exception(e: Exception ): Unit notice fun notice(msg: String ): Unit torState fun torState(state: String , networkState: String ): Unit warn fun warn(msg: String ): Unit","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/-t-a-g/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / TAG TAG \u00b6 val TAG: String (source) Typically, the class name, but able to be set to whatever you wish","title":" t a g"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/-t-a-g/#tag","text":"val TAG: String (source) Typically, the class name, but able to be set to whatever you wish","title":"TAG"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/debug/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / debug debug \u00b6 fun debug(msg: String ): Unit (source) Will only broadcast if hasDebugLogs is on.","title":"Debug"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/debug/#debug","text":"fun debug(msg: String ): Unit (source) Will only broadcast if hasDebugLogs is on.","title":"debug"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/error/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / error error \u00b6 fun error(msg: String ): Unit (source)","title":"Error"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/error/#error","text":"fun error(msg: String ): Unit (source)","title":"error"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/event-broadcaster/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / eventBroadcaster eventBroadcaster \u00b6 val eventBroadcaster: EventBroadcaster (source) For broadcasting the info","title":"Event broadcaster"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/event-broadcaster/#eventbroadcaster","text":"val eventBroadcaster: EventBroadcaster (source) For broadcasting the info","title":"eventBroadcaster"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/exception/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / exception exception \u00b6 fun exception(e: Exception ): Unit (source)","title":"Exception"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/exception/#exception","text":"fun exception(e: Exception ): Unit (source)","title":"exception"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/notice/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / notice notice \u00b6 fun notice(msg: String ): Unit (source)","title":"Notice"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/notice/#notice","text":"fun notice(msg: String ): Unit (source)","title":"notice"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/tor-state/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / torState torState \u00b6 fun torState(state: String , networkState: String ): Unit (source)","title":"Tor state"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/tor-state/#torstate","text":"fun torState(state: String , networkState: String ): Unit (source)","title":"torState"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/warn/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / warn warn \u00b6 fun warn(msg: String ): Unit (source)","title":"Warn"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/warn/#warn","text":"fun warn(msg: String ): Unit (source)","title":"warn"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine TorStateMachine \u00b6 class TorStateMachine : CoreConsts (source) Current State of Tor Constructors \u00b6 Name Summary <init> Current State of Tor TorStateMachine(broadcastLogger: BroadcastLogger ) Properties \u00b6 Name Summary isNetworkDisabled val isNetworkDisabled: Boolean isOff val isOff: Boolean isOn val isOn: Boolean isStarting val isStarting: Boolean isStopping val isStopping: Boolean","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/#torstatemachine","text":"class TorStateMachine : CoreConsts (source) Current State of Tor","title":"TorStateMachine"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/#constructors","text":"Name Summary <init> Current State of Tor TorStateMachine(broadcastLogger: BroadcastLogger )","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/#properties","text":"Name Summary isNetworkDisabled val isNetworkDisabled: Boolean isOff val isOff: Boolean isOn val isOn: Boolean isStarting val isStarting: Boolean isStopping val isStopping: Boolean","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/-init-/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / <init> <init> \u00b6 TorStateMachine(broadcastLogger: BroadcastLogger ) Current State of Tor","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/-init-/#init","text":"TorStateMachine(broadcastLogger: BroadcastLogger ) Current State of Tor","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-network-disabled/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isNetworkDisabled isNetworkDisabled \u00b6 val isNetworkDisabled: Boolean (source)","title":"Is network disabled"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-network-disabled/#isnetworkdisabled","text":"val isNetworkDisabled: Boolean (source)","title":"isNetworkDisabled"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-off/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isOff isOff \u00b6 val isOff: Boolean (source)","title":"Is off"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-off/#isoff","text":"val isOff: Boolean (source)","title":"isOff"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-on/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isOn isOn \u00b6 val isOn: Boolean (source)","title":"Is on"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-on/#ison","text":"val isOn: Boolean (source)","title":"isOn"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-starting/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isStarting isStarting \u00b6 val isStarting: Boolean (source)","title":"Is starting"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-starting/#isstarting","text":"val isStarting: Boolean (source)","title":"isStarting"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-stopping/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isStopping isStopping \u00b6 val isStopping: Boolean (source)","title":"Is stopping"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-stopping/#isstopping","text":"val isStopping: Boolean (source)","title":"isStopping"},{"location":"topl-core/io.matthewnelson.topl_core.listener/","text":"topl-core / io.matthewnelson.topl_core.listener Package io.matthewnelson.topl_core.listener \u00b6 Types \u00b6 Name Summary BaseEventListener Extend this class to customize implementation of the member overrides. abstract class BaseEventListener : EventListener","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.listener/#package-iomatthewnelsontopl_corelistener","text":"","title":"Package io.matthewnelson.topl_core.listener"},{"location":"topl-core/io.matthewnelson.topl_core.listener/#types","text":"Name Summary BaseEventListener Extend this class to customize implementation of the member overrides. abstract class BaseEventListener : EventListener","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener BaseEventListener \u00b6 abstract class BaseEventListener : EventListener (source) Extend this class to customize implementation of the member overrides. Constructors \u00b6 Name Summary <init> Extend this class to customize implementation of the member overrides. BaseEventListener() Properties \u00b6 Name Summary broadcastLogger This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller . var broadcastLogger: BroadcastLogger ? CONTROL_COMMAND_EVENTS See TorControlCommands.EVENT_NAMES values. These are REQUIRED for registering them in io.matthewnelson.topl_core.OnionProxyManager.start which allows you full control over what you wish to listen for. abstract val CONTROL_COMMAND_EVENTS: Array < String > Functions \u00b6 Name Summary noticeMsg Requires that when you extend this class and override noticeMsg , you must use super.noticeMsg(data) within your overridden method; otherwise, noticeMsgBuffer and doesNoticeMsgBufferContain will not work correctly. open fun noticeMsg(data: String ?): Unit","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/#baseeventlistener","text":"abstract class BaseEventListener : EventListener (source) Extend this class to customize implementation of the member overrides.","title":"BaseEventListener"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/#constructors","text":"Name Summary <init> Extend this class to customize implementation of the member overrides. BaseEventListener()","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/#properties","text":"Name Summary broadcastLogger This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller . var broadcastLogger: BroadcastLogger ? CONTROL_COMMAND_EVENTS See TorControlCommands.EVENT_NAMES values. These are REQUIRED for registering them in io.matthewnelson.topl_core.OnionProxyManager.start which allows you full control over what you wish to listen for. abstract val CONTROL_COMMAND_EVENTS: Array < String >","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/#functions","text":"Name Summary noticeMsg Requires that when you extend this class and override noticeMsg , you must use super.noticeMsg(data) within your overridden method; otherwise, noticeMsgBuffer and doesNoticeMsgBufferContain will not work correctly. open fun noticeMsg(data: String ?): Unit","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/-c-o-n-t-r-o-l_-c-o-m-m-a-n-d_-e-v-e-n-t-s/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener / CONTROL_COMMAND_EVENTS CONTROL_COMMAND_EVENTS \u00b6 abstract val CONTROL_COMMAND_EVENTS: Array < String > (source) See TorControlCommands.EVENT_NAMES values. These are REQUIRED for registering them in io.matthewnelson.topl_core.OnionProxyManager.start which allows you full control over what you wish to listen for.","title":" c o n t r o l  c o m m a n d  e v e n t s"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/-c-o-n-t-r-o-l_-c-o-m-m-a-n-d_-e-v-e-n-t-s/#control_command_events","text":"abstract val CONTROL_COMMAND_EVENTS: Array < String > (source) See TorControlCommands.EVENT_NAMES values. These are REQUIRED for registering them in io.matthewnelson.topl_core.OnionProxyManager.start which allows you full control over what you wish to listen for.","title":"CONTROL_COMMAND_EVENTS"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/-init-/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener / <init> <init> \u00b6 BaseEventListener() Extend this class to customize implementation of the member overrides.","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/-init-/#init","text":"BaseEventListener() Extend this class to customize implementation of the member overrides.","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/broadcast-logger/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener / broadcastLogger broadcastLogger \u00b6 var broadcastLogger: BroadcastLogger ? (source) This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller .","title":"Broadcast logger"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/broadcast-logger/#broadcastlogger","text":"var broadcastLogger: BroadcastLogger ? (source) This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller .","title":"broadcastLogger"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/notice-msg/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener / noticeMsg noticeMsg \u00b6 open fun noticeMsg(data: String ?): Unit (source) Requires that when you extend this class and override noticeMsg , you must use super.noticeMsg(data) within your overridden method; otherwise, noticeMsgBuffer and doesNoticeMsgBufferContain will not work correctly.","title":"Notice msg"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/notice-msg/#noticemsg","text":"open fun noticeMsg(data: String ?): Unit (source) Requires that when you extend this class and override noticeMsg , you must use super.noticeMsg(data) within your overridden method; otherwise, noticeMsgBuffer and doesNoticeMsgBufferContain will not work correctly.","title":"noticeMsg"},{"location":"topl-core/io.matthewnelson.topl_core.settings/","text":"topl-core / io.matthewnelson.topl_core.settings Package io.matthewnelson.topl_core.settings \u00b6 Types \u00b6 Name Summary TorSettingsBuilder Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. class TorSettingsBuilder : CoreConsts","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.settings/#package-iomatthewnelsontopl_coresettings","text":"","title":"Package io.matthewnelson.topl_core.settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/#types","text":"Name Summary TorSettingsBuilder Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. class TorSettingsBuilder : CoreConsts","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder TorSettingsBuilder \u00b6 class TorSettingsBuilder : CoreConsts (source) Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. This class is basically a torrc file builder. Every method you call adds a specific value to the buffer which Tor understands. You can call addLine if something isn\u2019t covered here so you can customize your torrc file however you wish. Calling finishAndReturnString will return to you the String that has been built for you to write to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . Calling finishAndWriteToTorrcFile will do just that. onionProxyManager . getNewSettingsBuilder () . updateTorSettings () . setGeoIpFiles () . finishAndWriteToTorrcFile () Parameters \u00b6 onionProxyContext - OnionProxyContext broadcastLogger - for broadcasting/logging Functions \u00b6 Name Summary addBridge fun addBridge(type: String ?, config: String ?): TorSettingsBuilder addBridgesFromResources Adds bridges from a resource stream. This relies on the io.matthewnelson.topl_core.util.TorInstaller to know how to obtain this stream. These entries may be type-specified like: fun addBridgesFromResources(): TorSettingsBuilder addCustomBridge fun addCustomBridge(config: String ?): TorSettingsBuilder addLine Add a new line to the buffer if a setting here is not available. fun addLine(value: String ?): TorSettingsBuilder automapHostsOnResolve fun automapHostsOnResolve(enable: Boolean ): TorSettingsBuilder automapHostsOnResolveFromSettings fun automapHostsOnResolveFromSettings(): TorSettingsBuilder bridgesFromSettings fun bridgesFromSettings(): TorSettingsBuilder configurePluggableTransportsFromSettings fun configurePluggableTransportsFromSettings(pluggableTransportClient: File ?): TorSettingsBuilder connectionPadding fun connectionPadding(setting: String ): TorSettingsBuilder connectionPaddingFromSettings fun connectionPaddingFromSettings(): TorSettingsBuilder controlPortWriteToFile fun controlPortWriteToFile(torConfigFiles: TorConfigFiles ): TorSettingsBuilder controlPortWriteToFileFromConfig fun controlPortWriteToFileFromConfig(): TorSettingsBuilder cookieAuthentication fun cookieAuthentication(): TorSettingsBuilder cookieAuthenticationFromSettings fun cookieAuthenticationFromSettings(): TorSettingsBuilder debugLogs fun debugLogs(): TorSettingsBuilder debugLogsFromSettings fun debugLogsFromSettings(): TorSettingsBuilder disableNetwork fun disableNetwork(disable: Boolean ): TorSettingsBuilder disableNetworkFromSettings fun disableNetworkFromSettings(): TorSettingsBuilder dnsPort fun dnsPort(dnsPort: String ): TorSettingsBuilder dnsPortFromSettings fun dnsPortFromSettings(): TorSettingsBuilder dormantCanceledByStartup fun dormantCanceledByStartup(enable: Boolean ): TorSettingsBuilder dormantCanceledByStartupFromSettings fun dormantCanceledByStartupFromSettings(): TorSettingsBuilder entryNodes fun entryNodes(entryNodes: String ?): TorSettingsBuilder excludeNodes fun excludeNodes(excludeNodes: String ?): TorSettingsBuilder exitNodes fun exitNodes(exitNodes: String ?): TorSettingsBuilder finishAndReturnString This returns what\u2019s in the buffer as a String and then clears it. You still need to write the String to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . fun finishAndReturnString(): String finishAndWriteToTorrcFile A convenience method for after populating the buffer by calling updateTorSettings . It will overwrite your current torrc file (or create a new one if it doesn\u2019t exist) with the new settings. fun finishAndWriteToTorrcFile(): Unit geoIpFile fun geoIpFile(path: String ?): TorSettingsBuilder geoIpV6File fun geoIpV6File(path: String ?): TorSettingsBuilder httpTunnelPort fun httpTunnelPort(port: String , isolationFlags: String ?): TorSettingsBuilder httpTunnelPortFromSettings fun httpTunnelPortFromSettings(): TorSettingsBuilder makeNonExitRelay fun makeNonExitRelay(dnsFile: String , orPort: Int , nickname: String ): TorSettingsBuilder nodesFromSettings Sets the entry/exit/exclude nodes fun nodesFromSettings(): TorSettingsBuilder nonExitRelayFromSettings Adds non exit relay to builder. This method uses a default Quad9 nameserver. fun nonExitRelayFromSettings(): TorSettingsBuilder proxyOnAllInterfaces fun proxyOnAllInterfaces(): TorSettingsBuilder proxyOnAllInterfacesFromSettings fun proxyOnAllInterfacesFromSettings(): TorSettingsBuilder proxySocks5 Set socks5 proxy with no authentication. fun proxySocks5(host: String ?, port: Int ?): TorSettingsBuilder proxySocks5FromSettings fun proxySocks5FromSettings(): TorSettingsBuilder proxyWithAuthentication Sets proxyWithAuthentication information. If proxyType, proxyHost or proxyPort is empty/null, then this method does nothing. fun proxyWithAuthentication(proxyType: String ?, proxyHost: String ?, proxyPort: Int ?, proxyUser: String ?, proxyPass: String ?): TorSettingsBuilder proxyWithAuthenticationFromSettings fun proxyWithAuthenticationFromSettings(): TorSettingsBuilder reachableAddressesFromSettings fun reachableAddressesFromSettings(): TorSettingsBuilder reachableAddressPorts fun reachableAddressPorts(reachableAddressesPorts: String ?): TorSettingsBuilder reducedConnectionPadding fun reducedConnectionPadding(enable: Boolean ): TorSettingsBuilder reducedConnectionPaddingFromSettings fun reducedConnectionPaddingFromSettings(): TorSettingsBuilder reset fun reset(): Unit runAsDaemon fun runAsDaemon(enable: Boolean ): TorSettingsBuilder runAsDaemonFromSettings fun runAsDaemonFromSettings(): TorSettingsBuilder safeSocks fun safeSocks(enable: Boolean ): TorSettingsBuilder safeSocksFromSettings fun safeSocksFromSettings(): TorSettingsBuilder setGeoIpFiles Ensure that you have setup io.matthewnelson.topl_core.util.TorInstaller such that you\u2019ve copied the geoip/geoip6 files over prior to calling this. fun setGeoIpFiles(): TorSettingsBuilder socksPort fun socksPort(socksPort: String , isolationFlag: String ?): TorSettingsBuilder socksPortFromSettings fun socksPortFromSettings(): TorSettingsBuilder strictNodes fun strictNodes(enable: Boolean ): TorSettingsBuilder strictNodesFromSettings fun strictNodesFromSettings(): TorSettingsBuilder testSocks fun testSocks(enable: Boolean ): TorSettingsBuilder testSocksFromSettings fun testSocksFromSettings(): TorSettingsBuilder torrcCustomFromSettings fun torrcCustomFromSettings(): TorSettingsBuilder transPort fun transPort(transPort: String ): TorSettingsBuilder transPortFromSettings fun transPortFromSettings(): TorSettingsBuilder transportPlugin fun transportPlugin(clientPath: String ): TorSettingsBuilder updateTorSettings Updates the buffer for all methods annotated with SettingsConfig . You still need to call finishAndReturnString and then write the returned String to your io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . fun updateTorSettings(): TorSettingsBuilder useBridges fun useBridges(useThem: Boolean ): TorSettingsBuilder useBridgesFromSettings fun useBridgesFromSettings(): TorSettingsBuilder virtualAddressNetwork fun virtualAddressNetwork(address: String ?): TorSettingsBuilder virtualAddressNetworkFromSettings fun virtualAddressNetworkFromSettings(): TorSettingsBuilder","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/#torsettingsbuilder","text":"class TorSettingsBuilder : CoreConsts (source) Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. This class is basically a torrc file builder. Every method you call adds a specific value to the buffer which Tor understands. You can call addLine if something isn\u2019t covered here so you can customize your torrc file however you wish. Calling finishAndReturnString will return to you the String that has been built for you to write to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . Calling finishAndWriteToTorrcFile will do just that. onionProxyManager . getNewSettingsBuilder () . updateTorSettings () . setGeoIpFiles () . finishAndWriteToTorrcFile ()","title":"TorSettingsBuilder"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/#parameters","text":"onionProxyContext - OnionProxyContext broadcastLogger - for broadcasting/logging","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/#functions","text":"Name Summary addBridge fun addBridge(type: String ?, config: String ?): TorSettingsBuilder addBridgesFromResources Adds bridges from a resource stream. This relies on the io.matthewnelson.topl_core.util.TorInstaller to know how to obtain this stream. These entries may be type-specified like: fun addBridgesFromResources(): TorSettingsBuilder addCustomBridge fun addCustomBridge(config: String ?): TorSettingsBuilder addLine Add a new line to the buffer if a setting here is not available. fun addLine(value: String ?): TorSettingsBuilder automapHostsOnResolve fun automapHostsOnResolve(enable: Boolean ): TorSettingsBuilder automapHostsOnResolveFromSettings fun automapHostsOnResolveFromSettings(): TorSettingsBuilder bridgesFromSettings fun bridgesFromSettings(): TorSettingsBuilder configurePluggableTransportsFromSettings fun configurePluggableTransportsFromSettings(pluggableTransportClient: File ?): TorSettingsBuilder connectionPadding fun connectionPadding(setting: String ): TorSettingsBuilder connectionPaddingFromSettings fun connectionPaddingFromSettings(): TorSettingsBuilder controlPortWriteToFile fun controlPortWriteToFile(torConfigFiles: TorConfigFiles ): TorSettingsBuilder controlPortWriteToFileFromConfig fun controlPortWriteToFileFromConfig(): TorSettingsBuilder cookieAuthentication fun cookieAuthentication(): TorSettingsBuilder cookieAuthenticationFromSettings fun cookieAuthenticationFromSettings(): TorSettingsBuilder debugLogs fun debugLogs(): TorSettingsBuilder debugLogsFromSettings fun debugLogsFromSettings(): TorSettingsBuilder disableNetwork fun disableNetwork(disable: Boolean ): TorSettingsBuilder disableNetworkFromSettings fun disableNetworkFromSettings(): TorSettingsBuilder dnsPort fun dnsPort(dnsPort: String ): TorSettingsBuilder dnsPortFromSettings fun dnsPortFromSettings(): TorSettingsBuilder dormantCanceledByStartup fun dormantCanceledByStartup(enable: Boolean ): TorSettingsBuilder dormantCanceledByStartupFromSettings fun dormantCanceledByStartupFromSettings(): TorSettingsBuilder entryNodes fun entryNodes(entryNodes: String ?): TorSettingsBuilder excludeNodes fun excludeNodes(excludeNodes: String ?): TorSettingsBuilder exitNodes fun exitNodes(exitNodes: String ?): TorSettingsBuilder finishAndReturnString This returns what\u2019s in the buffer as a String and then clears it. You still need to write the String to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . fun finishAndReturnString(): String finishAndWriteToTorrcFile A convenience method for after populating the buffer by calling updateTorSettings . It will overwrite your current torrc file (or create a new one if it doesn\u2019t exist) with the new settings. fun finishAndWriteToTorrcFile(): Unit geoIpFile fun geoIpFile(path: String ?): TorSettingsBuilder geoIpV6File fun geoIpV6File(path: String ?): TorSettingsBuilder httpTunnelPort fun httpTunnelPort(port: String , isolationFlags: String ?): TorSettingsBuilder httpTunnelPortFromSettings fun httpTunnelPortFromSettings(): TorSettingsBuilder makeNonExitRelay fun makeNonExitRelay(dnsFile: String , orPort: Int , nickname: String ): TorSettingsBuilder nodesFromSettings Sets the entry/exit/exclude nodes fun nodesFromSettings(): TorSettingsBuilder nonExitRelayFromSettings Adds non exit relay to builder. This method uses a default Quad9 nameserver. fun nonExitRelayFromSettings(): TorSettingsBuilder proxyOnAllInterfaces fun proxyOnAllInterfaces(): TorSettingsBuilder proxyOnAllInterfacesFromSettings fun proxyOnAllInterfacesFromSettings(): TorSettingsBuilder proxySocks5 Set socks5 proxy with no authentication. fun proxySocks5(host: String ?, port: Int ?): TorSettingsBuilder proxySocks5FromSettings fun proxySocks5FromSettings(): TorSettingsBuilder proxyWithAuthentication Sets proxyWithAuthentication information. If proxyType, proxyHost or proxyPort is empty/null, then this method does nothing. fun proxyWithAuthentication(proxyType: String ?, proxyHost: String ?, proxyPort: Int ?, proxyUser: String ?, proxyPass: String ?): TorSettingsBuilder proxyWithAuthenticationFromSettings fun proxyWithAuthenticationFromSettings(): TorSettingsBuilder reachableAddressesFromSettings fun reachableAddressesFromSettings(): TorSettingsBuilder reachableAddressPorts fun reachableAddressPorts(reachableAddressesPorts: String ?): TorSettingsBuilder reducedConnectionPadding fun reducedConnectionPadding(enable: Boolean ): TorSettingsBuilder reducedConnectionPaddingFromSettings fun reducedConnectionPaddingFromSettings(): TorSettingsBuilder reset fun reset(): Unit runAsDaemon fun runAsDaemon(enable: Boolean ): TorSettingsBuilder runAsDaemonFromSettings fun runAsDaemonFromSettings(): TorSettingsBuilder safeSocks fun safeSocks(enable: Boolean ): TorSettingsBuilder safeSocksFromSettings fun safeSocksFromSettings(): TorSettingsBuilder setGeoIpFiles Ensure that you have setup io.matthewnelson.topl_core.util.TorInstaller such that you\u2019ve copied the geoip/geoip6 files over prior to calling this. fun setGeoIpFiles(): TorSettingsBuilder socksPort fun socksPort(socksPort: String , isolationFlag: String ?): TorSettingsBuilder socksPortFromSettings fun socksPortFromSettings(): TorSettingsBuilder strictNodes fun strictNodes(enable: Boolean ): TorSettingsBuilder strictNodesFromSettings fun strictNodesFromSettings(): TorSettingsBuilder testSocks fun testSocks(enable: Boolean ): TorSettingsBuilder testSocksFromSettings fun testSocksFromSettings(): TorSettingsBuilder torrcCustomFromSettings fun torrcCustomFromSettings(): TorSettingsBuilder transPort fun transPort(transPort: String ): TorSettingsBuilder transPortFromSettings fun transPortFromSettings(): TorSettingsBuilder transportPlugin fun transportPlugin(clientPath: String ): TorSettingsBuilder updateTorSettings Updates the buffer for all methods annotated with SettingsConfig . You still need to call finishAndReturnString and then write the returned String to your io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . fun updateTorSettings(): TorSettingsBuilder useBridges fun useBridges(useThem: Boolean ): TorSettingsBuilder useBridgesFromSettings fun useBridgesFromSettings(): TorSettingsBuilder virtualAddressNetwork fun virtualAddressNetwork(address: String ?): TorSettingsBuilder virtualAddressNetworkFromSettings fun virtualAddressNetworkFromSettings(): TorSettingsBuilder","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-bridge/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / addBridge addBridge \u00b6 fun addBridge(type: String ?, config: String ?): TorSettingsBuilder (source)","title":"Add bridge"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-bridge/#addbridge","text":"fun addBridge(type: String ?, config: String ?): TorSettingsBuilder (source)","title":"addBridge"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-bridges-from-resources/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / addBridgesFromResources addBridgesFromResources \u00b6 fun addBridgesFromResources(): TorSettingsBuilder (source) Adds bridges from a resource stream. This relies on the io.matthewnelson.topl_core.util.TorInstaller to know how to obtain this stream. These entries may be type-specified like: obfs3 169.229.59.74:31493 AF9F66B7B04F8FF6F32D455F05135250A16543C9 Or it may just be a custom entry like 69.163.45.129:443 9F090DE98CA6F67DEEB1F87EFE7C1BFD884E6E2F See io.matthewnelson.topl_core.util.TorInstaller comment for further details on how to implement that. TODO: Re-work format type to use annotations\u2026","title":"Add bridges from resources"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-bridges-from-resources/#addbridgesfromresources","text":"fun addBridgesFromResources(): TorSettingsBuilder (source) Adds bridges from a resource stream. This relies on the io.matthewnelson.topl_core.util.TorInstaller to know how to obtain this stream. These entries may be type-specified like: obfs3 169.229.59.74:31493 AF9F66B7B04F8FF6F32D455F05135250A16543C9 Or it may just be a custom entry like 69.163.45.129:443 9F090DE98CA6F67DEEB1F87EFE7C1BFD884E6E2F See io.matthewnelson.topl_core.util.TorInstaller comment for further details on how to implement that. TODO: Re-work format type to use annotations\u2026","title":"addBridgesFromResources"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-custom-bridge/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / addCustomBridge addCustomBridge \u00b6 fun addCustomBridge(config: String ?): TorSettingsBuilder (source)","title":"Add custom bridge"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-custom-bridge/#addcustombridge","text":"fun addCustomBridge(config: String ?): TorSettingsBuilder (source)","title":"addCustomBridge"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-line/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / addLine addLine \u00b6 fun addLine(value: String ?): TorSettingsBuilder (source) Add a new line to the buffer if a setting here is not available.","title":"Add line"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-line/#addline","text":"fun addLine(value: String ?): TorSettingsBuilder (source) Add a new line to the buffer if a setting here is not available.","title":"addLine"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/automap-hosts-on-resolve-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / automapHostsOnResolveFromSettings automapHostsOnResolveFromSettings \u00b6 fun automapHostsOnResolveFromSettings(): TorSettingsBuilder (source)","title":"Automap hosts on resolve from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/automap-hosts-on-resolve-from-settings/#automaphostsonresolvefromsettings","text":"fun automapHostsOnResolveFromSettings(): TorSettingsBuilder (source)","title":"automapHostsOnResolveFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/automap-hosts-on-resolve/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / automapHostsOnResolve automapHostsOnResolve \u00b6 fun automapHostsOnResolve(enable: Boolean ): TorSettingsBuilder (source)","title":"Automap hosts on resolve"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/automap-hosts-on-resolve/#automaphostsonresolve","text":"fun automapHostsOnResolve(enable: Boolean ): TorSettingsBuilder (source)","title":"automapHostsOnResolve"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/bridges-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / bridgesFromSettings bridgesFromSettings \u00b6 fun bridgesFromSettings(): TorSettingsBuilder (source)","title":"Bridges from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/bridges-from-settings/#bridgesfromsettings","text":"fun bridgesFromSettings(): TorSettingsBuilder (source)","title":"bridgesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/configure-pluggable-transports-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / configurePluggableTransportsFromSettings configurePluggableTransportsFromSettings \u00b6 fun configurePluggableTransportsFromSettings(pluggableTransportClient: File ?): TorSettingsBuilder (source)","title":"Configure pluggable transports from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/configure-pluggable-transports-from-settings/#configurepluggabletransportsfromsettings","text":"fun configurePluggableTransportsFromSettings(pluggableTransportClient: File ?): TorSettingsBuilder (source)","title":"configurePluggableTransportsFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/connection-padding-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / connectionPaddingFromSettings connectionPaddingFromSettings \u00b6 fun connectionPaddingFromSettings(): TorSettingsBuilder (source)","title":"Connection padding from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/connection-padding-from-settings/#connectionpaddingfromsettings","text":"fun connectionPaddingFromSettings(): TorSettingsBuilder (source)","title":"connectionPaddingFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/connection-padding/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / connectionPadding connectionPadding \u00b6 fun connectionPadding(setting: String ): TorSettingsBuilder (source)","title":"Connection padding"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/connection-padding/#connectionpadding","text":"fun connectionPadding(setting: String ): TorSettingsBuilder (source)","title":"connectionPadding"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/control-port-write-to-file-from-config/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / controlPortWriteToFileFromConfig controlPortWriteToFileFromConfig \u00b6 fun controlPortWriteToFileFromConfig(): TorSettingsBuilder (source)","title":"Control port write to file from config"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/control-port-write-to-file-from-config/#controlportwritetofilefromconfig","text":"fun controlPortWriteToFileFromConfig(): TorSettingsBuilder (source)","title":"controlPortWriteToFileFromConfig"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/control-port-write-to-file/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / controlPortWriteToFile controlPortWriteToFile \u00b6 fun controlPortWriteToFile(torConfigFiles: TorConfigFiles ): TorSettingsBuilder (source)","title":"Control port write to file"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/control-port-write-to-file/#controlportwritetofile","text":"fun controlPortWriteToFile(torConfigFiles: TorConfigFiles ): TorSettingsBuilder (source)","title":"controlPortWriteToFile"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/cookie-authentication-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / cookieAuthenticationFromSettings cookieAuthenticationFromSettings \u00b6 fun cookieAuthenticationFromSettings(): TorSettingsBuilder (source)","title":"Cookie authentication from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/cookie-authentication-from-settings/#cookieauthenticationfromsettings","text":"fun cookieAuthenticationFromSettings(): TorSettingsBuilder (source)","title":"cookieAuthenticationFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/cookie-authentication/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / cookieAuthentication cookieAuthentication \u00b6 fun cookieAuthentication(): TorSettingsBuilder (source)","title":"Cookie authentication"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/cookie-authentication/#cookieauthentication","text":"fun cookieAuthentication(): TorSettingsBuilder (source)","title":"cookieAuthentication"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/debug-logs-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / debugLogsFromSettings debugLogsFromSettings \u00b6 fun debugLogsFromSettings(): TorSettingsBuilder (source)","title":"Debug logs from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/debug-logs-from-settings/#debuglogsfromsettings","text":"fun debugLogsFromSettings(): TorSettingsBuilder (source)","title":"debugLogsFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/debug-logs/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / debugLogs debugLogs \u00b6 fun debugLogs(): TorSettingsBuilder (source)","title":"Debug logs"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/debug-logs/#debuglogs","text":"fun debugLogs(): TorSettingsBuilder (source)","title":"debugLogs"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/disable-network-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / disableNetworkFromSettings disableNetworkFromSettings \u00b6 fun disableNetworkFromSettings(): TorSettingsBuilder (source)","title":"Disable network from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/disable-network-from-settings/#disablenetworkfromsettings","text":"fun disableNetworkFromSettings(): TorSettingsBuilder (source)","title":"disableNetworkFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/disable-network/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / disableNetwork disableNetwork \u00b6 fun disableNetwork(disable: Boolean ): TorSettingsBuilder (source)","title":"Disable network"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/disable-network/#disablenetwork","text":"fun disableNetwork(disable: Boolean ): TorSettingsBuilder (source)","title":"disableNetwork"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dns-port-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dnsPortFromSettings dnsPortFromSettings \u00b6 fun dnsPortFromSettings(): TorSettingsBuilder (source)","title":"Dns port from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dns-port-from-settings/#dnsportfromsettings","text":"fun dnsPortFromSettings(): TorSettingsBuilder (source)","title":"dnsPortFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dns-port/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dnsPort dnsPort \u00b6 fun dnsPort(dnsPort: String ): TorSettingsBuilder (source)","title":"Dns port"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dns-port/#dnsport","text":"fun dnsPort(dnsPort: String ): TorSettingsBuilder (source)","title":"dnsPort"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-canceled-by-startup-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dormantCanceledByStartupFromSettings dormantCanceledByStartupFromSettings \u00b6 fun dormantCanceledByStartupFromSettings(): TorSettingsBuilder (source)","title":"Dormant canceled by startup from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-canceled-by-startup-from-settings/#dormantcanceledbystartupfromsettings","text":"fun dormantCanceledByStartupFromSettings(): TorSettingsBuilder (source)","title":"dormantCanceledByStartupFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-canceled-by-startup/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dormantCanceledByStartup dormantCanceledByStartup \u00b6 fun dormantCanceledByStartup(enable: Boolean ): TorSettingsBuilder (source)","title":"Dormant canceled by startup"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-canceled-by-startup/#dormantcanceledbystartup","text":"fun dormantCanceledByStartup(enable: Boolean ): TorSettingsBuilder (source)","title":"dormantCanceledByStartup"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/entry-nodes/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / entryNodes entryNodes \u00b6 fun entryNodes(entryNodes: String ?): TorSettingsBuilder (source)","title":"Entry nodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/entry-nodes/#entrynodes","text":"fun entryNodes(entryNodes: String ?): TorSettingsBuilder (source)","title":"entryNodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/exclude-nodes/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / excludeNodes excludeNodes \u00b6 fun excludeNodes(excludeNodes: String ?): TorSettingsBuilder (source)","title":"Exclude nodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/exclude-nodes/#excludenodes","text":"fun excludeNodes(excludeNodes: String ?): TorSettingsBuilder (source)","title":"excludeNodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/exit-nodes/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / exitNodes exitNodes \u00b6 fun exitNodes(exitNodes: String ?): TorSettingsBuilder (source)","title":"Exit nodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/exit-nodes/#exitnodes","text":"fun exitNodes(exitNodes: String ?): TorSettingsBuilder (source)","title":"exitNodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/finish-and-return-string/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / finishAndReturnString finishAndReturnString \u00b6 fun finishAndReturnString(): String (source) This returns what\u2019s in the buffer as a String and then clears it. You still need to write the String to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile .","title":"Finish and return string"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/finish-and-return-string/#finishandreturnstring","text":"fun finishAndReturnString(): String (source) This returns what\u2019s in the buffer as a String and then clears it. You still need to write the String to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile .","title":"finishAndReturnString"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/finish-and-write-to-torrc-file/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / finishAndWriteToTorrcFile finishAndWriteToTorrcFile \u00b6 fun finishAndWriteToTorrcFile(): Unit (source) A convenience method for after populating the buffer by calling updateTorSettings . It will overwrite your current torrc file (or create a new one if it doesn\u2019t exist) with the new settings. TODO: Devise a more elegant solution using a diff to simply update it if need be.","title":"Finish and write to torrc file"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/finish-and-write-to-torrc-file/#finishandwritetotorrcfile","text":"fun finishAndWriteToTorrcFile(): Unit (source) A convenience method for after populating the buffer by calling updateTorSettings . It will overwrite your current torrc file (or create a new one if it doesn\u2019t exist) with the new settings. TODO: Devise a more elegant solution using a diff to simply update it if need be.","title":"finishAndWriteToTorrcFile"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/geo-ip-file/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / geoIpFile geoIpFile \u00b6 fun geoIpFile(path: String ?): TorSettingsBuilder (source)","title":"Geo ip file"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/geo-ip-file/#geoipfile","text":"fun geoIpFile(path: String ?): TorSettingsBuilder (source)","title":"geoIpFile"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/geo-ip-v6-file/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / geoIpV6File geoIpV6File \u00b6 fun geoIpV6File(path: String ?): TorSettingsBuilder (source)","title":"Geo ip v6 file"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/geo-ip-v6-file/#geoipv6file","text":"fun geoIpV6File(path: String ?): TorSettingsBuilder (source)","title":"geoIpV6File"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/http-tunnel-port-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / httpTunnelPortFromSettings httpTunnelPortFromSettings \u00b6 fun httpTunnelPortFromSettings(): TorSettingsBuilder (source)","title":"Http tunnel port from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/http-tunnel-port-from-settings/#httptunnelportfromsettings","text":"fun httpTunnelPortFromSettings(): TorSettingsBuilder (source)","title":"httpTunnelPortFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/http-tunnel-port/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / httpTunnelPort httpTunnelPort \u00b6 fun httpTunnelPort(port: String , isolationFlags: String ?): TorSettingsBuilder (source)","title":"Http tunnel port"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/http-tunnel-port/#httptunnelport","text":"fun httpTunnelPort(port: String , isolationFlags: String ?): TorSettingsBuilder (source)","title":"httpTunnelPort"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/make-non-exit-relay/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / makeNonExitRelay makeNonExitRelay \u00b6 fun makeNonExitRelay(dnsFile: String , orPort: Int , nickname: String ): TorSettingsBuilder (source)","title":"Make non exit relay"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/make-non-exit-relay/#makenonexitrelay","text":"fun makeNonExitRelay(dnsFile: String , orPort: Int , nickname: String ): TorSettingsBuilder (source)","title":"makeNonExitRelay"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/nodes-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / nodesFromSettings nodesFromSettings \u00b6 fun nodesFromSettings(): TorSettingsBuilder (source) Sets the entry/exit/exclude nodes","title":"Nodes from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/nodes-from-settings/#nodesfromsettings","text":"fun nodesFromSettings(): TorSettingsBuilder (source) Sets the entry/exit/exclude nodes","title":"nodesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/non-exit-relay-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / nonExitRelayFromSettings nonExitRelayFromSettings \u00b6 fun nonExitRelayFromSettings(): TorSettingsBuilder (source) Adds non exit relay to builder. This method uses a default Quad9 nameserver.","title":"Non exit relay from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/non-exit-relay-from-settings/#nonexitrelayfromsettings","text":"fun nonExitRelayFromSettings(): TorSettingsBuilder (source) Adds non exit relay to builder. This method uses a default Quad9 nameserver.","title":"nonExitRelayFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-on-all-interfaces-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxyOnAllInterfacesFromSettings proxyOnAllInterfacesFromSettings \u00b6 fun proxyOnAllInterfacesFromSettings(): TorSettingsBuilder (source)","title":"Proxy on all interfaces from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-on-all-interfaces-from-settings/#proxyonallinterfacesfromsettings","text":"fun proxyOnAllInterfacesFromSettings(): TorSettingsBuilder (source)","title":"proxyOnAllInterfacesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-on-all-interfaces/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxyOnAllInterfaces proxyOnAllInterfaces \u00b6 fun proxyOnAllInterfaces(): TorSettingsBuilder (source)","title":"Proxy on all interfaces"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-on-all-interfaces/#proxyonallinterfaces","text":"fun proxyOnAllInterfaces(): TorSettingsBuilder (source)","title":"proxyOnAllInterfaces"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-socks5-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxySocks5FromSettings proxySocks5FromSettings \u00b6 fun proxySocks5FromSettings(): TorSettingsBuilder (source)","title":"Proxy socks5 from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-socks5-from-settings/#proxysocks5fromsettings","text":"fun proxySocks5FromSettings(): TorSettingsBuilder (source)","title":"proxySocks5FromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-socks5/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxySocks5 proxySocks5 \u00b6 fun proxySocks5(host: String ?, port: Int ?): TorSettingsBuilder (source) Set socks5 proxy with no authentication.","title":"Proxy socks5"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-socks5/#proxysocks5","text":"fun proxySocks5(host: String ?, port: Int ?): TorSettingsBuilder (source) Set socks5 proxy with no authentication.","title":"proxySocks5"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-with-authentication-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxyWithAuthenticationFromSettings proxyWithAuthenticationFromSettings \u00b6 fun proxyWithAuthenticationFromSettings(): TorSettingsBuilder (source)","title":"Proxy with authentication from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-with-authentication-from-settings/#proxywithauthenticationfromsettings","text":"fun proxyWithAuthenticationFromSettings(): TorSettingsBuilder (source)","title":"proxyWithAuthenticationFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-with-authentication/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxyWithAuthentication proxyWithAuthentication \u00b6 fun proxyWithAuthentication(proxyType: String ?, proxyHost: String ?, proxyPort: Int ?, proxyUser: String ?, proxyPass: String ?): TorSettingsBuilder (source) Sets proxyWithAuthentication information. If proxyType, proxyHost or proxyPort is empty/null, then this method does nothing. HTTPProxyAuthenticator is deprecated as of 0.3.1.0-alpha, use HTTPS/Socks5 authentication. TODO: Remove support for HTTPProxyAuthenticator TODO: Re-work this mess with annotation types and when statements\u2026","title":"Proxy with authentication"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-with-authentication/#proxywithauthentication","text":"fun proxyWithAuthentication(proxyType: String ?, proxyHost: String ?, proxyPort: Int ?, proxyUser: String ?, proxyPass: String ?): TorSettingsBuilder (source) Sets proxyWithAuthentication information. If proxyType, proxyHost or proxyPort is empty/null, then this method does nothing. HTTPProxyAuthenticator is deprecated as of 0.3.1.0-alpha, use HTTPS/Socks5 authentication. TODO: Remove support for HTTPProxyAuthenticator TODO: Re-work this mess with annotation types and when statements\u2026","title":"proxyWithAuthentication"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reachable-address-ports/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reachableAddressPorts reachableAddressPorts \u00b6 fun reachableAddressPorts(reachableAddressesPorts: String ?): TorSettingsBuilder (source)","title":"Reachable address ports"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reachable-address-ports/#reachableaddressports","text":"fun reachableAddressPorts(reachableAddressesPorts: String ?): TorSettingsBuilder (source)","title":"reachableAddressPorts"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reachable-addresses-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reachableAddressesFromSettings reachableAddressesFromSettings \u00b6 fun reachableAddressesFromSettings(): TorSettingsBuilder (source)","title":"Reachable addresses from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reachable-addresses-from-settings/#reachableaddressesfromsettings","text":"fun reachableAddressesFromSettings(): TorSettingsBuilder (source)","title":"reachableAddressesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reduced-connection-padding-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reducedConnectionPaddingFromSettings reducedConnectionPaddingFromSettings \u00b6 fun reducedConnectionPaddingFromSettings(): TorSettingsBuilder (source)","title":"Reduced connection padding from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reduced-connection-padding-from-settings/#reducedconnectionpaddingfromsettings","text":"fun reducedConnectionPaddingFromSettings(): TorSettingsBuilder (source)","title":"reducedConnectionPaddingFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reduced-connection-padding/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reducedConnectionPadding reducedConnectionPadding \u00b6 fun reducedConnectionPadding(enable: Boolean ): TorSettingsBuilder (source)","title":"Reduced connection padding"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reduced-connection-padding/#reducedconnectionpadding","text":"fun reducedConnectionPadding(enable: Boolean ): TorSettingsBuilder (source)","title":"reducedConnectionPadding"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reset/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reset reset \u00b6 fun reset(): Unit (source)","title":"Reset"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reset/#reset","text":"fun reset(): Unit (source)","title":"reset"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/run-as-daemon-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / runAsDaemonFromSettings runAsDaemonFromSettings \u00b6 fun runAsDaemonFromSettings(): TorSettingsBuilder (source)","title":"Run as daemon from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/run-as-daemon-from-settings/#runasdaemonfromsettings","text":"fun runAsDaemonFromSettings(): TorSettingsBuilder (source)","title":"runAsDaemonFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/run-as-daemon/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / runAsDaemon runAsDaemon \u00b6 fun runAsDaemon(enable: Boolean ): TorSettingsBuilder (source)","title":"Run as daemon"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/run-as-daemon/#runasdaemon","text":"fun runAsDaemon(enable: Boolean ): TorSettingsBuilder (source)","title":"runAsDaemon"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/safe-socks-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / safeSocksFromSettings safeSocksFromSettings \u00b6 fun safeSocksFromSettings(): TorSettingsBuilder (source)","title":"Safe socks from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/safe-socks-from-settings/#safesocksfromsettings","text":"fun safeSocksFromSettings(): TorSettingsBuilder (source)","title":"safeSocksFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/safe-socks/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / safeSocks safeSocks \u00b6 fun safeSocks(enable: Boolean ): TorSettingsBuilder (source)","title":"Safe socks"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/safe-socks/#safesocks","text":"fun safeSocks(enable: Boolean ): TorSettingsBuilder (source)","title":"safeSocks"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/set-geo-ip-files/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / setGeoIpFiles setGeoIpFiles \u00b6 fun setGeoIpFiles(): TorSettingsBuilder (source) Ensure that you have setup io.matthewnelson.topl_core.util.TorInstaller such that you\u2019ve copied the geoip/geoip6 files over prior to calling this.","title":"Set geo ip files"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/set-geo-ip-files/#setgeoipfiles","text":"fun setGeoIpFiles(): TorSettingsBuilder (source) Ensure that you have setup io.matthewnelson.topl_core.util.TorInstaller such that you\u2019ve copied the geoip/geoip6 files over prior to calling this.","title":"setGeoIpFiles"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/socks-port-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / socksPortFromSettings socksPortFromSettings \u00b6 @WorkerThread fun socksPortFromSettings(): TorSettingsBuilder (source)","title":"Socks port from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/socks-port-from-settings/#socksportfromsettings","text":"@WorkerThread fun socksPortFromSettings(): TorSettingsBuilder (source)","title":"socksPortFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/socks-port/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / socksPort socksPort \u00b6 fun socksPort(socksPort: String , isolationFlag: String ?): TorSettingsBuilder (source)","title":"Socks port"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/socks-port/#socksport","text":"fun socksPort(socksPort: String , isolationFlag: String ?): TorSettingsBuilder (source)","title":"socksPort"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/strict-nodes-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / strictNodesFromSettings strictNodesFromSettings \u00b6 fun strictNodesFromSettings(): TorSettingsBuilder (source)","title":"Strict nodes from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/strict-nodes-from-settings/#strictnodesfromsettings","text":"fun strictNodesFromSettings(): TorSettingsBuilder (source)","title":"strictNodesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/strict-nodes/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / strictNodes strictNodes \u00b6 fun strictNodes(enable: Boolean ): TorSettingsBuilder (source)","title":"Strict nodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/strict-nodes/#strictnodes","text":"fun strictNodes(enable: Boolean ): TorSettingsBuilder (source)","title":"strictNodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/test-socks-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / testSocksFromSettings testSocksFromSettings \u00b6 fun testSocksFromSettings(): TorSettingsBuilder (source)","title":"Test socks from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/test-socks-from-settings/#testsocksfromsettings","text":"fun testSocksFromSettings(): TorSettingsBuilder (source)","title":"testSocksFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/test-socks/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / testSocks testSocks \u00b6 fun testSocks(enable: Boolean ): TorSettingsBuilder (source)","title":"Test socks"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/test-socks/#testsocks","text":"fun testSocks(enable: Boolean ): TorSettingsBuilder (source)","title":"testSocks"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/torrc-custom-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / torrcCustomFromSettings torrcCustomFromSettings \u00b6 fun torrcCustomFromSettings(): TorSettingsBuilder (source)","title":"Torrc custom from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/torrc-custom-from-settings/#torrccustomfromsettings","text":"fun torrcCustomFromSettings(): TorSettingsBuilder (source)","title":"torrcCustomFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/trans-port-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / transPortFromSettings transPortFromSettings \u00b6 fun transPortFromSettings(): TorSettingsBuilder (source)","title":"Trans port from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/trans-port-from-settings/#transportfromsettings","text":"fun transPortFromSettings(): TorSettingsBuilder (source)","title":"transPortFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/trans-port/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / transPort transPort \u00b6 fun transPort(transPort: String ): TorSettingsBuilder (source)","title":"Trans port"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/trans-port/#transport","text":"fun transPort(transPort: String ): TorSettingsBuilder (source)","title":"transPort"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/transport-plugin/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / transportPlugin transportPlugin \u00b6 fun transportPlugin(clientPath: String ): TorSettingsBuilder (source)","title":"Transport plugin"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/transport-plugin/#transportplugin","text":"fun transportPlugin(clientPath: String ): TorSettingsBuilder (source)","title":"transportPlugin"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/update-tor-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / updateTorSettings updateTorSettings \u00b6 fun updateTorSettings(): TorSettingsBuilder (source) Updates the buffer for all methods annotated with SettingsConfig . You still need to call finishAndReturnString and then write the returned String to your io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . Alternatively, call finishAndWriteToTorrcFile , it\u2019s up to you. Exceptions \u00b6 SecurityException - If denied access to the class IllegalAccessException - see java.lang.reflect.Method.invoke IllegalArgumentException - see java.lang.reflect.Method.invoke InvocationTargetException - see java.lang.reflect.Method.invoke NullPointerException - see java.lang.reflect.Method.invoke ExceptionInInitializerError - see java.lang.reflect.Method.invoke TODO: Replace reflection.......... gross.","title":"Update tor settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/update-tor-settings/#updatetorsettings","text":"fun updateTorSettings(): TorSettingsBuilder (source) Updates the buffer for all methods annotated with SettingsConfig . You still need to call finishAndReturnString and then write the returned String to your io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . Alternatively, call finishAndWriteToTorrcFile , it\u2019s up to you.","title":"updateTorSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/update-tor-settings/#exceptions","text":"SecurityException - If denied access to the class IllegalAccessException - see java.lang.reflect.Method.invoke IllegalArgumentException - see java.lang.reflect.Method.invoke InvocationTargetException - see java.lang.reflect.Method.invoke NullPointerException - see java.lang.reflect.Method.invoke ExceptionInInitializerError - see java.lang.reflect.Method.invoke TODO: Replace reflection.......... gross.","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/use-bridges-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / useBridgesFromSettings useBridgesFromSettings \u00b6 fun useBridgesFromSettings(): TorSettingsBuilder (source)","title":"Use bridges from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/use-bridges-from-settings/#usebridgesfromsettings","text":"fun useBridgesFromSettings(): TorSettingsBuilder (source)","title":"useBridgesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/use-bridges/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / useBridges useBridges \u00b6 fun useBridges(useThem: Boolean ): TorSettingsBuilder (source)","title":"Use bridges"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/use-bridges/#usebridges","text":"fun useBridges(useThem: Boolean ): TorSettingsBuilder (source)","title":"useBridges"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/virtual-address-network-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / virtualAddressNetworkFromSettings virtualAddressNetworkFromSettings \u00b6 fun virtualAddressNetworkFromSettings(): TorSettingsBuilder (source)","title":"Virtual address network from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/virtual-address-network-from-settings/#virtualaddressnetworkfromsettings","text":"fun virtualAddressNetworkFromSettings(): TorSettingsBuilder (source)","title":"virtualAddressNetworkFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/virtual-address-network/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / virtualAddressNetwork virtualAddressNetwork \u00b6 fun virtualAddressNetwork(address: String ?): TorSettingsBuilder (source)","title":"Virtual address network"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/virtual-address-network/#virtualaddressnetwork","text":"fun virtualAddressNetwork(address: String ?): TorSettingsBuilder (source)","title":"virtualAddressNetwork"},{"location":"topl-core/io.matthewnelson.topl_core.util/","text":"topl-core / io.matthewnelson.topl_core.util Package io.matthewnelson.topl_core.util \u00b6 Types \u00b6 Name Summary CoreConsts abstract class CoreConsts : BaseConsts FileUtilities object FileUtilities TorInstaller Extend this class and implement the need methods. abstract class TorInstaller : CoreConsts Utilities object Utilities WriteObserver Adapted from the Briar WriteObserver code class WriteObserver : FileObserver","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/#package-iomatthewnelsontopl_coreutil","text":"","title":"Package io.matthewnelson.topl_core.util"},{"location":"topl-core/io.matthewnelson.topl_core.util/#types","text":"Name Summary CoreConsts abstract class CoreConsts : BaseConsts FileUtilities object FileUtilities TorInstaller Extend this class and implement the need methods. abstract class TorInstaller : CoreConsts Utilities object Utilities WriteObserver Adapted from the Briar WriteObserver code class WriteObserver : FileObserver","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/","text":"topl-core / io.matthewnelson.topl_core.util / CoreConsts CoreConsts \u00b6 abstract class CoreConsts : BaseConsts (source) Constructors \u00b6 Name Summary <init> CoreConsts() Inheritors \u00b6 Name Summary BroadcastLogger This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. class BroadcastLogger : CoreConsts OnionProxyManager This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. class OnionProxyManager : CoreConsts TorInstaller Extend this class and implement the need methods. abstract class TorInstaller : CoreConsts TorSettingsBuilder Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. class TorSettingsBuilder : CoreConsts TorStateMachine Current State of Tor class TorStateMachine : CoreConsts","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/#coreconsts","text":"abstract class CoreConsts : BaseConsts (source)","title":"CoreConsts"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/#constructors","text":"Name Summary <init> CoreConsts()","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/#inheritors","text":"Name Summary BroadcastLogger This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. class BroadcastLogger : CoreConsts OnionProxyManager This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. class OnionProxyManager : CoreConsts TorInstaller Extend this class and implement the need methods. abstract class TorInstaller : CoreConsts TorSettingsBuilder Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. class TorSettingsBuilder : CoreConsts TorStateMachine Current State of Tor class TorStateMachine : CoreConsts","title":"Inheritors"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/-init-/","text":"topl-core / io.matthewnelson.topl_core.util / CoreConsts / <init> <init> \u00b6 CoreConsts()","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/-init-/#init","text":"CoreConsts()","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities FileUtilities \u00b6 object FileUtilities (source) Functions \u00b6 Name Summary cleanInstallOneFile Reads the input stream, deletes fileToWriteTo if it exists and over writes it with the stream. fun cleanInstallOneFile(readFrom: InputStream , fileToWriteTo: File ): Unit copy Closes both input and output streams when done. fun copy(in: InputStream , out: OutputStream ): Unit copyDoNotCloseInput Won\u2019t close the input stream when it\u2019s done, needed to handle ZipInputStreams fun copyDoNotCloseInput(in: InputStream , out: OutputStream ): Unit extractContentFromZip This has to exist somewhere! Why isn\u2019t it a part of the standard Java library? fun extractContentFromZip(destinationDirectory: File , zipFileInputStream: InputStream ): Unit listFilesToLog fun listFilesToLog(f: File ): Unit read fun read(f: File ): ByteArray recursiveFileDelete fun recursiveFileDelete(fileOrDirectory: File ): Unit setPerms Sets readable/executable for all users and writable by owner fun setPerms(file: File ): Unit setToReadOnlyPermissions fun setToReadOnlyPermissions(file: File ): Boolean","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/#fileutilities","text":"object FileUtilities (source)","title":"FileUtilities"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/#functions","text":"Name Summary cleanInstallOneFile Reads the input stream, deletes fileToWriteTo if it exists and over writes it with the stream. fun cleanInstallOneFile(readFrom: InputStream , fileToWriteTo: File ): Unit copy Closes both input and output streams when done. fun copy(in: InputStream , out: OutputStream ): Unit copyDoNotCloseInput Won\u2019t close the input stream when it\u2019s done, needed to handle ZipInputStreams fun copyDoNotCloseInput(in: InputStream , out: OutputStream ): Unit extractContentFromZip This has to exist somewhere! Why isn\u2019t it a part of the standard Java library? fun extractContentFromZip(destinationDirectory: File , zipFileInputStream: InputStream ): Unit listFilesToLog fun listFilesToLog(f: File ): Unit read fun read(f: File ): ByteArray recursiveFileDelete fun recursiveFileDelete(fileOrDirectory: File ): Unit setPerms Sets readable/executable for all users and writable by owner fun setPerms(file: File ): Unit setToReadOnlyPermissions fun setToReadOnlyPermissions(file: File ): Boolean","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/clean-install-one-file/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / cleanInstallOneFile cleanInstallOneFile \u00b6 fun cleanInstallOneFile(readFrom: InputStream , fileToWriteTo: File ): Unit (source) Reads the input stream, deletes fileToWriteTo if it exists and over writes it with the stream. Parameters \u00b6 readFrom - Stream to read from fileToWriteTo - File to write to Exceptions \u00b6 java.io.IOException - * If any of the file operations fail","title":"Clean install one file"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/clean-install-one-file/#cleaninstallonefile","text":"fun cleanInstallOneFile(readFrom: InputStream , fileToWriteTo: File ): Unit (source) Reads the input stream, deletes fileToWriteTo if it exists and over writes it with the stream.","title":"cleanInstallOneFile"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/clean-install-one-file/#parameters","text":"readFrom - Stream to read from fileToWriteTo - File to write to","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/clean-install-one-file/#exceptions","text":"java.io.IOException - * If any of the file operations fail","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy-do-not-close-input/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / copyDoNotCloseInput copyDoNotCloseInput \u00b6 fun copyDoNotCloseInput(in: InputStream , out: OutputStream ): Unit (source) Won\u2019t close the input stream when it\u2019s done, needed to handle ZipInputStreams Parameters \u00b6 in - Won\u2019t be closed out - Will be closed Exceptions \u00b6 java.io.IOException - If close on output fails","title":"Copy do not close input"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy-do-not-close-input/#copydonotcloseinput","text":"fun copyDoNotCloseInput(in: InputStream , out: OutputStream ): Unit (source) Won\u2019t close the input stream when it\u2019s done, needed to handle ZipInputStreams","title":"copyDoNotCloseInput"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy-do-not-close-input/#parameters","text":"in - Won\u2019t be closed out - Will be closed","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy-do-not-close-input/#exceptions","text":"java.io.IOException - If close on output fails","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / copy copy \u00b6 fun copy(in: InputStream , out: OutputStream ): Unit (source) Closes both input and output streams when done. Parameters \u00b6 in - Stream to read from out - Stream to write to Exceptions \u00b6 java.io.IOException - * If close on input or output fails","title":"Copy"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy/#copy","text":"fun copy(in: InputStream , out: OutputStream ): Unit (source) Closes both input and output streams when done.","title":"copy"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy/#parameters","text":"in - Stream to read from out - Stream to write to","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy/#exceptions","text":"java.io.IOException - * If close on input or output fails","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/extract-content-from-zip/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / extractContentFromZip extractContentFromZip \u00b6 fun extractContentFromZip(destinationDirectory: File , zipFileInputStream: InputStream ): Unit (source) This has to exist somewhere! Why isn\u2019t it a part of the standard Java library? Parameters \u00b6 destinationDirectory - Directory files are to be extracted to zipFileInputStream - Stream to unzip Exceptions \u00b6 java.io.IOException - * If there are any file errors","title":"Extract content from zip"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/extract-content-from-zip/#extractcontentfromzip","text":"fun extractContentFromZip(destinationDirectory: File , zipFileInputStream: InputStream ): Unit (source) This has to exist somewhere! Why isn\u2019t it a part of the standard Java library?","title":"extractContentFromZip"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/extract-content-from-zip/#parameters","text":"destinationDirectory - Directory files are to be extracted to zipFileInputStream - Stream to unzip","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/extract-content-from-zip/#exceptions","text":"java.io.IOException - * If there are any file errors","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/list-files-to-log/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / listFilesToLog listFilesToLog \u00b6 fun listFilesToLog(f: File ): Unit (source)","title":"List files to log"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/list-files-to-log/#listfilestolog","text":"fun listFilesToLog(f: File ): Unit (source)","title":"listFilesToLog"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/read/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / read read \u00b6 fun read(f: File ): ByteArray (source)","title":"Read"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/read/#read","text":"fun read(f: File ): ByteArray (source)","title":"read"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/recursive-file-delete/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / recursiveFileDelete recursiveFileDelete \u00b6 fun recursiveFileDelete(fileOrDirectory: File ): Unit (source)","title":"Recursive file delete"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/recursive-file-delete/#recursivefiledelete","text":"fun recursiveFileDelete(fileOrDirectory: File ): Unit (source)","title":"recursiveFileDelete"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-perms/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / setPerms setPerms \u00b6 fun setPerms(file: File ): Unit (source) Sets readable/executable for all users and writable by owner Parameters \u00b6 file - the file to set the permissions on","title":"Set perms"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-perms/#setperms","text":"fun setPerms(file: File ): Unit (source) Sets readable/executable for all users and writable by owner","title":"setPerms"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-perms/#parameters","text":"file - the file to set the permissions on","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-to-read-only-permissions/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / setToReadOnlyPermissions setToReadOnlyPermissions \u00b6 fun setToReadOnlyPermissions(file: File ): Boolean (source)","title":"Set to read only permissions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-to-read-only-permissions/#settoreadonlypermissions","text":"fun setToReadOnlyPermissions(file: File ): Boolean (source)","title":"setToReadOnlyPermissions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller TorInstaller \u00b6 abstract class TorInstaller : CoreConsts (source) Extend this class and implement the need methods. setup is called from io.matthewnelson.topl_core.OnionProxyManager.setup after instantiation, and openBridgesStream is called from io.matthewnelson.topl_core.settings.TorSettingsBuilder.addBridgesFromResources when configuring bridge support. Constructors \u00b6 Name Summary <init> Extend this class and implement the need methods. TorInstaller() Properties \u00b6 Name Summary broadcastLogger This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller . var broadcastLogger: BroadcastLogger ? Functions \u00b6 Name Summary getAssetOrResourceByName fun getAssetOrResourceByName(fileName: String ): InputStream ? openBridgesStream If first byte of stream is 0, then the following stream will have the form abstract fun openBridgesStream(): InputStream ? setup Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. abstract fun setup(): Unit updateTorConfigCustom abstract fun updateTorConfigCustom(content: String ?): Unit","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/#torinstaller","text":"abstract class TorInstaller : CoreConsts (source) Extend this class and implement the need methods. setup is called from io.matthewnelson.topl_core.OnionProxyManager.setup after instantiation, and openBridgesStream is called from io.matthewnelson.topl_core.settings.TorSettingsBuilder.addBridgesFromResources when configuring bridge support.","title":"TorInstaller"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/#constructors","text":"Name Summary <init> Extend this class and implement the need methods. TorInstaller()","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/#properties","text":"Name Summary broadcastLogger This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller . var broadcastLogger: BroadcastLogger ?","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/#functions","text":"Name Summary getAssetOrResourceByName fun getAssetOrResourceByName(fileName: String ): InputStream ? openBridgesStream If first byte of stream is 0, then the following stream will have the form abstract fun openBridgesStream(): InputStream ? setup Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. abstract fun setup(): Unit updateTorConfigCustom abstract fun updateTorConfigCustom(content: String ?): Unit","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/-init-/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / <init> <init> \u00b6 TorInstaller() Extend this class and implement the need methods. setup is called from io.matthewnelson.topl_core.OnionProxyManager.setup after instantiation, and openBridgesStream is called from io.matthewnelson.topl_core.settings.TorSettingsBuilder.addBridgesFromResources when configuring bridge support.","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/-init-/#init","text":"TorInstaller() Extend this class and implement the need methods. setup is called from io.matthewnelson.topl_core.OnionProxyManager.setup after instantiation, and openBridgesStream is called from io.matthewnelson.topl_core.settings.TorSettingsBuilder.addBridgesFromResources when configuring bridge support.","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/broadcast-logger/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / broadcastLogger broadcastLogger \u00b6 var broadcastLogger: BroadcastLogger ? (source) This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller .","title":"Broadcast logger"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/broadcast-logger/#broadcastlogger","text":"var broadcastLogger: BroadcastLogger ? (source) This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller .","title":"broadcastLogger"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/get-asset-or-resource-by-name/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / getAssetOrResourceByName getAssetOrResourceByName \u00b6 fun getAssetOrResourceByName(fileName: String ): InputStream ? (source)","title":"Get asset or resource by name"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/get-asset-or-resource-by-name/#getassetorresourcebyname","text":"fun getAssetOrResourceByName(fileName: String ): InputStream ? (source)","title":"getAssetOrResourceByName"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/open-bridges-stream/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / openBridgesStream openBridgesStream \u00b6 abstract fun openBridgesStream(): InputStream ? (source) If first byte of stream is 0, then the following stream will have the form ($bridge_type $bridge_info \\r\\n)* if first byte is 1, the the stream will have the form ($bridge_info \\r\\n)* The second form is used for custom bridges from the user. /* BridgesList is an overloaded field, which can cause some confusion. The list can be: 1) a filter like obfs4, meek, or snowflake OR 2) it can be a custom bridge For (1), we just pass back all bridges, the filter will occur elsewhere in the library. For (2) we return the bridge list as a raw stream. If length is greater than 9, then we know this is a custom bridge * */ // TODO: Completely refactor how bridges work. val userDefinedBridgeList : String = torServicePrefs . getList ( PrefKeyList . LIST_OF_SUPPORTED_BRIDGES , arrayListOf ()). joinToString () var bridgeType = ( if ( userDefinedBridgeList . length > 9 ) 1 else 0 ). toByte () // Terrible hack. Must keep in sync with topl::addBridgesFromResources. if ( bridgeType . toInt () == 0 ) { when ( userDefinedBridgeList ) { SupportedBridges . OBFS4 -> bridgeType = 2 SupportedBridges . MEEK -> bridgeType = 3 SupportedBridges . SNOWFLAKE -> bridgeType = 4 } } val bridgeTypeStream = ByteArrayInputStream ( byteArrayOf ( bridgeType )) val bridgeStream = if ( bridgeType . toInt () == 1 ) ByteArrayInputStream ( userDefinedBridgeList . toByteArray ()) else torService . resources . openRawResource ( R . raw . bridges ) return SequenceInputStream ( bridgeTypeStream , bridgeStream )","title":"Open bridges stream"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/open-bridges-stream/#openbridgesstream","text":"abstract fun openBridgesStream(): InputStream ? (source) If first byte of stream is 0, then the following stream will have the form ($bridge_type $bridge_info \\r\\n)* if first byte is 1, the the stream will have the form ($bridge_info \\r\\n)* The second form is used for custom bridges from the user. /* BridgesList is an overloaded field, which can cause some confusion. The list can be: 1) a filter like obfs4, meek, or snowflake OR 2) it can be a custom bridge For (1), we just pass back all bridges, the filter will occur elsewhere in the library. For (2) we return the bridge list as a raw stream. If length is greater than 9, then we know this is a custom bridge * */ // TODO: Completely refactor how bridges work. val userDefinedBridgeList : String = torServicePrefs . getList ( PrefKeyList . LIST_OF_SUPPORTED_BRIDGES , arrayListOf ()). joinToString () var bridgeType = ( if ( userDefinedBridgeList . length > 9 ) 1 else 0 ). toByte () // Terrible hack. Must keep in sync with topl::addBridgesFromResources. if ( bridgeType . toInt () == 0 ) { when ( userDefinedBridgeList ) { SupportedBridges . OBFS4 -> bridgeType = 2 SupportedBridges . MEEK -> bridgeType = 3 SupportedBridges . SNOWFLAKE -> bridgeType = 4 } } val bridgeTypeStream = ByteArrayInputStream ( byteArrayOf ( bridgeType )) val bridgeStream = if ( bridgeType . toInt () == 1 ) ByteArrayInputStream ( userDefinedBridgeList . toByteArray ()) else torService . resources . openRawResource ( R . raw . bridges ) return SequenceInputStream ( bridgeTypeStream , bridgeStream )","title":"openBridgesStream"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/setup/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / setup setup \u00b6 abstract fun setup(): Unit (source) Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. if (! torConfigFiles . geoIpFile . exists ()) { copyAsset ( geoIpAssetPath , torConfigFiles . geoIpFile ) geoIpFileCopied = \"\" } if (! torConfigFiles . geoIpv6File . exists ()) { copyAsset ( geoIp6AssetPath , torConfigFiles . geoIpv6File ) geoIpv6FileCopied = \"\" } // If the app version has been increased, or if this is a debug build, copy over // geoip assets then update SharedPreferences with the new version code. This // mitigates copying to be done only if a version upgrade is had. if ( buildConfigDebug || buildConfigVersionCode > localPrefs . getInt ( APP_VERSION_CODE , - 1 )) { if (! :: geoIpFileCopied . isInitialized ) { copyAsset ( geoIpAssetPath , torConfigFiles . geoIpFile ) } if (! :: geoIpv6FileCopied . isInitialized ) { copyAsset ( geoIp6AssetPath , torConfigFiles . geoIpv6File ) } localPrefs . edit (). putInt ( APP_VERSION_CODE , buildConfigVersionCode ). apply () } Return true if tor installation is successful, otherwise false.","title":"Setup"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/setup/#setup","text":"abstract fun setup(): Unit (source) Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. if (! torConfigFiles . geoIpFile . exists ()) { copyAsset ( geoIpAssetPath , torConfigFiles . geoIpFile ) geoIpFileCopied = \"\" } if (! torConfigFiles . geoIpv6File . exists ()) { copyAsset ( geoIp6AssetPath , torConfigFiles . geoIpv6File ) geoIpv6FileCopied = \"\" } // If the app version has been increased, or if this is a debug build, copy over // geoip assets then update SharedPreferences with the new version code. This // mitigates copying to be done only if a version upgrade is had. if ( buildConfigDebug || buildConfigVersionCode > localPrefs . getInt ( APP_VERSION_CODE , - 1 )) { if (! :: geoIpFileCopied . isInitialized ) { copyAsset ( geoIpAssetPath , torConfigFiles . geoIpFile ) } if (! :: geoIpv6FileCopied . isInitialized ) { copyAsset ( geoIp6AssetPath , torConfigFiles . geoIpv6File ) } localPrefs . edit (). putInt ( APP_VERSION_CODE , buildConfigVersionCode ). apply () } Return true if tor installation is successful, otherwise false.","title":"setup"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/update-tor-config-custom/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / updateTorConfigCustom updateTorConfigCustom \u00b6 abstract fun updateTorConfigCustom(content: String ?): Unit (source)","title":"Update tor config custom"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/update-tor-config-custom/#updatetorconfigcustom","text":"abstract fun updateTorConfigCustom(content: String ?): Unit (source)","title":"updateTorConfigCustom"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/","text":"topl-core / io.matthewnelson.topl_core.util / Utilities Utilities \u00b6 object Utilities (source) Functions \u00b6 Name Summary socks4aSocketConnection When making a request via the Tor Proxy one needs to establish the socket using SOCKS4a. However Android only supports SOCKS4 so this class provides a wrapper when getting a socket to handle things. fun socks4aSocketConnection(networkHost: String , networkPort: Int , socksHost: String , socksPort: Int ): Socket","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/#utilities","text":"object Utilities (source)","title":"Utilities"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/#functions","text":"Name Summary socks4aSocketConnection When making a request via the Tor Proxy one needs to establish the socket using SOCKS4a. However Android only supports SOCKS4 so this class provides a wrapper when getting a socket to handle things. fun socks4aSocketConnection(networkHost: String , networkPort: Int , socksHost: String , socksPort: Int ): Socket","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/socks4a-socket-connection/","text":"topl-core / io.matthewnelson.topl_core.util / Utilities / socks4aSocketConnection socks4aSocketConnection \u00b6 fun socks4aSocketConnection(networkHost: String , networkPort: Int , socksHost: String , socksPort: Int ): Socket (source) When making a request via the Tor Proxy one needs to establish the socket using SOCKS4a. However Android only supports SOCKS4 so this class provides a wrapper when getting a socket to handle things. Parameters \u00b6 networkHost - DNS or IP address of destination host networkPort - Port of destination host socksHost - DNS or IP address of local SOCKS4A Proxy (the Tor Onion Proxy) socksPort - Port of SOCKS4A Proxy (the Tor Onion Proxy) Exceptions \u00b6 IOException - Networking issues Return A socket set up to relay via socks to the local Tor Onion Proxy and via the Tor Network to the destination host.","title":"Socks4a socket connection"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/socks4a-socket-connection/#socks4asocketconnection","text":"fun socks4aSocketConnection(networkHost: String , networkPort: Int , socksHost: String , socksPort: Int ): Socket (source) When making a request via the Tor Proxy one needs to establish the socket using SOCKS4a. However Android only supports SOCKS4 so this class provides a wrapper when getting a socket to handle things.","title":"socks4aSocketConnection"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/socks4a-socket-connection/#parameters","text":"networkHost - DNS or IP address of destination host networkPort - Port of destination host socksHost - DNS or IP address of local SOCKS4A Proxy (the Tor Onion Proxy) socksPort - Port of SOCKS4A Proxy (the Tor Onion Proxy)","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/socks4a-socket-connection/#exceptions","text":"IOException - Networking issues Return A socket set up to relay via socks to the local Tor Onion Proxy and via the Tor Network to the destination host.","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/","text":"topl-core / io.matthewnelson.topl_core.util / WriteObserver WriteObserver \u00b6 class WriteObserver : FileObserver (source) Adapted from the Briar WriteObserver code Constructors \u00b6 Name Summary <init> Adapted from the Briar WriteObserver code WriteObserver(file: File ) Functions \u00b6 Name Summary onEvent fun onEvent(i: Int , s: String ?): Unit poll fun poll(timeout: Long , unit: TimeUnit ): Boolean","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/#writeobserver","text":"class WriteObserver : FileObserver (source) Adapted from the Briar WriteObserver code","title":"WriteObserver"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/#constructors","text":"Name Summary <init> Adapted from the Briar WriteObserver code WriteObserver(file: File )","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/#functions","text":"Name Summary onEvent fun onEvent(i: Int , s: String ?): Unit poll fun poll(timeout: Long , unit: TimeUnit ): Boolean","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/-init-/","text":"topl-core / io.matthewnelson.topl_core.util / WriteObserver / <init> <init> \u00b6 WriteObserver(file: File ) Adapted from the Briar WriteObserver code","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/-init-/#init","text":"WriteObserver(file: File ) Adapted from the Briar WriteObserver code","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/on-event/","text":"topl-core / io.matthewnelson.topl_core.util / WriteObserver / onEvent onEvent \u00b6 fun onEvent(i: Int , s: String ?): Unit (source)","title":"On event"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/on-event/#onevent","text":"fun onEvent(i: Int , s: String ?): Unit (source)","title":"onEvent"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/poll/","text":"topl-core / io.matthewnelson.topl_core.util / WriteObserver / poll poll \u00b6 fun poll(timeout: Long , unit: TimeUnit ): Boolean (source)","title":"Poll"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/poll/#poll","text":"fun poll(timeout: Long , unit: TimeUnit ): Boolean (source)","title":"poll"},{"location":"topl-core-base/","text":"topl-core-base Packages \u00b6 Name Summary io.matthewnelson.topl_core_base Index \u00b6 All Types","title":"Index"},{"location":"topl-core-base/#packages","text":"Name Summary io.matthewnelson.topl_core_base","title":"Packages"},{"location":"topl-core-base/#index","text":"All Types","title":"Index"},{"location":"topl-core-base/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.topl_core_base.BaseConsts \u00b6 | io.matthewnelson.topl_core_base.EventBroadcaster \u00b6 Service for sending event logs to the system. | io.matthewnelson.topl_core_base.TorConfigFiles \u00b6 Holds Tor configuration information for files and directories that Tor will use. | io.matthewnelson.topl_core_base.TorSettings \u00b6 This class is for defining default values for your torrc file. Extend this class and define your own settings.","title":"Index"},{"location":"topl-core-base/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"topl-core-base/alltypes/#iomatthewnelsontopl_core_basebaseconsts","text":"|","title":"io.matthewnelson.topl_core_base.BaseConsts"},{"location":"topl-core-base/alltypes/#iomatthewnelsontopl_core_baseeventbroadcaster","text":"Service for sending event logs to the system. |","title":"io.matthewnelson.topl_core_base.EventBroadcaster"},{"location":"topl-core-base/alltypes/#iomatthewnelsontopl_core_basetorconfigfiles","text":"Holds Tor configuration information for files and directories that Tor will use. |","title":"io.matthewnelson.topl_core_base.TorConfigFiles"},{"location":"topl-core-base/alltypes/#iomatthewnelsontopl_core_basetorsettings","text":"This class is for defining default values for your torrc file. Extend this class and define your own settings.","title":"io.matthewnelson.topl_core_base.TorSettings"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/","text":"topl-core-base / io.matthewnelson.topl_core_base Package io.matthewnelson.topl_core_base \u00b6 Types \u00b6 Name Summary BaseConsts abstract class BaseConsts EventBroadcaster Service for sending event logs to the system. abstract class EventBroadcaster : BaseConsts TorConfigFiles Holds Tor configuration information for files and directories that Tor will use. class TorConfigFiles : BaseConsts TorSettings This class is for defining default values for your torrc file. Extend this class and define your own settings. abstract class TorSettings : BaseConsts","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/#package-iomatthewnelsontopl_core_base","text":"","title":"Package io.matthewnelson.topl_core_base"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/#types","text":"Name Summary BaseConsts abstract class BaseConsts EventBroadcaster Service for sending event logs to the system. abstract class EventBroadcaster : BaseConsts TorConfigFiles Holds Tor configuration information for files and directories that Tor will use. class TorConfigFiles : BaseConsts TorSettings This class is for defining default values for your torrc file. Extend this class and define your own settings. abstract class TorSettings : BaseConsts","title":"Types"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts BaseConsts \u00b6 abstract class BaseConsts (source) Annotations \u00b6 Name Summary BroadcastType annotation class BroadcastType ConfigFileName annotation class ConfigFileName ConnectionPadding annotation class ConnectionPadding SupportedBridges annotation class SupportedBridges TorNetworkState annotation class TorNetworkState TorState annotation class TorState Constructors \u00b6 Name Summary <init> BaseConsts() Inheritors \u00b6 Name Summary EventBroadcaster Service for sending event logs to the system. abstract class EventBroadcaster : BaseConsts TorConfigFiles Holds Tor configuration information for files and directories that Tor will use. class TorConfigFiles : BaseConsts TorSettings This class is for defining default values for your torrc file. Extend this class and define your own settings. abstract class TorSettings : BaseConsts","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/#baseconsts","text":"abstract class BaseConsts (source)","title":"BaseConsts"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/#annotations","text":"Name Summary BroadcastType annotation class BroadcastType ConfigFileName annotation class ConfigFileName ConnectionPadding annotation class ConnectionPadding SupportedBridges annotation class SupportedBridges TorNetworkState annotation class TorNetworkState TorState annotation class TorState","title":"Annotations"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/#constructors","text":"Name Summary <init> BaseConsts()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/#inheritors","text":"Name Summary EventBroadcaster Service for sending event logs to the system. abstract class EventBroadcaster : BaseConsts TorConfigFiles Holds Tor configuration information for files and directories that Tor will use. class TorConfigFiles : BaseConsts TorSettings This class is for defining default values for your torrc file. Extend this class and define your own settings. abstract class TorSettings : BaseConsts","title":"Inheritors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / <init> <init> \u00b6 BaseConsts()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-init-/#init","text":"BaseConsts()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType BroadcastType \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class BroadcastType (source) Constructors \u00b6 Name Summary <init> BroadcastType() Companion Object Properties \u00b6 Name Summary DEBUG const val DEBUG: String ERROR const val ERROR: String EXCEPTION const val EXCEPTION: String NOTICE const val NOTICE: String WARN const val WARN: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/#broadcasttype","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class BroadcastType (source)","title":"BroadcastType"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/#constructors","text":"Name Summary <init> BroadcastType()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/#companion-object-properties","text":"Name Summary DEBUG const val DEBUG: String ERROR const val ERROR: String EXCEPTION const val EXCEPTION: String NOTICE const val NOTICE: String WARN const val WARN: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-d-e-b-u-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / DEBUG DEBUG \u00b6 const val DEBUG: String (source)","title":" d e b u g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-d-e-b-u-g/#debug","text":"const val DEBUG: String (source)","title":"DEBUG"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-e-r-r-o-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / ERROR ERROR \u00b6 const val ERROR: String (source)","title":" e r r o r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-e-r-r-o-r/#error","text":"const val ERROR: String (source)","title":"ERROR"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-e-x-c-e-p-t-i-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / EXCEPTION EXCEPTION \u00b6 const val EXCEPTION: String (source)","title":" e x c e p t i o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-e-x-c-e-p-t-i-o-n/#exception","text":"const val EXCEPTION: String (source)","title":"EXCEPTION"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / <init> <init> \u00b6 BroadcastType()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-init-/#init","text":"BroadcastType()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-n-o-t-i-c-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / NOTICE NOTICE \u00b6 const val NOTICE: String (source)","title":" n o t i c e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-n-o-t-i-c-e/#notice","text":"const val NOTICE: String (source)","title":"NOTICE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-w-a-r-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / WARN WARN \u00b6 const val WARN: String (source)","title":" w a r n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-w-a-r-n/#warn","text":"const val WARN: String (source)","title":"WARN"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName ConfigFileName \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER]) annotation class ConfigFileName (source) Constructors \u00b6 Name Summary <init> ConfigFileName() Companion Object Properties \u00b6 Name Summary CONTROL_PORT const val CONTROL_PORT: String COOKIE_AUTH const val COOKIE_AUTH: String DATA_DIR const val DATA_DIR: String GEO_IP const val GEO_IP: String GEO_IPV_6 const val GEO_IPV_6: String HIDDEN_SERVICE const val HIDDEN_SERVICE: String HOST const val HOST: String RESOLVE_CONF const val RESOLVE_CONF: String TOR_EXECUTABLE const val TOR_EXECUTABLE: String TORRC const val TORRC: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/#configfilename","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER]) annotation class ConfigFileName (source)","title":"ConfigFileName"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/#constructors","text":"Name Summary <init> ConfigFileName()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/#companion-object-properties","text":"Name Summary CONTROL_PORT const val CONTROL_PORT: String COOKIE_AUTH const val COOKIE_AUTH: String DATA_DIR const val DATA_DIR: String GEO_IP const val GEO_IP: String GEO_IPV_6 const val GEO_IPV_6: String HIDDEN_SERVICE const val HIDDEN_SERVICE: String HOST const val HOST: String RESOLVE_CONF const val RESOLVE_CONF: String TOR_EXECUTABLE const val TOR_EXECUTABLE: String TORRC const val TORRC: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-c-o-n-t-r-o-l_-p-o-r-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / CONTROL_PORT CONTROL_PORT \u00b6 const val CONTROL_PORT: String (source)","title":" c o n t r o l  p o r t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-c-o-n-t-r-o-l_-p-o-r-t/#control_port","text":"const val CONTROL_PORT: String (source)","title":"CONTROL_PORT"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-c-o-o-k-i-e_-a-u-t-h/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / COOKIE_AUTH COOKIE_AUTH \u00b6 const val COOKIE_AUTH: String (source)","title":" c o o k i e  a u t h"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-c-o-o-k-i-e_-a-u-t-h/#cookie_auth","text":"const val COOKIE_AUTH: String (source)","title":"COOKIE_AUTH"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-d-a-t-a_-d-i-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / DATA_DIR DATA_DIR \u00b6 const val DATA_DIR: String (source)","title":" d a t a  d i r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-d-a-t-a_-d-i-r/#data_dir","text":"const val DATA_DIR: String (source)","title":"DATA_DIR"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-g-e-o_-i-p-v_6/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / GEO_IPV_6 GEO_IPV_6 \u00b6 const val GEO_IPV_6: String (source)","title":" g e o  i p v 6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-g-e-o_-i-p-v_6/#geo_ipv_6","text":"const val GEO_IPV_6: String (source)","title":"GEO_IPV_6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-g-e-o_-i-p/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / GEO_IP GEO_IP \u00b6 const val GEO_IP: String (source)","title":" g e o  i p"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-g-e-o_-i-p/#geo_ip","text":"const val GEO_IP: String (source)","title":"GEO_IP"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-h-i-d-d-e-n_-s-e-r-v-i-c-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / HIDDEN_SERVICE HIDDEN_SERVICE \u00b6 const val HIDDEN_SERVICE: String (source)","title":" h i d d e n  s e r v i c e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-h-i-d-d-e-n_-s-e-r-v-i-c-e/#hidden_service","text":"const val HIDDEN_SERVICE: String (source)","title":"HIDDEN_SERVICE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-h-o-s-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / HOST HOST \u00b6 const val HOST: String (source)","title":" h o s t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-h-o-s-t/#host","text":"const val HOST: String (source)","title":"HOST"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / <init> <init> \u00b6 ConfigFileName()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-init-/#init","text":"ConfigFileName()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-r-e-s-o-l-v-e_-c-o-n-f/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / RESOLVE_CONF RESOLVE_CONF \u00b6 const val RESOLVE_CONF: String (source)","title":" r e s o l v e  c o n f"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-r-e-s-o-l-v-e_-c-o-n-f/#resolve_conf","text":"const val RESOLVE_CONF: String (source)","title":"RESOLVE_CONF"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-t-o-r-r-c/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / TORRC TORRC \u00b6 const val TORRC: String (source)","title":" t o r r c"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-t-o-r-r-c/#torrc","text":"const val TORRC: String (source)","title":"TORRC"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-t-o-r_-e-x-e-c-u-t-a-b-l-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / TOR_EXECUTABLE TOR_EXECUTABLE \u00b6 const val TOR_EXECUTABLE: String (source)","title":" t o r  e x e c u t a b l e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-t-o-r_-e-x-e-c-u-t-a-b-l-e/#tor_executable","text":"const val TOR_EXECUTABLE: String (source)","title":"TOR_EXECUTABLE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding ConnectionPadding \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER]) annotation class ConnectionPadding (source) Constructors \u00b6 Name Summary <init> ConnectionPadding() Companion Object Properties \u00b6 Name Summary AUTO const val AUTO: String OFF const val OFF: String ON const val ON: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/#connectionpadding","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER]) annotation class ConnectionPadding (source)","title":"ConnectionPadding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/#constructors","text":"Name Summary <init> ConnectionPadding()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/#companion-object-properties","text":"Name Summary AUTO const val AUTO: String OFF const val OFF: String ON const val ON: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-a-u-t-o/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / AUTO AUTO \u00b6 const val AUTO: String (source)","title":" a u t o"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-a-u-t-o/#auto","text":"const val AUTO: String (source)","title":"AUTO"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / <init> <init> \u00b6 ConnectionPadding()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-init-/#init","text":"ConnectionPadding()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-o-f-f/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / OFF OFF \u00b6 const val OFF: String (source)","title":" o f f"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-o-f-f/#off","text":"const val OFF: String (source)","title":"OFF"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / ON ON \u00b6 const val ON: String (source)","title":" o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-o-n/#on","text":"const val ON: String (source)","title":"ON"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridges SupportedBridges \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE]) annotation class SupportedBridges (source) Constructors \u00b6 Name Summary <init> SupportedBridges() Companion Object Properties \u00b6 Name Summary MEEK const val MEEK: String OBFS4 const val OBFS4: String SNOWFLAKE const val SNOWFLAKE: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/#supportedbridges","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE]) annotation class SupportedBridges (source)","title":"SupportedBridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/#constructors","text":"Name Summary <init> SupportedBridges()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/#companion-object-properties","text":"Name Summary MEEK const val MEEK: String OBFS4 const val OBFS4: String SNOWFLAKE const val SNOWFLAKE: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridges / <init> <init> \u00b6 SupportedBridges()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/-init-/#init","text":"SupportedBridges()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/-m-e-e-k/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridges / MEEK MEEK \u00b6 const val MEEK: String (source)","title":" m e e k"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/-m-e-e-k/#meek","text":"const val MEEK: String (source)","title":"MEEK"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/-o-b-f-s4/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridges / OBFS4 OBFS4 \u00b6 const val OBFS4: String (source)","title":" o b f s4"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/-o-b-f-s4/#obfs4","text":"const val OBFS4: String (source)","title":"OBFS4"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/-s-n-o-w-f-l-a-k-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridges / SNOWFLAKE SNOWFLAKE \u00b6 const val SNOWFLAKE: String (source)","title":" s n o w f l a k e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridges/-s-n-o-w-f-l-a-k-e/#snowflake","text":"const val SNOWFLAKE: String (source)","title":"SNOWFLAKE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorNetworkState TorNetworkState \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class TorNetworkState (source) Constructors \u00b6 Name Summary <init> TorNetworkState() Companion Object Properties \u00b6 Name Summary DISABLED const val DISABLED: String ENABLED const val ENABLED: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/#tornetworkstate","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class TorNetworkState (source)","title":"TorNetworkState"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/#constructors","text":"Name Summary <init> TorNetworkState()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/#companion-object-properties","text":"Name Summary DISABLED const val DISABLED: String ENABLED const val ENABLED: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-d-i-s-a-b-l-e-d/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorNetworkState / DISABLED DISABLED \u00b6 const val DISABLED: String (source)","title":" d i s a b l e d"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-d-i-s-a-b-l-e-d/#disabled","text":"const val DISABLED: String (source)","title":"DISABLED"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-e-n-a-b-l-e-d/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorNetworkState / ENABLED ENABLED \u00b6 const val ENABLED: String (source)","title":" e n a b l e d"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-e-n-a-b-l-e-d/#enabled","text":"const val ENABLED: String (source)","title":"ENABLED"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorNetworkState / <init> <init> \u00b6 TorNetworkState()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-init-/#init","text":"TorNetworkState()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState TorState \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class TorState (source) Constructors \u00b6 Name Summary <init> TorState() Companion Object Properties \u00b6 Name Summary OFF const val OFF: String ON const val ON: String STARTING const val STARTING: String STOPPING const val STOPPING: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/#torstate","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class TorState (source)","title":"TorState"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/#constructors","text":"Name Summary <init> TorState()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/#companion-object-properties","text":"Name Summary OFF const val OFF: String ON const val ON: String STARTING const val STARTING: String STOPPING const val STOPPING: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / <init> <init> \u00b6 TorState()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-init-/#init","text":"TorState()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-o-f-f/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / OFF OFF \u00b6 const val OFF: String (source)","title":" o f f"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-o-f-f/#off","text":"const val OFF: String (source)","title":"OFF"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / ON ON \u00b6 const val ON: String (source)","title":" o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-o-n/#on","text":"const val ON: String (source)","title":"ON"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-s-t-a-r-t-i-n-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / STARTING STARTING \u00b6 const val STARTING: String (source)","title":" s t a r t i n g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-s-t-a-r-t-i-n-g/#starting","text":"const val STARTING: String (source)","title":"STARTING"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-s-t-o-p-p-i-n-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / STOPPING STOPPING \u00b6 const val STOPPING: String (source)","title":" s t o p p i n g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-s-t-o-p-p-i-n-g/#stopping","text":"const val STOPPING: String (source)","title":"STOPPING"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster EventBroadcaster \u00b6 abstract class EventBroadcaster : BaseConsts (source) Service for sending event logs to the system. Both topl-core and topl-service utilize this class to broadcast messages. This allows for easier separation of messages based on the type, process or class. See BaseConsts.BroadcastType s Constructors \u00b6 Name Summary <init> Service for sending event logs to the system. EventBroadcaster() Functions \u00b6 Name Summary broadcastBandwidth bytesRead = bytes downloaded bytesWritten = bytes uploaded abstract fun broadcastBandwidth(bytesRead: String , bytesWritten: String ): Unit broadcastDebug (\u201cDEBUG broadcastException (\u201cEXCEPTION broadcastLogMessage Not yet implemented in either module. abstract fun broadcastLogMessage(logMessage: String ?): Unit broadcastNotice Will be one of: abstract fun broadcastNotice(msg: String ): Unit broadcastTorState See BaseConsts.TorState and BaseConsts.TorNetworkState abstract fun broadcastTorState(state: String , networkState: String ): Unit","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/#eventbroadcaster","text":"abstract class EventBroadcaster : BaseConsts (source) Service for sending event logs to the system. Both topl-core and topl-service utilize this class to broadcast messages. This allows for easier separation of messages based on the type, process or class. See BaseConsts.BroadcastType s","title":"EventBroadcaster"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/#constructors","text":"Name Summary <init> Service for sending event logs to the system. EventBroadcaster()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/#functions","text":"Name Summary broadcastBandwidth bytesRead = bytes downloaded bytesWritten = bytes uploaded abstract fun broadcastBandwidth(bytesRead: String , bytesWritten: String ): Unit broadcastDebug (\u201cDEBUG broadcastException (\u201cEXCEPTION broadcastLogMessage Not yet implemented in either module. abstract fun broadcastLogMessage(logMessage: String ?): Unit broadcastNotice Will be one of: abstract fun broadcastNotice(msg: String ): Unit broadcastTorState See BaseConsts.TorState and BaseConsts.TorNetworkState abstract fun broadcastTorState(state: String , networkState: String ): Unit","title":"Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / <init> <init> \u00b6 EventBroadcaster() Service for sending event logs to the system. Both topl-core and topl-service utilize this class to broadcast messages. This allows for easier separation of messages based on the type, process or class. See BaseConsts.BroadcastType s","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/-init-/#init","text":"EventBroadcaster() Service for sending event logs to the system. Both topl-core and topl-service utilize this class to broadcast messages. This allows for easier separation of messages based on the type, process or class. See BaseConsts.BroadcastType s","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-bandwidth/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastBandwidth broadcastBandwidth \u00b6 abstract fun broadcastBandwidth(bytesRead: String , bytesWritten: String ): Unit (source) bytesRead = bytes downloaded bytesWritten = bytes uploaded","title":"Broadcast bandwidth"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-bandwidth/#broadcastbandwidth","text":"abstract fun broadcastBandwidth(bytesRead: String , bytesWritten: String ): Unit (source) bytesRead = bytes downloaded bytesWritten = bytes uploaded","title":"broadcastBandwidth"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-debug/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastDebug broadcastDebug \u00b6 abstract fun broadcastDebug(msg: String ): Unit (source) (\u201cDEBUG|ClassName|msg\u201d)","title":"Broadcast debug"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-debug/#broadcastdebug","text":"abstract fun broadcastDebug(msg: String ): Unit (source) (\u201cDEBUG|ClassName|msg\u201d)","title":"broadcastDebug"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-exception/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastException broadcastException \u00b6 abstract fun broadcastException(msg: String ?, e: Exception ): Unit (source) (\u201cEXCEPTION|ClassName|msg\u201d, e)","title":"Broadcast exception"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-exception/#broadcastexception","text":"abstract fun broadcastException(msg: String ?, e: Exception ): Unit (source) (\u201cEXCEPTION|ClassName|msg\u201d, e)","title":"broadcastException"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-log-message/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastLogMessage broadcastLogMessage \u00b6 abstract fun broadcastLogMessage(logMessage: String ?): Unit (source) Not yet implemented in either module.","title":"Broadcast log message"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-log-message/#broadcastlogmessage","text":"abstract fun broadcastLogMessage(logMessage: String ?): Unit (source) Not yet implemented in either module.","title":"broadcastLogMessage"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-notice/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastNotice broadcastNotice \u00b6 abstract fun broadcastNotice(msg: String ): Unit (source) Will be one of: (\u201cERROR|ClassName|msg\u201d) (\u201cNOTICE|ClassName|msg\u201d) (\u201cWARN|ClassName|msg\u201d)","title":"Broadcast notice"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-notice/#broadcastnotice","text":"abstract fun broadcastNotice(msg: String ): Unit (source) Will be one of: (\u201cERROR|ClassName|msg\u201d) (\u201cNOTICE|ClassName|msg\u201d) (\u201cWARN|ClassName|msg\u201d)","title":"broadcastNotice"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-tor-state/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastTorState broadcastTorState \u00b6 abstract fun broadcastTorState(state: String , networkState: String ): Unit (source) See BaseConsts.TorState and BaseConsts.TorNetworkState","title":"Broadcast tor state"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-tor-state/#broadcasttorstate","text":"abstract fun broadcastTorState(state: String , networkState: String ): Unit (source) See BaseConsts.TorState and BaseConsts.TorNetworkState","title":"broadcastTorState"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles TorConfigFiles \u00b6 class TorConfigFiles : BaseConsts (source) Holds Tor configuration information for files and directories that Tor will use. See Companion.createConfig or Builder to instantiate. Types \u00b6 Name Summary Builder Builder for TorConfig. class Builder Properties \u00b6 Name Summary configDir val configDir: File controlPortFile val controlPortFile: File cookieAuthFile Used for cookie authentication with the controller. Location can be overridden by the CookieAuthFile config option. Regenerated on startup. See control-spec.txt in torspec for details. val cookieAuthFile: File dataDir val dataDir: File fileCreationTimeout When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. val fileCreationTimeout: Int geoIpFile val geoIpFile: File geoIpv6File val geoIpv6File: File hiddenServiceDir val hiddenServiceDir: File hostnameFile The <base32-encoded-fingerprint>.onion domain name for this hidden service. If the hidden service is restricted to authorized clients only, this file also contains authorization data for all clients. val hostnameFile: File installDir val installDir: File libraryPath val libraryPath: File ? resolveConf val resolveConf: File torExecutableFile val torExecutableFile: File torrcFile var torrcFile: File Functions \u00b6 Name Summary resolveTorrcFile Resolves the tor configuration file. If the torrc file hasn\u2019t been set, then this method will attempt to resolve the config file by looking in the root of the $configDir and then in $user.home directory fun resolveTorrcFile(): File toString fun toString(): String Companion Object Functions \u00b6 Name Summary createConfig Convenience method for if you\u2019re including in your App\u2019s jniLibs directory the libTor.so binary, or utilizing those maintained by this project. fun createConfig(context: Context , configDir: File , dataDir: File ? = null): TorConfigFiles Convenience method for setting up all of your files and directories in their default locations. fun createConfig(context: Context ): TorConfigFiles","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#torconfigfiles","text":"class TorConfigFiles : BaseConsts (source) Holds Tor configuration information for files and directories that Tor will use. See Companion.createConfig or Builder to instantiate.","title":"TorConfigFiles"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#types","text":"Name Summary Builder Builder for TorConfig. class Builder","title":"Types"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#properties","text":"Name Summary configDir val configDir: File controlPortFile val controlPortFile: File cookieAuthFile Used for cookie authentication with the controller. Location can be overridden by the CookieAuthFile config option. Regenerated on startup. See control-spec.txt in torspec for details. val cookieAuthFile: File dataDir val dataDir: File fileCreationTimeout When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. val fileCreationTimeout: Int geoIpFile val geoIpFile: File geoIpv6File val geoIpv6File: File hiddenServiceDir val hiddenServiceDir: File hostnameFile The <base32-encoded-fingerprint>.onion domain name for this hidden service. If the hidden service is restricted to authorized clients only, this file also contains authorization data for all clients. val hostnameFile: File installDir val installDir: File libraryPath val libraryPath: File ? resolveConf val resolveConf: File torExecutableFile val torExecutableFile: File torrcFile var torrcFile: File","title":"Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#functions","text":"Name Summary resolveTorrcFile Resolves the tor configuration file. If the torrc file hasn\u2019t been set, then this method will attempt to resolve the config file by looking in the root of the $configDir and then in $user.home directory fun resolveTorrcFile(): File toString fun toString(): String","title":"Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#companion-object-functions","text":"Name Summary createConfig Convenience method for if you\u2019re including in your App\u2019s jniLibs directory the libTor.so binary, or utilizing those maintained by this project. fun createConfig(context: Context , configDir: File , dataDir: File ? = null): TorConfigFiles Convenience method for setting up all of your files and directories in their default locations. fun createConfig(context: Context ): TorConfigFiles","title":"Companion Object Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/config-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / configDir configDir \u00b6 val configDir: File (source)","title":"Config dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/config-dir/#configdir","text":"val configDir: File (source)","title":"configDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/control-port-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / controlPortFile controlPortFile \u00b6 val controlPortFile: File (source)","title":"Control port file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/control-port-file/#controlportfile","text":"val controlPortFile: File (source)","title":"controlPortFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/cookie-auth-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / cookieAuthFile cookieAuthFile \u00b6 val cookieAuthFile: File (source) Used for cookie authentication with the controller. Location can be overridden by the CookieAuthFile config option. Regenerated on startup. See control-spec.txt in torspec for details. Only used when cookie authentication is enabled. Return cookieAuthFile","title":"Cookie auth file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/cookie-auth-file/#cookieauthfile","text":"val cookieAuthFile: File (source) Used for cookie authentication with the controller. Location can be overridden by the CookieAuthFile config option. Regenerated on startup. See control-spec.txt in torspec for details. Only used when cookie authentication is enabled. Return cookieAuthFile","title":"cookieAuthFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/create-config/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / createConfig createConfig \u00b6 fun createConfig(context: Context , configDir: File , dataDir: File ? = null): TorConfigFiles (source) Convenience method for if you\u2019re including in your App\u2019s jniLibs directory the libTor.so binary, or utilizing those maintained by this project. Parameters \u00b6 context - Context configDir - context.getDir(\u201cdir_name_here\u201d, Context.MODE_PRIVATE) dataDir - if you wish it in a different location than lib/tor fun createConfig(context: Context ): TorConfigFiles (source) Convenience method for setting up all of your files and directories in their default locations. Parameters \u00b6 context - Context","title":"Create config"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/create-config/#createconfig","text":"fun createConfig(context: Context , configDir: File , dataDir: File ? = null): TorConfigFiles (source) Convenience method for if you\u2019re including in your App\u2019s jniLibs directory the libTor.so binary, or utilizing those maintained by this project.","title":"createConfig"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/create-config/#parameters","text":"context - Context configDir - context.getDir(\u201cdir_name_here\u201d, Context.MODE_PRIVATE) dataDir - if you wish it in a different location than lib/tor fun createConfig(context: Context ): TorConfigFiles (source) Convenience method for setting up all of your files and directories in their default locations.","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/create-config/#parameters_1","text":"context - Context","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/data-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / dataDir dataDir \u00b6 val dataDir: File (source)","title":"Data dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/data-dir/#datadir","text":"val dataDir: File (source)","title":"dataDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/file-creation-timeout/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / fileCreationTimeout fileCreationTimeout \u00b6 val fileCreationTimeout: Int (source) When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. This method returns how much time to wait in seconds until failing the startup.","title":"File creation timeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/file-creation-timeout/#filecreationtimeout","text":"val fileCreationTimeout: Int (source) When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. This method returns how much time to wait in seconds until failing the startup.","title":"fileCreationTimeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ip-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / geoIpFile geoIpFile \u00b6 val geoIpFile: File (source)","title":"Geo ip file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ip-file/#geoipfile","text":"val geoIpFile: File (source)","title":"geoIpFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ipv6-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / geoIpv6File geoIpv6File \u00b6 val geoIpv6File: File (source)","title":"Geo ipv6 file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ipv6-file/#geoipv6file","text":"val geoIpv6File: File (source)","title":"geoIpv6File"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hidden-service-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / hiddenServiceDir hiddenServiceDir \u00b6 val hiddenServiceDir: File (source)","title":"Hidden service dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hidden-service-dir/#hiddenservicedir","text":"val hiddenServiceDir: File (source)","title":"hiddenServiceDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hostname-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / hostnameFile hostnameFile \u00b6 val hostnameFile: File (source) The <base32-encoded-fingerprint>.onion domain name for this hidden service. If the hidden service is restricted to authorized clients only, this file also contains authorization data for all clients. Return hostnameFile </base32-encoded-fingerprint>","title":"Hostname file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hostname-file/#hostnamefile","text":"val hostnameFile: File (source) The <base32-encoded-fingerprint>.onion domain name for this hidden service. If the hidden service is restricted to authorized clients only, this file also contains authorization data for all clients. Return hostnameFile </base32-encoded-fingerprint>","title":"hostnameFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/install-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / installDir installDir \u00b6 val installDir: File (source)","title":"Install dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/install-dir/#installdir","text":"val installDir: File (source)","title":"installDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/library-path/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / libraryPath libraryPath \u00b6 val libraryPath: File ? (source)","title":"Library path"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/library-path/#librarypath","text":"val libraryPath: File ? (source)","title":"libraryPath"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-conf/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / resolveConf resolveConf \u00b6 val resolveConf: File (source)","title":"Resolve conf"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-conf/#resolveconf","text":"val resolveConf: File (source)","title":"resolveConf"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-torrc-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / resolveTorrcFile resolveTorrcFile \u00b6 fun resolveTorrcFile(): File (source) Resolves the tor configuration file. If the torrc file hasn\u2019t been set, then this method will attempt to resolve the config file by looking in the root of the $configDir and then in $user.home directory Exceptions \u00b6 IOException - If torrc file is not resolved. SecurityException - Unauthorized access to file/directory. Return torrcFile","title":"Resolve torrc file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-torrc-file/#resolvetorrcfile","text":"fun resolveTorrcFile(): File (source) Resolves the tor configuration file. If the torrc file hasn\u2019t been set, then this method will attempt to resolve the config file by looking in the root of the $configDir and then in $user.home directory","title":"resolveTorrcFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-torrc-file/#exceptions","text":"IOException - If torrc file is not resolved. SecurityException - Unauthorized access to file/directory. Return torrcFile","title":"Exceptions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/to-string/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / toString toString \u00b6 fun toString(): String (source)","title":"To string"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/to-string/#tostring","text":"fun toString(): String (source)","title":"toString"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/tor-executable-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / torExecutableFile torExecutableFile \u00b6 val torExecutableFile: File (source)","title":"Tor executable file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/tor-executable-file/#torexecutablefile","text":"val torExecutableFile: File (source)","title":"torExecutableFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/torrc-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / torrcFile torrcFile \u00b6 var torrcFile: File (source)","title":"Torrc file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/torrc-file/#torrcfile","text":"var torrcFile: File (source)","title":"torrcFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder Builder \u00b6 class Builder (source) Builder for TorConfig. See also Companion.createConfig for convenience methods. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your project's src/main/jniLibs directory. If you are getting your // executable files via a dependency, be sure to consult that Libraries documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // } Parameters \u00b6 installDir - directory where the tor binaries are installed. configDir - directory where the filesystem will be setup for tor. Constructors \u00b6 Name Summary <init> Builder for TorConfig. Builder(installDir: File , configDir: File ) Functions \u00b6 Name Summary build Builds torConfig and sets default values if not explicitly configured through builder. fun build(): TorConfigFiles cookieAuthFile fun cookieAuthFile(file: File ): Builder dataDir Store working data in DIR. Can not be changed while tor is running. fun dataDir(directory: File ): Builder fileCreationTimeout When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. fun fileCreationTimeout(timeoutSeconds: Int ): Builder geoip A filename containing IPv4 GeoIP data, for use with by-country statistics. fun geoip(file: File ): Builder geoipv6 A filename containing IPv6 GeoIP data, for use with by-country statistics. fun geoipv6(file: File ): Builder hiddenServiceDir Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate directory. You may use this option multiple times to specify multiple services. If DIRECTORY does not exist, Tor will create it. (Note: in current versions of Tor, if DIRECTORY is a relative path, it will be relative to the current working directory of Tor instance, not to its DataDirectory. Do not rely on this behavior; it is not guaranteed to remain the same in future versions.) fun hiddenServiceDir(directory: File ): Builder hostnameFile fun hostnameFile(file: File ): Builder libraryPath fun libraryPath(directory: File ): Builder resolveConf fun resolveConf(resolveConf: File ): Builder torExecutable fun torExecutable(file: File ): Builder torrc The configuration file, which contains \u201coption value\u201d pairs. fun torrc(file: File ): Builder","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/#builder","text":"class Builder (source) Builder for TorConfig. See also Companion.createConfig for convenience methods. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your project's src/main/jniLibs directory. If you are getting your // executable files via a dependency, be sure to consult that Libraries documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // }","title":"Builder"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/#parameters","text":"installDir - directory where the tor binaries are installed. configDir - directory where the filesystem will be setup for tor.","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/#constructors","text":"Name Summary <init> Builder for TorConfig. Builder(installDir: File , configDir: File )","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/#functions","text":"Name Summary build Builds torConfig and sets default values if not explicitly configured through builder. fun build(): TorConfigFiles cookieAuthFile fun cookieAuthFile(file: File ): Builder dataDir Store working data in DIR. Can not be changed while tor is running. fun dataDir(directory: File ): Builder fileCreationTimeout When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. fun fileCreationTimeout(timeoutSeconds: Int ): Builder geoip A filename containing IPv4 GeoIP data, for use with by-country statistics. fun geoip(file: File ): Builder geoipv6 A filename containing IPv6 GeoIP data, for use with by-country statistics. fun geoipv6(file: File ): Builder hiddenServiceDir Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate directory. You may use this option multiple times to specify multiple services. If DIRECTORY does not exist, Tor will create it. (Note: in current versions of Tor, if DIRECTORY is a relative path, it will be relative to the current working directory of Tor instance, not to its DataDirectory. Do not rely on this behavior; it is not guaranteed to remain the same in future versions.) fun hiddenServiceDir(directory: File ): Builder hostnameFile fun hostnameFile(file: File ): Builder libraryPath fun libraryPath(directory: File ): Builder resolveConf fun resolveConf(resolveConf: File ): Builder torExecutable fun torExecutable(file: File ): Builder torrc The configuration file, which contains \u201coption value\u201d pairs. fun torrc(file: File ): Builder","title":"Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / <init> <init> \u00b6 Builder(installDir: File , configDir: File ) Builder for TorConfig. See also Companion.createConfig for convenience methods. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your project's src/main/jniLibs directory. If you are getting your // executable files via a dependency, be sure to consult that Libraries documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // } Parameters \u00b6 installDir - directory where the tor binaries are installed. configDir - directory where the filesystem will be setup for tor.","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/-init-/#init","text":"Builder(installDir: File , configDir: File ) Builder for TorConfig. See also Companion.createConfig for convenience methods. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your project's src/main/jniLibs directory. If you are getting your // executable files via a dependency, be sure to consult that Libraries documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // }","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/-init-/#parameters","text":"installDir - directory where the tor binaries are installed. configDir - directory where the filesystem will be setup for tor.","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/build/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / build build \u00b6 fun build(): TorConfigFiles (source) Builds torConfig and sets default values if not explicitly configured through builder. Return TorConfigFiles","title":"Build"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/build/#build","text":"fun build(): TorConfigFiles (source) Builds torConfig and sets default values if not explicitly configured through builder. Return TorConfigFiles","title":"build"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/cookie-auth-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / cookieAuthFile cookieAuthFile \u00b6 fun cookieAuthFile(file: File ): Builder (source)","title":"Cookie auth file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/cookie-auth-file/#cookieauthfile","text":"fun cookieAuthFile(file: File ): Builder (source)","title":"cookieAuthFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/data-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / dataDir dataDir \u00b6 fun dataDir(directory: File ): Builder (source) Store working data in DIR. Can not be changed while tor is running. Default value: $configDir/lib/tor Parameters \u00b6 directory - directory where tor runtime data is stored Return Builder","title":"Data dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/data-dir/#datadir","text":"fun dataDir(directory: File ): Builder (source) Store working data in DIR. Can not be changed while tor is running. Default value: $configDir/lib/tor","title":"dataDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/data-dir/#parameters","text":"directory - directory where tor runtime data is stored Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/file-creation-timeout/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / fileCreationTimeout fileCreationTimeout \u00b6 fun fileCreationTimeout(timeoutSeconds: Int ): Builder (source) When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. This method specifies how much time to wait until failing the startup. Default value is 15 seconds Parameters \u00b6 timeoutSeconds - Int Return Builder","title":"File creation timeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/file-creation-timeout/#filecreationtimeout","text":"fun fileCreationTimeout(timeoutSeconds: Int ): Builder (source) When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. This method specifies how much time to wait until failing the startup. Default value is 15 seconds","title":"fileCreationTimeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/file-creation-timeout/#parameters","text":"timeoutSeconds - Int Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoip/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / geoip geoip \u00b6 fun geoip(file: File ): Builder (source) A filename containing IPv4 GeoIP data, for use with by-country statistics. Default value: $configDir/geoip Parameters \u00b6 file - geoip file Return Builder","title":"Geoip"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoip/#geoip","text":"fun geoip(file: File ): Builder (source) A filename containing IPv4 GeoIP data, for use with by-country statistics. Default value: $configDir/geoip","title":"geoip"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoip/#parameters","text":"file - geoip file Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoipv6/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / geoipv6 geoipv6 \u00b6 fun geoipv6(file: File ): Builder (source) A filename containing IPv6 GeoIP data, for use with by-country statistics. Default value: $configDir/geoip6 Parameters \u00b6 file - geoip6 file Return Builder","title":"Geoipv6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoipv6/#geoipv6","text":"fun geoipv6(file: File ): Builder (source) A filename containing IPv6 GeoIP data, for use with by-country statistics. Default value: $configDir/geoip6","title":"geoipv6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoipv6/#parameters","text":"file - geoip6 file Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hidden-service-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / hiddenServiceDir hiddenServiceDir \u00b6 fun hiddenServiceDir(directory: File ): Builder (source) Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate directory. You may use this option multiple times to specify multiple services. If DIRECTORY does not exist, Tor will create it. (Note: in current versions of Tor, if DIRECTORY is a relative path, it will be relative to the current working directory of Tor instance, not to its DataDirectory. Do not rely on this behavior; it is not guaranteed to remain the same in future versions.) Default value: $configDir/hiddenservices Parameters \u00b6 directory - hidden services directory Return Builder","title":"Hidden service dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hidden-service-dir/#hiddenservicedir","text":"fun hiddenServiceDir(directory: File ): Builder (source) Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate directory. You may use this option multiple times to specify multiple services. If DIRECTORY does not exist, Tor will create it. (Note: in current versions of Tor, if DIRECTORY is a relative path, it will be relative to the current working directory of Tor instance, not to its DataDirectory. Do not rely on this behavior; it is not guaranteed to remain the same in future versions.) Default value: $configDir/hiddenservices","title":"hiddenServiceDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hidden-service-dir/#parameters","text":"directory - hidden services directory Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hostname-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / hostnameFile hostnameFile \u00b6 fun hostnameFile(file: File ): Builder (source)","title":"Hostname file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hostname-file/#hostnamefile","text":"fun hostnameFile(file: File ): Builder (source)","title":"hostnameFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/library-path/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / libraryPath libraryPath \u00b6 fun libraryPath(directory: File ): Builder (source)","title":"Library path"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/library-path/#librarypath","text":"fun libraryPath(directory: File ): Builder (source)","title":"libraryPath"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/resolve-conf/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / resolveConf resolveConf \u00b6 fun resolveConf(resolveConf: File ): Builder (source)","title":"Resolve conf"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/resolve-conf/#resolveconf","text":"fun resolveConf(resolveConf: File ): Builder (source)","title":"resolveConf"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/tor-executable/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / torExecutable torExecutable \u00b6 fun torExecutable(file: File ): Builder (source)","title":"Tor executable"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/tor-executable/#torexecutable","text":"fun torExecutable(file: File ): Builder (source)","title":"torExecutable"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/torrc/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / torrc torrc \u00b6 fun torrc(file: File ): Builder (source) The configuration file, which contains \u201coption value\u201d pairs. Default value: $configDir/torrc Parameters \u00b6 file - your torrc file Return Builder","title":"Torrc"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/torrc/#torrc","text":"fun torrc(file: File ): Builder (source) The configuration file, which contains \u201coption value\u201d pairs. Default value: $configDir/torrc","title":"torrc"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/torrc/#parameters","text":"file - your torrc file Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings TorSettings \u00b6 abstract class TorSettings : BaseConsts (source) This class is for defining default values for your torrc file. Extend this class and define your own settings. Keep in mind that Orbot and TorBrowser are the 2 most widely used applications using Tor, and to use settings that won\u2019t conflict (those settings are documented as such, and contain further details). TorSettings.Companion contains pretty standard default values which\u2019ll get you a Socks5 proxy running, nothing more. Would highly recommend reading up on what\u2019s what in the manual: https://2019.www.torproject.org/docs/tor-manual.html.en Constructors \u00b6 Name Summary <init> This class is for defining default values for your torrc file. Extend this class and define your own settings. TorSettings() Properties \u00b6 Name Summary connectionPadding See DEFAULT__HAS_CONNECTION_PADDING abstract val connectionPadding: String customTorrc Default java.null abstract val customTorrc: String ? disableNetwork See DEFAULT__DISABLE_NETWORK abstract val disableNetwork: Boolean dnsPort TorBrowser and Orbot use \u201c5400\u201d by default. It may be wise to pick something that won\u2019t conflict. abstract val dnsPort: String entryNodes See DEFAULT__ENTRY_NODES abstract val entryNodes: String ? excludeNodes See DEFAULT__EXCLUDED_NODES abstract val excludeNodes: String ? exitNodes See DEFAULT__EXIT_NODES abstract val exitNodes: String ? hasBridges See DEFAULT__HAS_BRIDGES abstract val hasBridges: Boolean hasCookieAuthentication See DEFAULT__HAS_COOKIE_AUTHENTICATION abstract val hasCookieAuthentication: Boolean hasDebugLogs See DEFAULT__HAS_DEBUG_LOGS abstract val hasDebugLogs: Boolean hasDormantCanceledByStartup See DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP abstract val hasDormantCanceledByStartup: Boolean hasIsolationAddressFlagForTunnel See DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL abstract val hasIsolationAddressFlagForTunnel: Boolean hasOpenProxyOnAllInterfaces See DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES abstract val hasOpenProxyOnAllInterfaces: Boolean hasReachableAddress See DEFAULT__HAS_REACHABLE_ADDRESS abstract val hasReachableAddress: Boolean hasReducedConnectionPadding See DEFAULT__HAS_REDUCED_CONNECTION_PADDING abstract val hasReducedConnectionPadding: Boolean hasSafeSocks See DEFAULT__HAS_SAFE_SOCKS abstract val hasSafeSocks: Boolean hasStrictNodes See DEFAULT__HAS_STRICT_NODES abstract val hasStrictNodes: Boolean hasTestSocks See DEFAULT__HAS_TEST_SOCKS abstract val hasTestSocks: Boolean httpTunnelPort TorBrowser and Orbot use \u201c8218\u201d by default. It may be wise to pick something that won\u2019t conflict if you\u2019re using this setting. abstract val httpTunnelPort: String isAutoMapHostsOnResolve See DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE abstract val isAutoMapHostsOnResolve: Boolean isRelay See DEFAULT__IS_RELAY abstract val isRelay: Boolean listOfSupportedBridges Must have the transport binaries for obfs4 and/or snowflake, depending on if you wish to include them in your bridges file to use. abstract val listOfSupportedBridges: List < String > proxyHost See DEFAULT__PROXY_HOST abstract val proxyHost: String ? proxyPassword See DEFAULT__PROXY_PASSWORD abstract val proxyPassword: String ? proxyPort Default = java.null abstract val proxyPort: Int ? proxySocks5Host See DEFAULT__PROXY_SOCKS5_HOST abstract val proxySocks5Host: String ? proxySocks5ServerPort Default = java.null abstract val proxySocks5ServerPort: Int ? proxyType See DEFAULT__PROXY_TYPE abstract val proxyType: String ? proxyUser See DEFAULT__PROXY_USER abstract val proxyUser: String ? reachableAddressPorts See DEFAULT__REACHABLE_ADDRESS_PORTS abstract val reachableAddressPorts: String relayNickname See DEFAULT__RELAY_NICKNAME abstract val relayNickname: String ? relayPort TorBrowser and Orbot use 9001 by default. It may be wise to pick something that won\u2019t conflict. abstract val relayPort: Int ? runAsDaemon See DEFAULT__RUN_AS_DAEMON abstract val runAsDaemon: Boolean socksPort Could be \u201cauto\u201d or a specified port, such as \u201c9051\u201d. abstract val socksPort: String transPort Can be \u201cauto\u201d, or a specified port such as \u201c9141\u201d abstract val transPort: String useSocks5 See DEFAULT__USE_SOCKS5 abstract val useSocks5: Boolean virtualAddressNetwork TorBrowser and Orbot use \u201c10.192.0.1/10\u201d, it may be wise to pick something that won\u2019t conflict if you are using this setting. abstract val virtualAddressNetwork: String ? Companion Object Properties \u00b6 Name Summary DEFAULT__DISABLE_NETWORK const val DEFAULT__DISABLE_NETWORK: Boolean DEFAULT__DNS_PORT const val DEFAULT__DNS_PORT: String DEFAULT__ENTRY_NODES const val DEFAULT__ENTRY_NODES: String DEFAULT__EXCLUDED_NODES const val DEFAULT__EXCLUDED_NODES: String DEFAULT__EXIT_NODES const val DEFAULT__EXIT_NODES: String DEFAULT__HAS_BRIDGES const val DEFAULT__HAS_BRIDGES: Boolean DEFAULT__HAS_CONNECTION_PADDING const val DEFAULT__HAS_CONNECTION_PADDING: String DEFAULT__HAS_COOKIE_AUTHENTICATION const val DEFAULT__HAS_COOKIE_AUTHENTICATION: Boolean DEFAULT__HAS_DEBUG_LOGS const val DEFAULT__HAS_DEBUG_LOGS: Boolean DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP const val DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP: Boolean DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL const val DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL: Boolean DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES const val DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES: Boolean DEFAULT__HAS_REACHABLE_ADDRESS const val DEFAULT__HAS_REACHABLE_ADDRESS: Boolean DEFAULT__HAS_REDUCED_CONNECTION_PADDING const val DEFAULT__HAS_REDUCED_CONNECTION_PADDING: Boolean DEFAULT__HAS_SAFE_SOCKS const val DEFAULT__HAS_SAFE_SOCKS: Boolean DEFAULT__HAS_STRICT_NODES const val DEFAULT__HAS_STRICT_NODES: Boolean DEFAULT__HAS_TEST_SOCKS const val DEFAULT__HAS_TEST_SOCKS: Boolean DEFAULT__HTTP_TUNNEL_PORT const val DEFAULT__HTTP_TUNNEL_PORT: String DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE const val DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE: Boolean DEFAULT__IS_RELAY const val DEFAULT__IS_RELAY: Boolean DEFAULT__PROXY_HOST const val DEFAULT__PROXY_HOST: String DEFAULT__PROXY_PASSWORD const val DEFAULT__PROXY_PASSWORD: String DEFAULT__PROXY_SOCKS5_HOST const val DEFAULT__PROXY_SOCKS5_HOST: String DEFAULT__PROXY_TYPE const val DEFAULT__PROXY_TYPE: String DEFAULT__PROXY_USER const val DEFAULT__PROXY_USER: String DEFAULT__REACHABLE_ADDRESS_PORTS const val DEFAULT__REACHABLE_ADDRESS_PORTS: String DEFAULT__RELAY_NICKNAME const val DEFAULT__RELAY_NICKNAME: String DEFAULT__RUN_AS_DAEMON const val DEFAULT__RUN_AS_DAEMON: Boolean DEFAULT__TRANS_PORT const val DEFAULT__TRANS_PORT: String DEFAULT__USE_SOCKS5 const val DEFAULT__USE_SOCKS5: Boolean","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/#torsettings","text":"abstract class TorSettings : BaseConsts (source) This class is for defining default values for your torrc file. Extend this class and define your own settings. Keep in mind that Orbot and TorBrowser are the 2 most widely used applications using Tor, and to use settings that won\u2019t conflict (those settings are documented as such, and contain further details). TorSettings.Companion contains pretty standard default values which\u2019ll get you a Socks5 proxy running, nothing more. Would highly recommend reading up on what\u2019s what in the manual: https://2019.www.torproject.org/docs/tor-manual.html.en","title":"TorSettings"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/#constructors","text":"Name Summary <init> This class is for defining default values for your torrc file. Extend this class and define your own settings. TorSettings()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/#properties","text":"Name Summary connectionPadding See DEFAULT__HAS_CONNECTION_PADDING abstract val connectionPadding: String customTorrc Default java.null abstract val customTorrc: String ? disableNetwork See DEFAULT__DISABLE_NETWORK abstract val disableNetwork: Boolean dnsPort TorBrowser and Orbot use \u201c5400\u201d by default. It may be wise to pick something that won\u2019t conflict. abstract val dnsPort: String entryNodes See DEFAULT__ENTRY_NODES abstract val entryNodes: String ? excludeNodes See DEFAULT__EXCLUDED_NODES abstract val excludeNodes: String ? exitNodes See DEFAULT__EXIT_NODES abstract val exitNodes: String ? hasBridges See DEFAULT__HAS_BRIDGES abstract val hasBridges: Boolean hasCookieAuthentication See DEFAULT__HAS_COOKIE_AUTHENTICATION abstract val hasCookieAuthentication: Boolean hasDebugLogs See DEFAULT__HAS_DEBUG_LOGS abstract val hasDebugLogs: Boolean hasDormantCanceledByStartup See DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP abstract val hasDormantCanceledByStartup: Boolean hasIsolationAddressFlagForTunnel See DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL abstract val hasIsolationAddressFlagForTunnel: Boolean hasOpenProxyOnAllInterfaces See DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES abstract val hasOpenProxyOnAllInterfaces: Boolean hasReachableAddress See DEFAULT__HAS_REACHABLE_ADDRESS abstract val hasReachableAddress: Boolean hasReducedConnectionPadding See DEFAULT__HAS_REDUCED_CONNECTION_PADDING abstract val hasReducedConnectionPadding: Boolean hasSafeSocks See DEFAULT__HAS_SAFE_SOCKS abstract val hasSafeSocks: Boolean hasStrictNodes See DEFAULT__HAS_STRICT_NODES abstract val hasStrictNodes: Boolean hasTestSocks See DEFAULT__HAS_TEST_SOCKS abstract val hasTestSocks: Boolean httpTunnelPort TorBrowser and Orbot use \u201c8218\u201d by default. It may be wise to pick something that won\u2019t conflict if you\u2019re using this setting. abstract val httpTunnelPort: String isAutoMapHostsOnResolve See DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE abstract val isAutoMapHostsOnResolve: Boolean isRelay See DEFAULT__IS_RELAY abstract val isRelay: Boolean listOfSupportedBridges Must have the transport binaries for obfs4 and/or snowflake, depending on if you wish to include them in your bridges file to use. abstract val listOfSupportedBridges: List < String > proxyHost See DEFAULT__PROXY_HOST abstract val proxyHost: String ? proxyPassword See DEFAULT__PROXY_PASSWORD abstract val proxyPassword: String ? proxyPort Default = java.null abstract val proxyPort: Int ? proxySocks5Host See DEFAULT__PROXY_SOCKS5_HOST abstract val proxySocks5Host: String ? proxySocks5ServerPort Default = java.null abstract val proxySocks5ServerPort: Int ? proxyType See DEFAULT__PROXY_TYPE abstract val proxyType: String ? proxyUser See DEFAULT__PROXY_USER abstract val proxyUser: String ? reachableAddressPorts See DEFAULT__REACHABLE_ADDRESS_PORTS abstract val reachableAddressPorts: String relayNickname See DEFAULT__RELAY_NICKNAME abstract val relayNickname: String ? relayPort TorBrowser and Orbot use 9001 by default. It may be wise to pick something that won\u2019t conflict. abstract val relayPort: Int ? runAsDaemon See DEFAULT__RUN_AS_DAEMON abstract val runAsDaemon: Boolean socksPort Could be \u201cauto\u201d or a specified port, such as \u201c9051\u201d. abstract val socksPort: String transPort Can be \u201cauto\u201d, or a specified port such as \u201c9141\u201d abstract val transPort: String useSocks5 See DEFAULT__USE_SOCKS5 abstract val useSocks5: Boolean virtualAddressNetwork TorBrowser and Orbot use \u201c10.192.0.1/10\u201d, it may be wise to pick something that won\u2019t conflict if you are using this setting. abstract val virtualAddressNetwork: String ?","title":"Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/#companion-object-properties","text":"Name Summary DEFAULT__DISABLE_NETWORK const val DEFAULT__DISABLE_NETWORK: Boolean DEFAULT__DNS_PORT const val DEFAULT__DNS_PORT: String DEFAULT__ENTRY_NODES const val DEFAULT__ENTRY_NODES: String DEFAULT__EXCLUDED_NODES const val DEFAULT__EXCLUDED_NODES: String DEFAULT__EXIT_NODES const val DEFAULT__EXIT_NODES: String DEFAULT__HAS_BRIDGES const val DEFAULT__HAS_BRIDGES: Boolean DEFAULT__HAS_CONNECTION_PADDING const val DEFAULT__HAS_CONNECTION_PADDING: String DEFAULT__HAS_COOKIE_AUTHENTICATION const val DEFAULT__HAS_COOKIE_AUTHENTICATION: Boolean DEFAULT__HAS_DEBUG_LOGS const val DEFAULT__HAS_DEBUG_LOGS: Boolean DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP const val DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP: Boolean DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL const val DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL: Boolean DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES const val DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES: Boolean DEFAULT__HAS_REACHABLE_ADDRESS const val DEFAULT__HAS_REACHABLE_ADDRESS: Boolean DEFAULT__HAS_REDUCED_CONNECTION_PADDING const val DEFAULT__HAS_REDUCED_CONNECTION_PADDING: Boolean DEFAULT__HAS_SAFE_SOCKS const val DEFAULT__HAS_SAFE_SOCKS: Boolean DEFAULT__HAS_STRICT_NODES const val DEFAULT__HAS_STRICT_NODES: Boolean DEFAULT__HAS_TEST_SOCKS const val DEFAULT__HAS_TEST_SOCKS: Boolean DEFAULT__HTTP_TUNNEL_PORT const val DEFAULT__HTTP_TUNNEL_PORT: String DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE const val DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE: Boolean DEFAULT__IS_RELAY const val DEFAULT__IS_RELAY: Boolean DEFAULT__PROXY_HOST const val DEFAULT__PROXY_HOST: String DEFAULT__PROXY_PASSWORD const val DEFAULT__PROXY_PASSWORD: String DEFAULT__PROXY_SOCKS5_HOST const val DEFAULT__PROXY_SOCKS5_HOST: String DEFAULT__PROXY_TYPE const val DEFAULT__PROXY_TYPE: String DEFAULT__PROXY_USER const val DEFAULT__PROXY_USER: String DEFAULT__REACHABLE_ADDRESS_PORTS const val DEFAULT__REACHABLE_ADDRESS_PORTS: String DEFAULT__RELAY_NICKNAME const val DEFAULT__RELAY_NICKNAME: String DEFAULT__RUN_AS_DAEMON const val DEFAULT__RUN_AS_DAEMON: Boolean DEFAULT__TRANS_PORT const val DEFAULT__TRANS_PORT: String DEFAULT__USE_SOCKS5 const val DEFAULT__USE_SOCKS5: Boolean","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__DISABLE_NETWORK DEFAULT__DISABLE_NETWORK \u00b6 const val DEFAULT__DISABLE_NETWORK: Boolean (source)","title":" d e f a u l t   d i s a b l e  n e t w o r k"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/#default__disable_network","text":"const val DEFAULT__DISABLE_NETWORK: Boolean (source)","title":"DEFAULT__DISABLE_NETWORK"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-d-n-s_-p-o-r-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__DNS_PORT DEFAULT__DNS_PORT \u00b6 const val DEFAULT__DNS_PORT: String (source)","title":" d e f a u l t   d n s  p o r t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-d-n-s_-p-o-r-t/#default__dns_port","text":"const val DEFAULT__DNS_PORT: String (source)","title":"DEFAULT__DNS_PORT"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-n-t-r-y_-n-o-d-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__ENTRY_NODES DEFAULT__ENTRY_NODES \u00b6 const val DEFAULT__ENTRY_NODES: String (source)","title":" d e f a u l t   e n t r y  n o d e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-n-t-r-y_-n-o-d-e-s/#default__entry_nodes","text":"const val DEFAULT__ENTRY_NODES: String (source)","title":"DEFAULT__ENTRY_NODES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-x-c-l-u-d-e-d_-n-o-d-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__EXCLUDED_NODES DEFAULT__EXCLUDED_NODES \u00b6 const val DEFAULT__EXCLUDED_NODES: String (source)","title":" d e f a u l t   e x c l u d e d  n o d e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-x-c-l-u-d-e-d_-n-o-d-e-s/#default__excluded_nodes","text":"const val DEFAULT__EXCLUDED_NODES: String (source)","title":"DEFAULT__EXCLUDED_NODES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-x-i-t_-n-o-d-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__EXIT_NODES DEFAULT__EXIT_NODES \u00b6 const val DEFAULT__EXIT_NODES: String (source)","title":" d e f a u l t   e x i t  n o d e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-x-i-t_-n-o-d-e-s/#default__exit_nodes","text":"const val DEFAULT__EXIT_NODES: String (source)","title":"DEFAULT__EXIT_NODES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-b-r-i-d-g-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_BRIDGES DEFAULT__HAS_BRIDGES \u00b6 const val DEFAULT__HAS_BRIDGES: Boolean (source)","title":" d e f a u l t   h a s  b r i d g e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-b-r-i-d-g-e-s/#default__has_bridges","text":"const val DEFAULT__HAS_BRIDGES: Boolean (source)","title":"DEFAULT__HAS_BRIDGES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_CONNECTION_PADDING DEFAULT__HAS_CONNECTION_PADDING \u00b6 const val DEFAULT__HAS_CONNECTION_PADDING: String (source)","title":" d e f a u l t   h a s  c o n n e c t i o n  p a d d i n g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/#default__has_connection_padding","text":"const val DEFAULT__HAS_CONNECTION_PADDING: String (source)","title":"DEFAULT__HAS_CONNECTION_PADDING"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-c-o-o-k-i-e_-a-u-t-h-e-n-t-i-c-a-t-i-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_COOKIE_AUTHENTICATION DEFAULT__HAS_COOKIE_AUTHENTICATION \u00b6 const val DEFAULT__HAS_COOKIE_AUTHENTICATION: Boolean (source)","title":" d e f a u l t   h a s  c o o k i e  a u t h e n t i c a t i o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-c-o-o-k-i-e_-a-u-t-h-e-n-t-i-c-a-t-i-o-n/#default__has_cookie_authentication","text":"const val DEFAULT__HAS_COOKIE_AUTHENTICATION: Boolean (source)","title":"DEFAULT__HAS_COOKIE_AUTHENTICATION"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-d-e-b-u-g_-l-o-g-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_DEBUG_LOGS DEFAULT__HAS_DEBUG_LOGS \u00b6 const val DEFAULT__HAS_DEBUG_LOGS: Boolean (source)","title":" d e f a u l t   h a s  d e b u g  l o g s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-d-e-b-u-g_-l-o-g-s/#default__has_debug_logs","text":"const val DEFAULT__HAS_DEBUG_LOGS: Boolean (source)","title":"DEFAULT__HAS_DEBUG_LOGS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-d-o-r-m-a-n-t_-c-a-n-c-e-l-e-d_-b-y_-s-t-a-r-t-u-p/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP \u00b6 const val DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP: Boolean (source)","title":" d e f a u l t   h a s  d o r m a n t  c a n c e l e d  b y  s t a r t u p"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-d-o-r-m-a-n-t_-c-a-n-c-e-l-e-d_-b-y_-s-t-a-r-t-u-p/#default__has_dormant_canceled_by_startup","text":"const val DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP: Boolean (source)","title":"DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-i-s-o-l-a-t-i-o-n_-a-d-d-r-e-s-s_-f-l-a-g_-f-o-r_-t-u-n-n-e-l/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL \u00b6 const val DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL: Boolean (source)","title":" d e f a u l t   h a s  i s o l a t i o n  a d d r e s s  f l a g  f o r  t u n n e l"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-i-s-o-l-a-t-i-o-n_-a-d-d-r-e-s-s_-f-l-a-g_-f-o-r_-t-u-n-n-e-l/#default__has_isolation_address_flag_for_tunnel","text":"const val DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL: Boolean (source)","title":"DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-o-p-e-n_-p-r-o-x-y_-o-n_-a-l-l_-i-n-t-e-r-f-a-c-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES \u00b6 const val DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES: Boolean (source)","title":" d e f a u l t   h a s  o p e n  p r o x y  o n  a l l  i n t e r f a c e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-o-p-e-n_-p-r-o-x-y_-o-n_-a-l-l_-i-n-t-e-r-f-a-c-e-s/#default__has_open_proxy_on_all_interfaces","text":"const val DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES: Boolean (source)","title":"DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_REACHABLE_ADDRESS DEFAULT__HAS_REACHABLE_ADDRESS \u00b6 const val DEFAULT__HAS_REACHABLE_ADDRESS: Boolean (source)","title":" d e f a u l t   h a s  r e a c h a b l e  a d d r e s s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s/#default__has_reachable_address","text":"const val DEFAULT__HAS_REACHABLE_ADDRESS: Boolean (source)","title":"DEFAULT__HAS_REACHABLE_ADDRESS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-r-e-d-u-c-e-d_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_REDUCED_CONNECTION_PADDING DEFAULT__HAS_REDUCED_CONNECTION_PADDING \u00b6 const val DEFAULT__HAS_REDUCED_CONNECTION_PADDING: Boolean (source)","title":" d e f a u l t   h a s  r e d u c e d  c o n n e c t i o n  p a d d i n g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-r-e-d-u-c-e-d_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/#default__has_reduced_connection_padding","text":"const val DEFAULT__HAS_REDUCED_CONNECTION_PADDING: Boolean (source)","title":"DEFAULT__HAS_REDUCED_CONNECTION_PADDING"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-s-a-f-e_-s-o-c-k-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_SAFE_SOCKS DEFAULT__HAS_SAFE_SOCKS \u00b6 const val DEFAULT__HAS_SAFE_SOCKS: Boolean (source)","title":" d e f a u l t   h a s  s a f e  s o c k s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-s-a-f-e_-s-o-c-k-s/#default__has_safe_socks","text":"const val DEFAULT__HAS_SAFE_SOCKS: Boolean (source)","title":"DEFAULT__HAS_SAFE_SOCKS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-s-t-r-i-c-t_-n-o-d-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_STRICT_NODES DEFAULT__HAS_STRICT_NODES \u00b6 const val DEFAULT__HAS_STRICT_NODES: Boolean (source)","title":" d e f a u l t   h a s  s t r i c t  n o d e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-s-t-r-i-c-t_-n-o-d-e-s/#default__has_strict_nodes","text":"const val DEFAULT__HAS_STRICT_NODES: Boolean (source)","title":"DEFAULT__HAS_STRICT_NODES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-t-e-s-t_-s-o-c-k-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_TEST_SOCKS DEFAULT__HAS_TEST_SOCKS \u00b6 const val DEFAULT__HAS_TEST_SOCKS: Boolean (source)","title":" d e f a u l t   h a s  t e s t  s o c k s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-t-e-s-t_-s-o-c-k-s/#default__has_test_socks","text":"const val DEFAULT__HAS_TEST_SOCKS: Boolean (source)","title":"DEFAULT__HAS_TEST_SOCKS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-t-t-p_-t-u-n-n-e-l_-p-o-r-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HTTP_TUNNEL_PORT DEFAULT__HTTP_TUNNEL_PORT \u00b6 const val DEFAULT__HTTP_TUNNEL_PORT: String (source)","title":" d e f a u l t   h t t p  t u n n e l  p o r t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-t-t-p_-t-u-n-n-e-l_-p-o-r-t/#default__http_tunnel_port","text":"const val DEFAULT__HTTP_TUNNEL_PORT: String (source)","title":"DEFAULT__HTTP_TUNNEL_PORT"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-i-s_-a-u-t-o_-m-a-p_-h-o-s-t-s_-o-n_-r-e-s-o-l-v-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE \u00b6 const val DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE: Boolean (source)","title":" d e f a u l t   i s  a u t o  m a p  h o s t s  o n  r e s o l v e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-i-s_-a-u-t-o_-m-a-p_-h-o-s-t-s_-o-n_-r-e-s-o-l-v-e/#default__is_auto_map_hosts_on_resolve","text":"const val DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE: Boolean (source)","title":"DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-i-s_-r-e-l-a-y/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__IS_RELAY DEFAULT__IS_RELAY \u00b6 const val DEFAULT__IS_RELAY: Boolean (source)","title":" d e f a u l t   i s  r e l a y"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-i-s_-r-e-l-a-y/#default__is_relay","text":"const val DEFAULT__IS_RELAY: Boolean (source)","title":"DEFAULT__IS_RELAY"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-h-o-s-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_HOST DEFAULT__PROXY_HOST \u00b6 const val DEFAULT__PROXY_HOST: String (source)","title":" d e f a u l t   p r o x y  h o s t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-h-o-s-t/#default__proxy_host","text":"const val DEFAULT__PROXY_HOST: String (source)","title":"DEFAULT__PROXY_HOST"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-p-a-s-s-w-o-r-d/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_PASSWORD DEFAULT__PROXY_PASSWORD \u00b6 const val DEFAULT__PROXY_PASSWORD: String (source)","title":" d e f a u l t   p r o x y  p a s s w o r d"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-p-a-s-s-w-o-r-d/#default__proxy_password","text":"const val DEFAULT__PROXY_PASSWORD: String (source)","title":"DEFAULT__PROXY_PASSWORD"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-s-o-c-k-s5_-h-o-s-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_SOCKS5_HOST DEFAULT__PROXY_SOCKS5_HOST \u00b6 const val DEFAULT__PROXY_SOCKS5_HOST: String (source)","title":" d e f a u l t   p r o x y  s o c k s5  h o s t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-s-o-c-k-s5_-h-o-s-t/#default__proxy_socks5_host","text":"const val DEFAULT__PROXY_SOCKS5_HOST: String (source)","title":"DEFAULT__PROXY_SOCKS5_HOST"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-t-y-p-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_TYPE DEFAULT__PROXY_TYPE \u00b6 const val DEFAULT__PROXY_TYPE: String (source)","title":" d e f a u l t   p r o x y  t y p e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-t-y-p-e/#default__proxy_type","text":"const val DEFAULT__PROXY_TYPE: String (source)","title":"DEFAULT__PROXY_TYPE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-u-s-e-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_USER DEFAULT__PROXY_USER \u00b6 const val DEFAULT__PROXY_USER: String (source)","title":" d e f a u l t   p r o x y  u s e r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-u-s-e-r/#default__proxy_user","text":"const val DEFAULT__PROXY_USER: String (source)","title":"DEFAULT__PROXY_USER"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s_-p-o-r-t-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__REACHABLE_ADDRESS_PORTS DEFAULT__REACHABLE_ADDRESS_PORTS \u00b6 const val DEFAULT__REACHABLE_ADDRESS_PORTS: String (source)","title":" d e f a u l t   r e a c h a b l e  a d d r e s s  p o r t s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s_-p-o-r-t-s/#default__reachable_address_ports","text":"const val DEFAULT__REACHABLE_ADDRESS_PORTS: String (source)","title":"DEFAULT__REACHABLE_ADDRESS_PORTS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-e-l-a-y_-n-i-c-k-n-a-m-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__RELAY_NICKNAME DEFAULT__RELAY_NICKNAME \u00b6 const val DEFAULT__RELAY_NICKNAME: String (source)","title":" d e f a u l t   r e l a y  n i c k n a m e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-e-l-a-y_-n-i-c-k-n-a-m-e/#default__relay_nickname","text":"const val DEFAULT__RELAY_NICKNAME: String (source)","title":"DEFAULT__RELAY_NICKNAME"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-u-n_-a-s_-d-a-e-m-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__RUN_AS_DAEMON DEFAULT__RUN_AS_DAEMON \u00b6 const val DEFAULT__RUN_AS_DAEMON: Boolean (source)","title":" d e f a u l t   r u n  a s  d a e m o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-u-n_-a-s_-d-a-e-m-o-n/#default__run_as_daemon","text":"const val DEFAULT__RUN_AS_DAEMON: Boolean (source)","title":"DEFAULT__RUN_AS_DAEMON"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-t-r-a-n-s_-p-o-r-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__TRANS_PORT DEFAULT__TRANS_PORT \u00b6 const val DEFAULT__TRANS_PORT: String (source)","title":" d e f a u l t   t r a n s  p o r t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-t-r-a-n-s_-p-o-r-t/#default__trans_port","text":"const val DEFAULT__TRANS_PORT: String (source)","title":"DEFAULT__TRANS_PORT"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-u-s-e_-s-o-c-k-s5/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__USE_SOCKS5 DEFAULT__USE_SOCKS5 \u00b6 const val DEFAULT__USE_SOCKS5: Boolean (source)","title":" d e f a u l t   u s e  s o c k s5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-u-s-e_-s-o-c-k-s5/#default__use_socks5","text":"const val DEFAULT__USE_SOCKS5: Boolean (source)","title":"DEFAULT__USE_SOCKS5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / <init> <init> \u00b6 TorSettings() This class is for defining default values for your torrc file. Extend this class and define your own settings. Keep in mind that Orbot and TorBrowser are the 2 most widely used applications using Tor, and to use settings that won\u2019t conflict (those settings are documented as such, and contain further details). TorSettings.Companion contains pretty standard default values which\u2019ll get you a Socks5 proxy running, nothing more. Would highly recommend reading up on what\u2019s what in the manual: https://2019.www.torproject.org/docs/tor-manual.html.en","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-init-/#init","text":"TorSettings() This class is for defining default values for your torrc file. Extend this class and define your own settings. Keep in mind that Orbot and TorBrowser are the 2 most widely used applications using Tor, and to use settings that won\u2019t conflict (those settings are documented as such, and contain further details). TorSettings.Companion contains pretty standard default values which\u2019ll get you a Socks5 proxy running, nothing more. Would highly recommend reading up on what\u2019s what in the manual: https://2019.www.torproject.org/docs/tor-manual.html.en","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/connection-padding/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / connectionPadding connectionPadding \u00b6 abstract val connectionPadding: String (source) See DEFAULT__HAS_CONNECTION_PADDING","title":"Connection padding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/connection-padding/#connectionpadding","text":"abstract val connectionPadding: String (source) See DEFAULT__HAS_CONNECTION_PADDING","title":"connectionPadding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/custom-torrc/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / customTorrc customTorrc \u00b6 abstract val customTorrc: String ? (source) Default java.null","title":"Custom torrc"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/custom-torrc/#customtorrc","text":"abstract val customTorrc: String ? (source) Default java.null","title":"customTorrc"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/disable-network/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / disableNetwork disableNetwork \u00b6 abstract val disableNetwork: Boolean (source) See DEFAULT__DISABLE_NETWORK","title":"Disable network"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/disable-network/#disablenetwork","text":"abstract val disableNetwork: Boolean (source) See DEFAULT__DISABLE_NETWORK","title":"disableNetwork"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/dns-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / dnsPort dnsPort \u00b6 abstract val dnsPort: String (source) TorBrowser and Orbot use \u201c5400\u201d by default. It may be wise to pick something that won\u2019t conflict. See DEFAULT__DNS_PORT","title":"Dns port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/dns-port/#dnsport","text":"abstract val dnsPort: String (source) TorBrowser and Orbot use \u201c5400\u201d by default. It may be wise to pick something that won\u2019t conflict. See DEFAULT__DNS_PORT","title":"dnsPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/entry-nodes/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / entryNodes entryNodes \u00b6 abstract val entryNodes: String ? (source) See DEFAULT__ENTRY_NODES","title":"Entry nodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/entry-nodes/#entrynodes","text":"abstract val entryNodes: String ? (source) See DEFAULT__ENTRY_NODES","title":"entryNodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/exclude-nodes/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / excludeNodes excludeNodes \u00b6 abstract val excludeNodes: String ? (source) See DEFAULT__EXCLUDED_NODES","title":"Exclude nodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/exclude-nodes/#excludenodes","text":"abstract val excludeNodes: String ? (source) See DEFAULT__EXCLUDED_NODES","title":"excludeNodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/exit-nodes/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / exitNodes exitNodes \u00b6 abstract val exitNodes: String ? (source) See DEFAULT__EXIT_NODES","title":"Exit nodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/exit-nodes/#exitnodes","text":"abstract val exitNodes: String ? (source) See DEFAULT__EXIT_NODES","title":"exitNodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-bridges/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasBridges hasBridges \u00b6 abstract val hasBridges: Boolean (source) See DEFAULT__HAS_BRIDGES","title":"Has bridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-bridges/#hasbridges","text":"abstract val hasBridges: Boolean (source) See DEFAULT__HAS_BRIDGES","title":"hasBridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-cookie-authentication/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasCookieAuthentication hasCookieAuthentication \u00b6 abstract val hasCookieAuthentication: Boolean (source) See DEFAULT__HAS_COOKIE_AUTHENTICATION","title":"Has cookie authentication"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-cookie-authentication/#hascookieauthentication","text":"abstract val hasCookieAuthentication: Boolean (source) See DEFAULT__HAS_COOKIE_AUTHENTICATION","title":"hasCookieAuthentication"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-debug-logs/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasDebugLogs hasDebugLogs \u00b6 abstract val hasDebugLogs: Boolean (source) See DEFAULT__HAS_DEBUG_LOGS","title":"Has debug logs"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-debug-logs/#hasdebuglogs","text":"abstract val hasDebugLogs: Boolean (source) See DEFAULT__HAS_DEBUG_LOGS","title":"hasDebugLogs"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-dormant-canceled-by-startup/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasDormantCanceledByStartup hasDormantCanceledByStartup \u00b6 abstract val hasDormantCanceledByStartup: Boolean (source) See DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP","title":"Has dormant canceled by startup"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-dormant-canceled-by-startup/#hasdormantcanceledbystartup","text":"abstract val hasDormantCanceledByStartup: Boolean (source) See DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP","title":"hasDormantCanceledByStartup"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-isolation-address-flag-for-tunnel/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasIsolationAddressFlagForTunnel hasIsolationAddressFlagForTunnel \u00b6 abstract val hasIsolationAddressFlagForTunnel: Boolean (source) See DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL","title":"Has isolation address flag for tunnel"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-isolation-address-flag-for-tunnel/#hasisolationaddressflagfortunnel","text":"abstract val hasIsolationAddressFlagForTunnel: Boolean (source) See DEFAULT__HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL","title":"hasIsolationAddressFlagForTunnel"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-open-proxy-on-all-interfaces/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasOpenProxyOnAllInterfaces hasOpenProxyOnAllInterfaces \u00b6 abstract val hasOpenProxyOnAllInterfaces: Boolean (source) See DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES","title":"Has open proxy on all interfaces"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-open-proxy-on-all-interfaces/#hasopenproxyonallinterfaces","text":"abstract val hasOpenProxyOnAllInterfaces: Boolean (source) See DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES","title":"hasOpenProxyOnAllInterfaces"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-reachable-address/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasReachableAddress hasReachableAddress \u00b6 abstract val hasReachableAddress: Boolean (source) See DEFAULT__HAS_REACHABLE_ADDRESS","title":"Has reachable address"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-reachable-address/#hasreachableaddress","text":"abstract val hasReachableAddress: Boolean (source) See DEFAULT__HAS_REACHABLE_ADDRESS","title":"hasReachableAddress"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-reduced-connection-padding/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasReducedConnectionPadding hasReducedConnectionPadding \u00b6 abstract val hasReducedConnectionPadding: Boolean (source) See DEFAULT__HAS_REDUCED_CONNECTION_PADDING","title":"Has reduced connection padding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-reduced-connection-padding/#hasreducedconnectionpadding","text":"abstract val hasReducedConnectionPadding: Boolean (source) See DEFAULT__HAS_REDUCED_CONNECTION_PADDING","title":"hasReducedConnectionPadding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-safe-socks/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasSafeSocks hasSafeSocks \u00b6 abstract val hasSafeSocks: Boolean (source) See DEFAULT__HAS_SAFE_SOCKS","title":"Has safe socks"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-safe-socks/#hassafesocks","text":"abstract val hasSafeSocks: Boolean (source) See DEFAULT__HAS_SAFE_SOCKS","title":"hasSafeSocks"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-strict-nodes/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasStrictNodes hasStrictNodes \u00b6 abstract val hasStrictNodes: Boolean (source) See DEFAULT__HAS_STRICT_NODES","title":"Has strict nodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-strict-nodes/#hasstrictnodes","text":"abstract val hasStrictNodes: Boolean (source) See DEFAULT__HAS_STRICT_NODES","title":"hasStrictNodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-test-socks/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasTestSocks hasTestSocks \u00b6 abstract val hasTestSocks: Boolean (source) See DEFAULT__HAS_TEST_SOCKS","title":"Has test socks"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-test-socks/#hastestsocks","text":"abstract val hasTestSocks: Boolean (source) See DEFAULT__HAS_TEST_SOCKS","title":"hasTestSocks"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/http-tunnel-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / httpTunnelPort httpTunnelPort \u00b6 abstract val httpTunnelPort: String (source) TorBrowser and Orbot use \u201c8218\u201d by default. It may be wise to pick something that won\u2019t conflict if you\u2019re using this setting. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#HTTPTunnelPort See DEFAULT__HTTP_TUNNEL_PORT TODO: Change to List and update TorSettingsBuilder method for multi-port support.","title":"Http tunnel port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/http-tunnel-port/#httptunnelport","text":"abstract val httpTunnelPort: String (source) TorBrowser and Orbot use \u201c8218\u201d by default. It may be wise to pick something that won\u2019t conflict if you\u2019re using this setting. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#HTTPTunnelPort See DEFAULT__HTTP_TUNNEL_PORT TODO: Change to List and update TorSettingsBuilder method for multi-port support.","title":"httpTunnelPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/is-auto-map-hosts-on-resolve/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / isAutoMapHostsOnResolve isAutoMapHostsOnResolve \u00b6 abstract val isAutoMapHostsOnResolve: Boolean (source) See DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#AutomapHostsOnResolve","title":"Is auto map hosts on resolve"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/is-auto-map-hosts-on-resolve/#isautomaphostsonresolve","text":"abstract val isAutoMapHostsOnResolve: Boolean (source) See DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#AutomapHostsOnResolve","title":"isAutoMapHostsOnResolve"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/is-relay/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / isRelay isRelay \u00b6 abstract val isRelay: Boolean (source) See DEFAULT__IS_RELAY If setting this to true, see relayPort documentation.","title":"Is relay"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/is-relay/#isrelay","text":"abstract val isRelay: Boolean (source) See DEFAULT__IS_RELAY If setting this to true, see relayPort documentation.","title":"isRelay"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/list-of-supported-bridges/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / listOfSupportedBridges listOfSupportedBridges \u00b6 abstract val listOfSupportedBridges: List < String > (source) Must have the transport binaries for obfs4 and/or snowflake, depending on if you wish to include them in your bridges file to use. See BaseConsts.SupportedBridges for options.","title":"List of supported bridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/list-of-supported-bridges/#listofsupportedbridges","text":"abstract val listOfSupportedBridges: List < String > (source) Must have the transport binaries for obfs4 and/or snowflake, depending on if you wish to include them in your bridges file to use. See BaseConsts.SupportedBridges for options.","title":"listOfSupportedBridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-host/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyHost proxyHost \u00b6 abstract val proxyHost: String ? (source) See DEFAULT__PROXY_HOST","title":"Proxy host"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-host/#proxyhost","text":"abstract val proxyHost: String ? (source) See DEFAULT__PROXY_HOST","title":"proxyHost"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-password/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyPassword proxyPassword \u00b6 abstract val proxyPassword: String ? (source) See DEFAULT__PROXY_PASSWORD","title":"Proxy password"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-password/#proxypassword","text":"abstract val proxyPassword: String ? (source) See DEFAULT__PROXY_PASSWORD","title":"proxyPassword"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyPort proxyPort \u00b6 abstract val proxyPort: Int ? (source) Default = java.null","title":"Proxy port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-port/#proxyport","text":"abstract val proxyPort: Int ? (source) Default = java.null","title":"proxyPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-socks5-host/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxySocks5Host proxySocks5Host \u00b6 abstract val proxySocks5Host: String ? (source) See DEFAULT__PROXY_SOCKS5_HOST","title":"Proxy socks5 host"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-socks5-host/#proxysocks5host","text":"abstract val proxySocks5Host: String ? (source) See DEFAULT__PROXY_SOCKS5_HOST","title":"proxySocks5Host"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-socks5-server-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxySocks5ServerPort proxySocks5ServerPort \u00b6 abstract val proxySocks5ServerPort: Int ? (source) Default = java.null Try ((Math.random() * 1000) + 10000).toInt()","title":"Proxy socks5 server port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-socks5-server-port/#proxysocks5serverport","text":"abstract val proxySocks5ServerPort: Int ? (source) Default = java.null Try ((Math.random() * 1000) + 10000).toInt()","title":"proxySocks5ServerPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-type/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyType proxyType \u00b6 abstract val proxyType: String ? (source) See DEFAULT__PROXY_TYPE","title":"Proxy type"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-type/#proxytype","text":"abstract val proxyType: String ? (source) See DEFAULT__PROXY_TYPE","title":"proxyType"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-user/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyUser proxyUser \u00b6 abstract val proxyUser: String ? (source) See DEFAULT__PROXY_USER","title":"Proxy user"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-user/#proxyuser","text":"abstract val proxyUser: String ? (source) See DEFAULT__PROXY_USER","title":"proxyUser"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/reachable-address-ports/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / reachableAddressPorts reachableAddressPorts \u00b6 abstract val reachableAddressPorts: String (source) See DEFAULT__REACHABLE_ADDRESS_PORTS","title":"Reachable address ports"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/reachable-address-ports/#reachableaddressports","text":"abstract val reachableAddressPorts: String (source) See DEFAULT__REACHABLE_ADDRESS_PORTS","title":"reachableAddressPorts"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/relay-nickname/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / relayNickname relayNickname \u00b6 abstract val relayNickname: String ? (source) See DEFAULT__RELAY_NICKNAME If setting this value to something other than null or an empty String, see relayPort documentation.","title":"Relay nickname"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/relay-nickname/#relaynickname","text":"abstract val relayNickname: String ? (source) See DEFAULT__RELAY_NICKNAME If setting this value to something other than null or an empty String, see relayPort documentation.","title":"relayNickname"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/relay-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / relayPort relayPort \u00b6 abstract val relayPort: Int ? (source) TorBrowser and Orbot use 9001 by default. It may be wise to pick something that won\u2019t conflict. This only gets used if you declare the following settings set as: hasReachableAddress false hasBridges false isRelay true relayNickname \u201cyour nickname\u201d relayPort some Int value Default = java.null","title":"Relay port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/relay-port/#relayport","text":"abstract val relayPort: Int ? (source) TorBrowser and Orbot use 9001 by default. It may be wise to pick something that won\u2019t conflict. This only gets used if you declare the following settings set as: hasReachableAddress false hasBridges false isRelay true relayNickname \u201cyour nickname\u201d relayPort some Int value Default = java.null","title":"relayPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/run-as-daemon/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / runAsDaemon runAsDaemon \u00b6 abstract val runAsDaemon: Boolean (source) See DEFAULT__RUN_AS_DAEMON","title":"Run as daemon"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/run-as-daemon/#runasdaemon","text":"abstract val runAsDaemon: Boolean (source) See DEFAULT__RUN_AS_DAEMON","title":"runAsDaemon"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/socks-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / socksPort socksPort \u00b6 abstract val socksPort: String (source) Could be \u201cauto\u201d or a specified port, such as \u201c9051\u201d. TorBrowser uses \u201c9150\u201d, and Orbot uses \u201c9050\u201d by default. It may be wise to pick something that won\u2019t conflict.","title":"Socks port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/socks-port/#socksport","text":"abstract val socksPort: String (source) Could be \u201cauto\u201d or a specified port, such as \u201c9051\u201d. TorBrowser uses \u201c9150\u201d, and Orbot uses \u201c9050\u201d by default. It may be wise to pick something that won\u2019t conflict.","title":"socksPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/trans-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / transPort transPort \u00b6 abstract val transPort: String (source) Can be \u201cauto\u201d, or a specified port such as \u201c9141\u201d See listOfSupportedBridges documentation. Orbot and TorBrowser default to \u201c9140\u201d. It may be wise to pick something that won\u2019t conflict. See DEFAULT__TRANS_PORT TODO: Change to a List? to support multiple ports","title":"Trans port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/trans-port/#transport","text":"abstract val transPort: String (source) Can be \u201cauto\u201d, or a specified port such as \u201c9141\u201d See listOfSupportedBridges documentation. Orbot and TorBrowser default to \u201c9140\u201d. It may be wise to pick something that won\u2019t conflict. See DEFAULT__TRANS_PORT TODO: Change to a List? to support multiple ports","title":"transPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/use-socks5/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / useSocks5 useSocks5 \u00b6 abstract val useSocks5: Boolean (source) See DEFAULT__USE_SOCKS5","title":"Use socks5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/use-socks5/#usesocks5","text":"abstract val useSocks5: Boolean (source) See DEFAULT__USE_SOCKS5","title":"useSocks5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/virtual-address-network/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / virtualAddressNetwork virtualAddressNetwork \u00b6 abstract val virtualAddressNetwork: String ? (source) TorBrowser and Orbot use \u201c10.192.0.1/10\u201d, it may be wise to pick something that won\u2019t conflict if you are using this setting. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#VirtualAddrNetworkIPv6","title":"Virtual address network"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/virtual-address-network/#virtualaddressnetwork","text":"abstract val virtualAddressNetwork: String ? (source) TorBrowser and Orbot use \u201c10.192.0.1/10\u201d, it may be wise to pick something that won\u2019t conflict if you are using this setting. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#VirtualAddrNetworkIPv6","title":"virtualAddressNetwork"},{"location":"topl-service/","text":"topl-service Packages \u00b6 Name Summary io.matthewnelson.topl_service io.matthewnelson.topl_service.prefs io.matthewnelson.topl_service.util Index \u00b6 All Types","title":"Index"},{"location":"topl-service/#packages","text":"Name Summary io.matthewnelson.topl_service io.matthewnelson.topl_service.prefs io.matthewnelson.topl_service.util","title":"Packages"},{"location":"topl-service/#index","text":"All Types","title":"Index"},{"location":"topl-service/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.topl_service.util.ServiceConsts \u00b6 | io.matthewnelson.topl_service.util.ServiceUtilities \u00b6 | io.matthewnelson.topl_service.TorServiceController \u00b6 | io.matthewnelson.topl_service.prefs.TorServicePrefs \u00b6 This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared.","title":"Index"},{"location":"topl-service/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"topl-service/alltypes/#iomatthewnelsontopl_serviceutilserviceconsts","text":"|","title":"io.matthewnelson.topl_service.util.ServiceConsts"},{"location":"topl-service/alltypes/#iomatthewnelsontopl_serviceutilserviceutilities","text":"|","title":"io.matthewnelson.topl_service.util.ServiceUtilities"},{"location":"topl-service/alltypes/#iomatthewnelsontopl_servicetorservicecontroller","text":"|","title":"io.matthewnelson.topl_service.TorServiceController"},{"location":"topl-service/alltypes/#iomatthewnelsontopl_serviceprefstorserviceprefs","text":"This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared.","title":"io.matthewnelson.topl_service.prefs.TorServicePrefs"},{"location":"topl-service/io.matthewnelson.topl_service/","text":"topl-service / io.matthewnelson.topl_service Package io.matthewnelson.topl_service \u00b6 Types \u00b6 Name Summary TorServiceController class TorServiceController : ServiceConsts","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service/#package-iomatthewnelsontopl_service","text":"","title":"Package io.matthewnelson.topl_service"},{"location":"topl-service/io.matthewnelson.topl_service/#types","text":"Name Summary TorServiceController class TorServiceController : ServiceConsts","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController TorServiceController \u00b6 class TorServiceController : ServiceConsts (source) Types \u00b6 Name Summary Builder The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. class Builder Companion Object Properties \u00b6 Name Summary appEventBroadcaster var appEventBroadcaster: EventBroadcaster ? Companion Object Functions \u00b6 Name Summary newIdentity Changes identities. Does nothing if called prior to: fun newIdentity(): Unit restartTor Restarts Tor. Does nothing if called prior to: fun restartTor(): Unit startTor Starts TorService . Does nothing if called prior to: fun startTor(): Unit stopTor Stops TorService . Does nothing if called prior to: fun stopTor(): Unit","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/#torservicecontroller","text":"class TorServiceController : ServiceConsts (source)","title":"TorServiceController"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/#types","text":"Name Summary Builder The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. class Builder","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/#companion-object-properties","text":"Name Summary appEventBroadcaster var appEventBroadcaster: EventBroadcaster ?","title":"Companion Object Properties"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/#companion-object-functions","text":"Name Summary newIdentity Changes identities. Does nothing if called prior to: fun newIdentity(): Unit restartTor Restarts Tor. Does nothing if called prior to: fun restartTor(): Unit startTor Starts TorService . Does nothing if called prior to: fun startTor(): Unit stopTor Stops TorService . Does nothing if called prior to: fun stopTor(): Unit","title":"Companion Object Functions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/app-event-broadcaster/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / appEventBroadcaster appEventBroadcaster \u00b6 var appEventBroadcaster: EventBroadcaster ? (source)","title":"App event broadcaster"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/app-event-broadcaster/#appeventbroadcaster","text":"var appEventBroadcaster: EventBroadcaster ? (source)","title":"appEventBroadcaster"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/new-identity/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / newIdentity newIdentity \u00b6 fun newIdentity(): Unit (source) Changes identities. Does nothing if called prior to: Initializing TorServiceController.Builder by calling Builder.build Calling startTor","title":"New identity"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/new-identity/#newidentity","text":"fun newIdentity(): Unit (source) Changes identities. Does nothing if called prior to: Initializing TorServiceController.Builder by calling Builder.build Calling startTor","title":"newIdentity"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/restart-tor/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / restartTor restartTor \u00b6 fun restartTor(): Unit (source) Restarts Tor. Does nothing if called prior to: Initializing TorServiceController.Builder by calling Builder.build Calling startTor","title":"Restart tor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/restart-tor/#restarttor","text":"fun restartTor(): Unit (source) Restarts Tor. Does nothing if called prior to: Initializing TorServiceController.Builder by calling Builder.build Calling startTor","title":"restartTor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/start-tor/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / startTor startTor \u00b6 fun startTor(): Unit (source) Starts TorService . Does nothing if called prior to: Initializing TorServiceController.Builder by calling Builder.build You can call this as much as you want. If Tor is already on, it will do nothing.","title":"Start tor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/start-tor/#starttor","text":"fun startTor(): Unit (source) Starts TorService . Does nothing if called prior to: Initializing TorServiceController.Builder by calling Builder.build You can call this as much as you want. If Tor is already on, it will do nothing.","title":"startTor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/stop-tor/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / stopTor stopTor \u00b6 fun stopTor(): Unit (source) Stops TorService . Does nothing if called prior to: Initializing TorServiceController.Builder by calling Builder.build Calling startTor","title":"Stop tor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/stop-tor/#stoptor","text":"fun stopTor(): Unit (source) Stops TorService . Does nothing if called prior to: Initializing TorServiceController.Builder by calling Builder.build Calling startTor","title":"stopTor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder Builder \u00b6 class Builder (source) The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. A note about the TorSettings you send this. Those are the default settings which TorService will fall back on if io.matthewnelson.topl_service.prefs.TorServicePrefs has nothing in it for that particular ServiceConsts .PrefKey. The settings get written to the torrc file every time Tor is started (I plan to make this less sledgehammer-ish in the future). To update settings while your application is running you need only to instantiate io.matthewnelson.topl_service.prefs.TorServicePrefs and save the data using the appropriately annotated method and ServiceConsts .PrefKey, then restart Tor (for now\u2026 ;-D). I plan to implement a android.content.SharedPreferences.OnSharedPreferenceChangeListener that will do this immediately for the settings that don\u2019t require a restart, but a stable release comes first). You can see how the TorSettings sent here are used in TorService by looking at io.matthewnelson.topl_service.onionproxy.ServiceTorSettings and TorService.initTOPLCore . // fun setupTorServices( // application: Application, // eventBroadcaster: EventBroadcaster, // torConfigFiles: TorConfigFiles // ) { TorServiceController . Builder ( application = application , buildConfigVersionCode = BuildConfig . VERSION_CODE , torSettings = App . myTorSettings , // These should live somewhere in your project application's assets directory geoipAssetPath = \"common/geoip\" , geoip6AssetPath = \"common/geoip6\" ) . setBuildConfigDebug ( BuildConfig . DEBUG ) . setEventBroadcaster ( eventBroadcaster ) . useCustomTorConfigFiles ( torConfigFiles ) // Notification customization . customizeNotification ( channelName = \"TorService Channel\" , channelDescription = \"Tor Channel\" , channelID = \"My Sample Application\" , notificationID = 615 ) . setActivityToBeOpenedOnTap ( clazz = MainActivity :: class . java , intentExtrasKey = null , intentExtras = null , intentRequestCode = null ) . setImageTorNetworkingEnabled ( R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( R . drawable . tor_stat_notifyerr ) . setCustomColor ( R . color . tor_service_white , colorizeBackground = true ) . setVisibility ( NotificationCompat . VISIBILITY_PRIVATE ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) // Will return a Builder object to continue with non-notification related options . applyNotificationSettings () . build () // } Parameters \u00b6 application - Application , for obtaining context. buildConfigVersionCode - send BuildConfig.VERSION_CODE . Mitigates copying of geoip files to app updates only. torSettings - TorSettings used to create your torrc file on start of Tor. geoipAssetPath - The path to where you have your geoip file located (ex: in assets/common directory, send this variable \u201ccommon/geoip\u201d). geoip6AssetPath - The path to where you have your geoip6 file located (ex: in assets/common directory, send this variable \u201ccommon/geoip6\u201d). Types \u00b6 Name Summary NotificationBuilder Where you get to customize how your foreground notification will look/function. Calling customizeNotification will return this class to you which provides methods specific to customization of notifications. Call applyNotificationSettings when done to return to Builder to continue with it\u2019s methods for customization. class NotificationBuilder Constructors \u00b6 Name Summary <init> The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. Builder(application: Application , buildConfigVersionCode: Int , torSettings: TorSettings , geoipAssetPath: String , geoip6AssetPath: String ) Functions \u00b6 Name Summary build Initializes TorService setup and enables the ability to call methods in the Companion object. fun build(): Unit customizeNotification Customize the service notification to your application. fun customizeNotification(channelName: String , channelID: String , channelDescription: String , notificationID: Short ): NotificationBuilder setBuildConfigDebug This makes it such that on your Application\u2019s Debug builds, the topl-core and topl-service modules will provide you with Logcat messages (when TorSettings.hasDebugLogs is enabled). fun setBuildConfigDebug(buildConfigDebug: Boolean ): Builder setEventBroadcaster Get broadcasts piped to your Application to do with them what you desire. What you send this will live at Companion.appEventBroadcaster for the remainder of your application\u2019s lifecycle to refer to elsewhere in your App. fun setEventBroadcaster(eventBroadcaster: EventBroadcaster ): Builder useCustomTorConfigFiles If you wish to customize the file structure of how Tor is installed in your app, you can do so by instantiating your own TorConfigFiles and customizing it via the TorConfigFiles.Builder , or overridden method TorConfigFiles.createConfig . fun useCustomTorConfigFiles(torConfigFiles: TorConfigFiles ): Builder","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#builder","text":"class Builder (source) The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. A note about the TorSettings you send this. Those are the default settings which TorService will fall back on if io.matthewnelson.topl_service.prefs.TorServicePrefs has nothing in it for that particular ServiceConsts .PrefKey. The settings get written to the torrc file every time Tor is started (I plan to make this less sledgehammer-ish in the future). To update settings while your application is running you need only to instantiate io.matthewnelson.topl_service.prefs.TorServicePrefs and save the data using the appropriately annotated method and ServiceConsts .PrefKey, then restart Tor (for now\u2026 ;-D). I plan to implement a android.content.SharedPreferences.OnSharedPreferenceChangeListener that will do this immediately for the settings that don\u2019t require a restart, but a stable release comes first). You can see how the TorSettings sent here are used in TorService by looking at io.matthewnelson.topl_service.onionproxy.ServiceTorSettings and TorService.initTOPLCore . // fun setupTorServices( // application: Application, // eventBroadcaster: EventBroadcaster, // torConfigFiles: TorConfigFiles // ) { TorServiceController . Builder ( application = application , buildConfigVersionCode = BuildConfig . VERSION_CODE , torSettings = App . myTorSettings , // These should live somewhere in your project application's assets directory geoipAssetPath = \"common/geoip\" , geoip6AssetPath = \"common/geoip6\" ) . setBuildConfigDebug ( BuildConfig . DEBUG ) . setEventBroadcaster ( eventBroadcaster ) . useCustomTorConfigFiles ( torConfigFiles ) // Notification customization . customizeNotification ( channelName = \"TorService Channel\" , channelDescription = \"Tor Channel\" , channelID = \"My Sample Application\" , notificationID = 615 ) . setActivityToBeOpenedOnTap ( clazz = MainActivity :: class . java , intentExtrasKey = null , intentExtras = null , intentRequestCode = null ) . setImageTorNetworkingEnabled ( R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( R . drawable . tor_stat_notifyerr ) . setCustomColor ( R . color . tor_service_white , colorizeBackground = true ) . setVisibility ( NotificationCompat . VISIBILITY_PRIVATE ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) // Will return a Builder object to continue with non-notification related options . applyNotificationSettings () . build () // }","title":"Builder"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#parameters","text":"application - Application , for obtaining context. buildConfigVersionCode - send BuildConfig.VERSION_CODE . Mitigates copying of geoip files to app updates only. torSettings - TorSettings used to create your torrc file on start of Tor. geoipAssetPath - The path to where you have your geoip file located (ex: in assets/common directory, send this variable \u201ccommon/geoip\u201d). geoip6AssetPath - The path to where you have your geoip6 file located (ex: in assets/common directory, send this variable \u201ccommon/geoip6\u201d).","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#types","text":"Name Summary NotificationBuilder Where you get to customize how your foreground notification will look/function. Calling customizeNotification will return this class to you which provides methods specific to customization of notifications. Call applyNotificationSettings when done to return to Builder to continue with it\u2019s methods for customization. class NotificationBuilder","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#constructors","text":"Name Summary <init> The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. Builder(application: Application , buildConfigVersionCode: Int , torSettings: TorSettings , geoipAssetPath: String , geoip6AssetPath: String )","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#functions","text":"Name Summary build Initializes TorService setup and enables the ability to call methods in the Companion object. fun build(): Unit customizeNotification Customize the service notification to your application. fun customizeNotification(channelName: String , channelID: String , channelDescription: String , notificationID: Short ): NotificationBuilder setBuildConfigDebug This makes it such that on your Application\u2019s Debug builds, the topl-core and topl-service modules will provide you with Logcat messages (when TorSettings.hasDebugLogs is enabled). fun setBuildConfigDebug(buildConfigDebug: Boolean ): Builder setEventBroadcaster Get broadcasts piped to your Application to do with them what you desire. What you send this will live at Companion.appEventBroadcaster for the remainder of your application\u2019s lifecycle to refer to elsewhere in your App. fun setEventBroadcaster(eventBroadcaster: EventBroadcaster ): Builder useCustomTorConfigFiles If you wish to customize the file structure of how Tor is installed in your app, you can do so by instantiating your own TorConfigFiles and customizing it via the TorConfigFiles.Builder , or overridden method TorConfigFiles.createConfig . fun useCustomTorConfigFiles(torConfigFiles: TorConfigFiles ): Builder","title":"Functions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-init-/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / <init> <init> \u00b6 Builder(application: Application , buildConfigVersionCode: Int , torSettings: TorSettings , geoipAssetPath: String , geoip6AssetPath: String ) The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. A note about the TorSettings you send this. Those are the default settings which TorService will fall back on if io.matthewnelson.topl_service.prefs.TorServicePrefs has nothing in it for that particular ServiceConsts .PrefKey. The settings get written to the torrc file every time Tor is started (I plan to make this less sledgehammer-ish in the future). To update settings while your application is running you need only to instantiate io.matthewnelson.topl_service.prefs.TorServicePrefs and save the data using the appropriately annotated method and ServiceConsts .PrefKey, then restart Tor (for now\u2026 ;-D). I plan to implement a android.content.SharedPreferences.OnSharedPreferenceChangeListener that will do this immediately for the settings that don\u2019t require a restart, but a stable release comes first). You can see how the TorSettings sent here are used in TorService by looking at io.matthewnelson.topl_service.onionproxy.ServiceTorSettings and TorService.initTOPLCore . // fun setupTorServices( // application: Application, // eventBroadcaster: EventBroadcaster, // torConfigFiles: TorConfigFiles // ) { TorServiceController . Builder ( application = application , buildConfigVersionCode = BuildConfig . VERSION_CODE , torSettings = App . myTorSettings , // These should live somewhere in your project application's assets directory geoipAssetPath = \"common/geoip\" , geoip6AssetPath = \"common/geoip6\" ) . setBuildConfigDebug ( BuildConfig . DEBUG ) . setEventBroadcaster ( eventBroadcaster ) . useCustomTorConfigFiles ( torConfigFiles ) // Notification customization . customizeNotification ( channelName = \"TorService Channel\" , channelDescription = \"Tor Channel\" , channelID = \"My Sample Application\" , notificationID = 615 ) . setActivityToBeOpenedOnTap ( clazz = MainActivity :: class . java , intentExtrasKey = null , intentExtras = null , intentRequestCode = null ) . setImageTorNetworkingEnabled ( R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( R . drawable . tor_stat_notifyerr ) . setCustomColor ( R . color . tor_service_white , colorizeBackground = true ) . setVisibility ( NotificationCompat . VISIBILITY_PRIVATE ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) // Will return a Builder object to continue with non-notification related options . applyNotificationSettings () . build () // } Parameters \u00b6 application - Application , for obtaining context. buildConfigVersionCode - send BuildConfig.VERSION_CODE . Mitigates copying of geoip files to app updates only. torSettings - TorSettings used to create your torrc file on start of Tor. geoipAssetPath - The path to where you have your geoip file located (ex: in assets/common directory, send this variable \u201ccommon/geoip\u201d). geoip6AssetPath - The path to where you have your geoip6 file located (ex: in assets/common directory, send this variable \u201ccommon/geoip6\u201d).","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-init-/#init","text":"Builder(application: Application , buildConfigVersionCode: Int , torSettings: TorSettings , geoipAssetPath: String , geoip6AssetPath: String ) The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. A note about the TorSettings you send this. Those are the default settings which TorService will fall back on if io.matthewnelson.topl_service.prefs.TorServicePrefs has nothing in it for that particular ServiceConsts .PrefKey. The settings get written to the torrc file every time Tor is started (I plan to make this less sledgehammer-ish in the future). To update settings while your application is running you need only to instantiate io.matthewnelson.topl_service.prefs.TorServicePrefs and save the data using the appropriately annotated method and ServiceConsts .PrefKey, then restart Tor (for now\u2026 ;-D). I plan to implement a android.content.SharedPreferences.OnSharedPreferenceChangeListener that will do this immediately for the settings that don\u2019t require a restart, but a stable release comes first). You can see how the TorSettings sent here are used in TorService by looking at io.matthewnelson.topl_service.onionproxy.ServiceTorSettings and TorService.initTOPLCore . // fun setupTorServices( // application: Application, // eventBroadcaster: EventBroadcaster, // torConfigFiles: TorConfigFiles // ) { TorServiceController . Builder ( application = application , buildConfigVersionCode = BuildConfig . VERSION_CODE , torSettings = App . myTorSettings , // These should live somewhere in your project application's assets directory geoipAssetPath = \"common/geoip\" , geoip6AssetPath = \"common/geoip6\" ) . setBuildConfigDebug ( BuildConfig . DEBUG ) . setEventBroadcaster ( eventBroadcaster ) . useCustomTorConfigFiles ( torConfigFiles ) // Notification customization . customizeNotification ( channelName = \"TorService Channel\" , channelDescription = \"Tor Channel\" , channelID = \"My Sample Application\" , notificationID = 615 ) . setActivityToBeOpenedOnTap ( clazz = MainActivity :: class . java , intentExtrasKey = null , intentExtras = null , intentRequestCode = null ) . setImageTorNetworkingEnabled ( R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( R . drawable . tor_stat_notifyerr ) . setCustomColor ( R . color . tor_service_white , colorizeBackground = true ) . setVisibility ( NotificationCompat . VISIBILITY_PRIVATE ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) // Will return a Builder object to continue with non-notification related options . applyNotificationSettings () . build () // }","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-init-/#parameters","text":"application - Application , for obtaining context. buildConfigVersionCode - send BuildConfig.VERSION_CODE . Mitigates copying of geoip files to app updates only. torSettings - TorSettings used to create your torrc file on start of Tor. geoipAssetPath - The path to where you have your geoip file located (ex: in assets/common directory, send this variable \u201ccommon/geoip\u201d). geoip6AssetPath - The path to where you have your geoip6 file located (ex: in assets/common directory, send this variable \u201ccommon/geoip6\u201d).","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/build/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / build build \u00b6 fun build(): Unit (source) Initializes TorService setup and enables the ability to call methods in the Companion object. See Builder for code samples.","title":"Build"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/build/#build","text":"fun build(): Unit (source) Initializes TorService setup and enables the ability to call methods in the Companion object. See Builder for code samples.","title":"build"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/customize-notification/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / customizeNotification customizeNotification \u00b6 fun customizeNotification(channelName: String , channelID: String , channelDescription: String , notificationID: Short ): NotificationBuilder (source) Customize the service notification to your application. See Builder for code samples. Parameters \u00b6 channelName - Your notification channel\u2019s name (cannot be empty). channelID - Your notification channel\u2019s ID (cannot be empty). channelDescription - Your notification channel\u2019s description (cannot be empty). notificationID - Your foreground notification\u2019s ID. Exceptions \u00b6 IllegalArgumentException - If String fields are empty. Return NotificationBuilder To obtain methods specific to notification customization.","title":"Customize notification"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/customize-notification/#customizenotification","text":"fun customizeNotification(channelName: String , channelID: String , channelDescription: String , notificationID: Short ): NotificationBuilder (source) Customize the service notification to your application. See Builder for code samples.","title":"customizeNotification"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/customize-notification/#parameters","text":"channelName - Your notification channel\u2019s name (cannot be empty). channelID - Your notification channel\u2019s ID (cannot be empty). channelDescription - Your notification channel\u2019s description (cannot be empty). notificationID - Your foreground notification\u2019s ID.","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/customize-notification/#exceptions","text":"IllegalArgumentException - If String fields are empty. Return NotificationBuilder To obtain methods specific to notification customization.","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-build-config-debug/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / setBuildConfigDebug setBuildConfigDebug \u00b6 fun setBuildConfigDebug(buildConfigDebug: Boolean ): Builder (source) This makes it such that on your Application\u2019s Debug builds, the topl-core and topl-service modules will provide you with Logcat messages (when TorSettings.hasDebugLogs is enabled). For your Release builds no Logcat messaging will be provided, but you will still get the same messages sent to your EventBroadcaster if you set it via Builder.setEventBroadcaster . TODO: Provide a link to gh-pages that discusses logging and how it work, it\u2019s pretty complex with everything that is going on. Parameters \u00b6 buildConfigDebug - Send BuildConfig.DEBUG See Also io.matthewnelson.topl_core.broadcaster.BroadcastLogger","title":"Set build config debug"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-build-config-debug/#setbuildconfigdebug","text":"fun setBuildConfigDebug(buildConfigDebug: Boolean ): Builder (source) This makes it such that on your Application\u2019s Debug builds, the topl-core and topl-service modules will provide you with Logcat messages (when TorSettings.hasDebugLogs is enabled). For your Release builds no Logcat messaging will be provided, but you will still get the same messages sent to your EventBroadcaster if you set it via Builder.setEventBroadcaster . TODO: Provide a link to gh-pages that discusses logging and how it work, it\u2019s pretty complex with everything that is going on.","title":"setBuildConfigDebug"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-build-config-debug/#parameters","text":"buildConfigDebug - Send BuildConfig.DEBUG See Also io.matthewnelson.topl_core.broadcaster.BroadcastLogger","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-event-broadcaster/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / setEventBroadcaster setEventBroadcaster \u00b6 fun setEventBroadcaster(eventBroadcaster: EventBroadcaster ): Builder (source) Get broadcasts piped to your Application to do with them what you desire. What you send this will live at Companion.appEventBroadcaster for the remainder of your application\u2019s lifecycle to refer to elsewhere in your App. NOTE: You will, ofc, have to cast Companion.appEventBroadcaster as whatever your class actually is.","title":"Set event broadcaster"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-event-broadcaster/#seteventbroadcaster","text":"fun setEventBroadcaster(eventBroadcaster: EventBroadcaster ): Builder (source) Get broadcasts piped to your Application to do with them what you desire. What you send this will live at Companion.appEventBroadcaster for the remainder of your application\u2019s lifecycle to refer to elsewhere in your App. NOTE: You will, ofc, have to cast Companion.appEventBroadcaster as whatever your class actually is.","title":"setEventBroadcaster"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/use-custom-tor-config-files/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / useCustomTorConfigFiles useCustomTorConfigFiles \u00b6 fun useCustomTorConfigFiles(torConfigFiles: TorConfigFiles ): Builder (source) If you wish to customize the file structure of how Tor is installed in your app, you can do so by instantiating your own TorConfigFiles and customizing it via the TorConfigFiles.Builder , or overridden method TorConfigFiles.createConfig . By default, TorService will call TorConfigFiles.createConfig using your Context.getApplicationContext to set up a standard directory hierarchy for Tor to operate with. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your project's src/main/jniLibs directory. If you are getting your // executable files via a dependency, be sure to consult that Libraries documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // } Return Builder See Also Builder.build","title":"Use custom tor config files"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/use-custom-tor-config-files/#usecustomtorconfigfiles","text":"fun useCustomTorConfigFiles(torConfigFiles: TorConfigFiles ): Builder (source) If you wish to customize the file structure of how Tor is installed in your app, you can do so by instantiating your own TorConfigFiles and customizing it via the TorConfigFiles.Builder , or overridden method TorConfigFiles.createConfig . By default, TorService will call TorConfigFiles.createConfig using your Context.getApplicationContext to set up a standard directory hierarchy for Tor to operate with. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your project's src/main/jniLibs directory. If you are getting your // executable files via a dependency, be sure to consult that Libraries documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // } Return Builder See Also Builder.build","title":"useCustomTorConfigFiles"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder NotificationBuilder \u00b6 class NotificationBuilder (source) Where you get to customize how your foreground notification will look/function. Calling customizeNotification will return this class to you which provides methods specific to customization of notifications. Call applyNotificationSettings when done to return to Builder to continue with it\u2019s methods for customization. See Builder for code samples. Parameters \u00b6 builder - Builder To return to it when calling applyNotificationSettings channelName - Your notification channel\u2019s name. channelID - Your notification channel\u2019s ID. channelDescription - Your notification channel\u2019s description. notificationID - Your foreground notification\u2019s ID. Constructors \u00b6 Name Summary <init> Where you get to customize how your foreground notification will look/function. Calling customizeNotification will return this class to you which provides methods specific to customization of notifications. Call applyNotificationSettings when done to return to Builder to continue with it\u2019s methods for customization. NotificationBuilder(builder: Builder, channelName: String , channelID: String , channelDescription: String , notificationID: Int ) Functions \u00b6 Name Summary applyNotificationSettings Initialize settings. fun applyNotificationSettings(): Builder enableTorRestartButton Disabled by Default fun enableTorRestartButton(enable: Boolean = true): NotificationBuilder enableTorStopButton Disabled by Default fun enableTorStopButton(enable: Boolean = true): NotificationBuilder setActivityToBeOpenedOnTap For when your user taps the TorService notification. fun setActivityToBeOpenedOnTap(clazz: Class <*>, intentExtrasKey: String ?, intentExtras: String ?, intentRequestCode: Int ?): NotificationBuilder setCustomColor Defaults to R.color.tor_service_white fun setCustomColor(colorRes: Int , colorizeBackground: Boolean ): NotificationBuilder setImageTorDataTransfer Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_dataxfer . fun setImageTorDataTransfer(drawableRes: Int ): NotificationBuilder setImageTorErrors Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_notifyerr . fun setImageTorErrors(drawableRes: Int ): NotificationBuilder setImageTorNetworkingDisabled Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_disabled . fun setImageTorNetworkingDisabled(drawableRes: Int ): NotificationBuilder setImageTorNetworkingEnabled Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_enabled . fun setImageTorNetworkingEnabled(drawableRes: Int ): NotificationBuilder setVisibility Defaults to NotificationVisibility.VISIBILITY_SECRET fun setVisibility(visibility: Int ): NotificationBuilder","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/#notificationbuilder","text":"class NotificationBuilder (source) Where you get to customize how your foreground notification will look/function. Calling customizeNotification will return this class to you which provides methods specific to customization of notifications. Call applyNotificationSettings when done to return to Builder to continue with it\u2019s methods for customization. See Builder for code samples.","title":"NotificationBuilder"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/#parameters","text":"builder - Builder To return to it when calling applyNotificationSettings channelName - Your notification channel\u2019s name. channelID - Your notification channel\u2019s ID. channelDescription - Your notification channel\u2019s description. notificationID - Your foreground notification\u2019s ID.","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/#constructors","text":"Name Summary <init> Where you get to customize how your foreground notification will look/function. Calling customizeNotification will return this class to you which provides methods specific to customization of notifications. Call applyNotificationSettings when done to return to Builder to continue with it\u2019s methods for customization. NotificationBuilder(builder: Builder, channelName: String , channelID: String , channelDescription: String , notificationID: Int )","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/#functions","text":"Name Summary applyNotificationSettings Initialize settings. fun applyNotificationSettings(): Builder enableTorRestartButton Disabled by Default fun enableTorRestartButton(enable: Boolean = true): NotificationBuilder enableTorStopButton Disabled by Default fun enableTorStopButton(enable: Boolean = true): NotificationBuilder setActivityToBeOpenedOnTap For when your user taps the TorService notification. fun setActivityToBeOpenedOnTap(clazz: Class <*>, intentExtrasKey: String ?, intentExtras: String ?, intentRequestCode: Int ?): NotificationBuilder setCustomColor Defaults to R.color.tor_service_white fun setCustomColor(colorRes: Int , colorizeBackground: Boolean ): NotificationBuilder setImageTorDataTransfer Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_dataxfer . fun setImageTorDataTransfer(drawableRes: Int ): NotificationBuilder setImageTorErrors Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_notifyerr . fun setImageTorErrors(drawableRes: Int ): NotificationBuilder setImageTorNetworkingDisabled Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_disabled . fun setImageTorNetworkingDisabled(drawableRes: Int ): NotificationBuilder setImageTorNetworkingEnabled Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_enabled . fun setImageTorNetworkingEnabled(drawableRes: Int ): NotificationBuilder setVisibility Defaults to NotificationVisibility.VISIBILITY_SECRET fun setVisibility(visibility: Int ): NotificationBuilder","title":"Functions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/-init-/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / <init> <init> \u00b6 NotificationBuilder(builder: Builder, channelName: String , channelID: String , channelDescription: String , notificationID: Int ) Where you get to customize how your foreground notification will look/function. Calling customizeNotification will return this class to you which provides methods specific to customization of notifications. Call applyNotificationSettings when done to return to Builder to continue with it\u2019s methods for customization. See Builder for code samples. Parameters \u00b6 builder - Builder To return to it when calling applyNotificationSettings channelName - Your notification channel\u2019s name. channelID - Your notification channel\u2019s ID. channelDescription - Your notification channel\u2019s description. notificationID - Your foreground notification\u2019s ID.","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/-init-/#init","text":"NotificationBuilder(builder: Builder, channelName: String , channelID: String , channelDescription: String , notificationID: Int ) Where you get to customize how your foreground notification will look/function. Calling customizeNotification will return this class to you which provides methods specific to customization of notifications. Call applyNotificationSettings when done to return to Builder to continue with it\u2019s methods for customization. See Builder for code samples.","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/-init-/#parameters","text":"builder - Builder To return to it when calling applyNotificationSettings channelName - Your notification channel\u2019s name. channelID - Your notification channel\u2019s ID. channelDescription - Your notification channel\u2019s description. notificationID - Your foreground notification\u2019s ID.","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/apply-notification-settings/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / applyNotificationSettings applyNotificationSettings \u00b6 fun applyNotificationSettings(): Builder (source) Initialize settings. See Builder for code samples. Return Builder","title":"Apply notification settings"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/apply-notification-settings/#applynotificationsettings","text":"fun applyNotificationSettings(): Builder (source) Initialize settings. See Builder for code samples. Return Builder","title":"applyNotificationSettings"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/enable-tor-restart-button/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / enableTorRestartButton enableTorRestartButton \u00b6 fun enableTorRestartButton(enable: Boolean = true): NotificationBuilder (source) Disabled by Default Enable on the notification the ability to restart Tor. See Builder for code samples. Parameters \u00b6 enable - Boolean, automatically set to true but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired). Return NotificationBuilder","title":"Enable tor restart button"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/enable-tor-restart-button/#enabletorrestartbutton","text":"fun enableTorRestartButton(enable: Boolean = true): NotificationBuilder (source) Disabled by Default Enable on the notification the ability to restart Tor. See Builder for code samples.","title":"enableTorRestartButton"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/enable-tor-restart-button/#parameters","text":"enable - Boolean, automatically set to true but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired). Return NotificationBuilder","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/enable-tor-stop-button/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / enableTorStopButton enableTorStopButton \u00b6 fun enableTorStopButton(enable: Boolean = true): NotificationBuilder (source) Disabled by Default Enable on the notification the ability to stop Tor. See Builder for code samples. Parameters \u00b6 enable - Boolean, automatically set to true but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired). Return NotificationBuilder","title":"Enable tor stop button"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/enable-tor-stop-button/#enabletorstopbutton","text":"fun enableTorStopButton(enable: Boolean = true): NotificationBuilder (source) Disabled by Default Enable on the notification the ability to stop Tor. See Builder for code samples.","title":"enableTorStopButton"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/enable-tor-stop-button/#parameters","text":"enable - Boolean, automatically set to true but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired). Return NotificationBuilder","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-activity-to-be-opened-on-tap/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / setActivityToBeOpenedOnTap setActivityToBeOpenedOnTap \u00b6 fun setActivityToBeOpenedOnTap(clazz: Class <*>, intentExtrasKey: String ?, intentExtras: String ?, intentRequestCode: Int ?): NotificationBuilder (source) For when your user taps the TorService notification. See Builder for code samples. Parameters \u00b6 clazz - The Activity to be opened when tapped. intentExtrasKey - ? The key for if you with to add extras in the PendingIntent. intentExtras - ? The extras that will be sent in the PendingIntent. intentRequestCode - ? The request code - Defaults to 0 if not set.","title":"Set activity to be opened on tap"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-activity-to-be-opened-on-tap/#setactivitytobeopenedontap","text":"fun setActivityToBeOpenedOnTap(clazz: Class <*>, intentExtrasKey: String ?, intentExtras: String ?, intentRequestCode: Int ?): NotificationBuilder (source) For when your user taps the TorService notification. See Builder for code samples.","title":"setActivityToBeOpenedOnTap"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-activity-to-be-opened-on-tap/#parameters","text":"clazz - The Activity to be opened when tapped. intentExtrasKey - ? The key for if you with to add extras in the PendingIntent. intentExtras - ? The extras that will be sent in the PendingIntent. intentRequestCode - ? The request code - Defaults to 0 if not set.","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-custom-color/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / setCustomColor setCustomColor \u00b6 fun setCustomColor(@ColorRes colorRes: Int , colorizeBackground: Boolean ): NotificationBuilder (source) Defaults to R.color.tor_service_white The color you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.ENABLED . Note that if colorizeBackground is being passed a value of true , the notification will always be that color where as if it is passed false , the icon & action button colors will change with Tor\u2019s network state. See Builder for code samples. Parameters \u00b6 colorRes - Color resource id. colorizeBackground - true = background is colorized, false = icon is colorized Return NotificationBuilder","title":"Set custom color"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-custom-color/#setcustomcolor","text":"fun setCustomColor(@ColorRes colorRes: Int , colorizeBackground: Boolean ): NotificationBuilder (source) Defaults to R.color.tor_service_white The color you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.ENABLED . Note that if colorizeBackground is being passed a value of true , the notification will always be that color where as if it is passed false , the icon & action button colors will change with Tor\u2019s network state. See Builder for code samples.","title":"setCustomColor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-custom-color/#parameters","text":"colorRes - Color resource id. colorizeBackground - true = background is colorized, false = icon is colorized Return NotificationBuilder","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-data-transfer/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / setImageTorDataTransfer setImageTorDataTransfer \u00b6 fun setImageTorDataTransfer(@DrawableRes drawableRes: Int ): NotificationBuilder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_dataxfer . The small icon you wish to display when bandwidth is being used. See Builder for code samples. Parameters \u00b6 drawableRes - Drawable resource id. Return NotificationBuilder","title":"Set image tor data transfer"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-data-transfer/#setimagetordatatransfer","text":"fun setImageTorDataTransfer(@DrawableRes drawableRes: Int ): NotificationBuilder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_dataxfer . The small icon you wish to display when bandwidth is being used. See Builder for code samples.","title":"setImageTorDataTransfer"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-data-transfer/#parameters","text":"drawableRes - Drawable resource id. Return NotificationBuilder","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-errors/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / setImageTorErrors setImageTorErrors \u00b6 fun setImageTorErrors(@DrawableRes drawableRes: Int ): NotificationBuilder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_notifyerr . The small icon you wish to display when Tor is having problems. See Builder for code samples. Parameters \u00b6 drawableRes - Drawable resource id. Return NotificationBuilder","title":"Set image tor errors"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-errors/#setimagetorerrors","text":"fun setImageTorErrors(@DrawableRes drawableRes: Int ): NotificationBuilder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_notifyerr . The small icon you wish to display when Tor is having problems. See Builder for code samples.","title":"setImageTorErrors"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-errors/#parameters","text":"drawableRes - Drawable resource id. Return NotificationBuilder","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-networking-disabled/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / setImageTorNetworkingDisabled setImageTorNetworkingDisabled \u00b6 fun setImageTorNetworkingDisabled(@DrawableRes drawableRes: Int ): NotificationBuilder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_disabled . The small icon you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.DISABLED . See Builder for code samples. Parameters \u00b6 drawableRes - Drawable resource id. Return NotificationBuilder","title":"Set image tor networking disabled"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-networking-disabled/#setimagetornetworkingdisabled","text":"fun setImageTorNetworkingDisabled(@DrawableRes drawableRes: Int ): NotificationBuilder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_disabled . The small icon you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.DISABLED . See Builder for code samples.","title":"setImageTorNetworkingDisabled"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-networking-disabled/#parameters","text":"drawableRes - Drawable resource id. Return NotificationBuilder","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-networking-enabled/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / setImageTorNetworkingEnabled setImageTorNetworkingEnabled \u00b6 fun setImageTorNetworkingEnabled(@DrawableRes drawableRes: Int ): NotificationBuilder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_enabled . The small icon you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.ENABLED . See Builder for code samples. Parameters \u00b6 drawableRes - Drawable resource id. Return NotificationBuilder","title":"Set image tor networking enabled"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-networking-enabled/#setimagetornetworkingenabled","text":"fun setImageTorNetworkingEnabled(@DrawableRes drawableRes: Int ): NotificationBuilder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_enabled . The small icon you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.ENABLED . See Builder for code samples.","title":"setImageTorNetworkingEnabled"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-image-tor-networking-enabled/#parameters","text":"drawableRes - Drawable resource id. Return NotificationBuilder","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-visibility/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / NotificationBuilder / setVisibility setVisibility \u00b6 fun setVisibility(visibility: Int ): NotificationBuilder (source) Defaults to NotificationVisibility.VISIBILITY_SECRET The visibility of your notification on the user\u2019s lock screen. See Builder for code samples. Return NotificationBuilder","title":"Set visibility"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-notification-builder/set-visibility/#setvisibility","text":"fun setVisibility(visibility: Int ): NotificationBuilder (source) Defaults to NotificationVisibility.VISIBILITY_SECRET The visibility of your notification on the user\u2019s lock screen. See Builder for code samples. Return NotificationBuilder","title":"setVisibility"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/","text":"topl-service / io.matthewnelson.topl_service.prefs Package io.matthewnelson.topl_service.prefs \u00b6 Types \u00b6 Name Summary TorServicePrefs This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. class TorServicePrefs : ServiceConsts","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/#package-iomatthewnelsontopl_serviceprefs","text":"","title":"Package io.matthewnelson.topl_service.prefs"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/#types","text":"Name Summary TorServicePrefs This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. class TorServicePrefs : ServiceConsts","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs TorServicePrefs \u00b6 class TorServicePrefs : ServiceConsts (source) This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. See io.matthewnelson.topl_service.onionproxy.ServiceTorSettings Constructors \u00b6 Name Summary <init> This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. TorServicePrefs(context: Context ) Functions \u00b6 Name Summary contains Checks if the SharedPreference contains a value for the supplied prefsKey . Accepts the following annotation type String values: fun contains(prefsKey: String ): Boolean getBoolean Returns a Boolean value for the provided ServiceConsts.PrefKeyBoolean . If no value is stored in the SharedPreference, defValue will be returned. fun getBoolean(booleanKey: String , defValue: Boolean ): Boolean getInt Returns an Int value for the provided ServiceConsts.PrefKeyInt . If no value is stored in the SharedPreference, defValue will be returned. fun getInt(intKey: String , defValue: Int ?): Int ? getList Returns a List of Strings for the provided ServiceConsts.PrefKeyList . If no value is stored in the SharedPreference, defValue will be returned. fun getList(listKey: String , defValue: List < String >): List < String > getString Returns a String value for the provided ServiceConsts.PrefKeyString . If no value is stored in the SharedPreference, defValue will be returned. fun getString(stringKey: String , defValue: String ?): String ? putBoolean Inserts a Boolean value into the SharedPreference for the supplied booleanKey . fun putBoolean(booleanKey: String , value: Boolean ): Unit putInt Inserts an Int value into the SharedPreference for the supplied intKey . fun putInt(intKey: String , value: Int ?): Unit putList Inserts a List of Strings as a comma separated String into the SharedPreference for the supplied listKey . fun putList(listKey: String , value: List < String >): Unit putString Inserts a String value into the SharedPreference for the supplied stringKey . fun putString(stringKey: String , value: String ?): Unit registerListener Registers a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference fun registerListener(listener: OnSharedPreferenceChangeListener ): Unit remove Removes from the SharedPreference the value associated with prefsKey if there is one. Accepts the following annotation type String values: fun remove(prefsKey: String ): Unit unregisterListener Unregisters a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference fun unregisterListener(listener: OnSharedPreferenceChangeListener ): Unit Companion Object Properties \u00b6 Name Summary NULL_INT_VALUE const val NULL_INT_VALUE: Int NULL_STRING_VALUE const val NULL_STRING_VALUE: String TOR_SERVICE_PREFS_NAME const val TOR_SERVICE_PREFS_NAME: String","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/#torserviceprefs","text":"class TorServicePrefs : ServiceConsts (source) This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. See io.matthewnelson.topl_service.onionproxy.ServiceTorSettings","title":"TorServicePrefs"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/#constructors","text":"Name Summary <init> This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. TorServicePrefs(context: Context )","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/#functions","text":"Name Summary contains Checks if the SharedPreference contains a value for the supplied prefsKey . Accepts the following annotation type String values: fun contains(prefsKey: String ): Boolean getBoolean Returns a Boolean value for the provided ServiceConsts.PrefKeyBoolean . If no value is stored in the SharedPreference, defValue will be returned. fun getBoolean(booleanKey: String , defValue: Boolean ): Boolean getInt Returns an Int value for the provided ServiceConsts.PrefKeyInt . If no value is stored in the SharedPreference, defValue will be returned. fun getInt(intKey: String , defValue: Int ?): Int ? getList Returns a List of Strings for the provided ServiceConsts.PrefKeyList . If no value is stored in the SharedPreference, defValue will be returned. fun getList(listKey: String , defValue: List < String >): List < String > getString Returns a String value for the provided ServiceConsts.PrefKeyString . If no value is stored in the SharedPreference, defValue will be returned. fun getString(stringKey: String , defValue: String ?): String ? putBoolean Inserts a Boolean value into the SharedPreference for the supplied booleanKey . fun putBoolean(booleanKey: String , value: Boolean ): Unit putInt Inserts an Int value into the SharedPreference for the supplied intKey . fun putInt(intKey: String , value: Int ?): Unit putList Inserts a List of Strings as a comma separated String into the SharedPreference for the supplied listKey . fun putList(listKey: String , value: List < String >): Unit putString Inserts a String value into the SharedPreference for the supplied stringKey . fun putString(stringKey: String , value: String ?): Unit registerListener Registers a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference fun registerListener(listener: OnSharedPreferenceChangeListener ): Unit remove Removes from the SharedPreference the value associated with prefsKey if there is one. Accepts the following annotation type String values: fun remove(prefsKey: String ): Unit unregisterListener Unregisters a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference fun unregisterListener(listener: OnSharedPreferenceChangeListener ): Unit","title":"Functions"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/#companion-object-properties","text":"Name Summary NULL_INT_VALUE const val NULL_INT_VALUE: Int NULL_STRING_VALUE const val NULL_STRING_VALUE: String TOR_SERVICE_PREFS_NAME const val TOR_SERVICE_PREFS_NAME: String","title":"Companion Object Properties"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/-init-/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / <init> <init> \u00b6 TorServicePrefs(context: Context ) This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. See io.matthewnelson.topl_service.onionproxy.ServiceTorSettings","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/-init-/#init","text":"TorServicePrefs(context: Context ) This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. See io.matthewnelson.topl_service.onionproxy.ServiceTorSettings","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/-n-u-l-l_-i-n-t_-v-a-l-u-e/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / NULL_INT_VALUE NULL_INT_VALUE \u00b6 const val NULL_INT_VALUE: Int (source)","title":" n u l l  i n t  v a l u e"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/-n-u-l-l_-i-n-t_-v-a-l-u-e/#null_int_value","text":"const val NULL_INT_VALUE: Int (source)","title":"NULL_INT_VALUE"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/-n-u-l-l_-s-t-r-i-n-g_-v-a-l-u-e/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / NULL_STRING_VALUE NULL_STRING_VALUE \u00b6 const val NULL_STRING_VALUE: String (source)","title":" n u l l  s t r i n g  v a l u e"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/-n-u-l-l_-s-t-r-i-n-g_-v-a-l-u-e/#null_string_value","text":"const val NULL_STRING_VALUE: String (source)","title":"NULL_STRING_VALUE"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/-t-o-r_-s-e-r-v-i-c-e_-p-r-e-f-s_-n-a-m-e/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / TOR_SERVICE_PREFS_NAME TOR_SERVICE_PREFS_NAME \u00b6 const val TOR_SERVICE_PREFS_NAME: String (source)","title":" t o r  s e r v i c e  p r e f s  n a m e"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/-t-o-r_-s-e-r-v-i-c-e_-p-r-e-f-s_-n-a-m-e/#tor_service_prefs_name","text":"const val TOR_SERVICE_PREFS_NAME: String (source)","title":"TOR_SERVICE_PREFS_NAME"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/contains/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / contains contains \u00b6 fun contains(prefsKey: String ): Boolean (source) Checks if the SharedPreference contains a value for the supplied prefsKey . Accepts the following annotation type String values: ServiceConsts.PrefKeyBoolean ServiceConsts.PrefKeyInt ServiceConsts.PrefKeyList ServiceConsts.PrefKeyString Parameters \u00b6 prefsKey - String of type ServiceConsts.PrefKey* Return True if the SharedPreference contains a value for the associated prefsKey , false if not","title":"Contains"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/contains/#contains","text":"fun contains(prefsKey: String ): Boolean (source) Checks if the SharedPreference contains a value for the supplied prefsKey . Accepts the following annotation type String values: ServiceConsts.PrefKeyBoolean ServiceConsts.PrefKeyInt ServiceConsts.PrefKeyList ServiceConsts.PrefKeyString","title":"contains"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/contains/#parameters","text":"prefsKey - String of type ServiceConsts.PrefKey* Return True if the SharedPreference contains a value for the associated prefsKey , false if not","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-boolean/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / getBoolean getBoolean \u00b6 fun getBoolean(booleanKey: String , defValue: Boolean ): Boolean (source) Returns a Boolean value for the provided ServiceConsts.PrefKeyBoolean . If no value is stored in the SharedPreference, defValue will be returned. Parameters \u00b6 booleanKey - String of type ServiceConsts.PrefKeyBoolean defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the booleanKey . Return The Boolean value associated with the booleanKey , otherwise defValue","title":"Get boolean"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-boolean/#getboolean","text":"fun getBoolean(booleanKey: String , defValue: Boolean ): Boolean (source) Returns a Boolean value for the provided ServiceConsts.PrefKeyBoolean . If no value is stored in the SharedPreference, defValue will be returned.","title":"getBoolean"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-boolean/#parameters","text":"booleanKey - String of type ServiceConsts.PrefKeyBoolean defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the booleanKey . Return The Boolean value associated with the booleanKey , otherwise defValue","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-int/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / getInt getInt \u00b6 fun getInt(intKey: String , defValue: Int ?): Int ? (source) Returns an Int value for the provided ServiceConsts.PrefKeyInt . If no value is stored in the SharedPreference, defValue will be returned. Parameters \u00b6 intKey - String of type ServiceConsts.PrefKeyInt defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the intKey . Return The Int value associated with intKey , otherwise defValue","title":"Get int"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-int/#getint","text":"fun getInt(intKey: String , defValue: Int ?): Int ? (source) Returns an Int value for the provided ServiceConsts.PrefKeyInt . If no value is stored in the SharedPreference, defValue will be returned.","title":"getInt"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-int/#parameters","text":"intKey - String of type ServiceConsts.PrefKeyInt defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the intKey . Return The Int value associated with intKey , otherwise defValue","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-list/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / getList getList \u00b6 fun getList(listKey: String , defValue: List < String >): List < String > (source) Returns a List of Strings for the provided ServiceConsts.PrefKeyList . If no value is stored in the SharedPreference, defValue will be returned. Parameters \u00b6 listKey - String of type ServiceConsts.PrefKeyList defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the listKey . Return The List of Strings associated with the listKey , otherwise defValue","title":"Get list"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-list/#getlist","text":"fun getList(listKey: String , defValue: List < String >): List < String > (source) Returns a List of Strings for the provided ServiceConsts.PrefKeyList . If no value is stored in the SharedPreference, defValue will be returned.","title":"getList"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-list/#parameters","text":"listKey - String of type ServiceConsts.PrefKeyList defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the listKey . Return The List of Strings associated with the listKey , otherwise defValue","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-string/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / getString getString \u00b6 fun getString(stringKey: String , defValue: String ?): String ? (source) Returns a String value for the provided ServiceConsts.PrefKeyString . If no value is stored in the SharedPreference, defValue will be returned. Parameters \u00b6 stringKey - String of type ServiceConsts.PrefKeyString defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the stringKey . Return The String value associated with stringKey , otherwise defValue","title":"Get string"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-string/#getstring","text":"fun getString(stringKey: String , defValue: String ?): String ? (source) Returns a String value for the provided ServiceConsts.PrefKeyString . If no value is stored in the SharedPreference, defValue will be returned.","title":"getString"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/get-string/#parameters","text":"stringKey - String of type ServiceConsts.PrefKeyString defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the stringKey . Return The String value associated with stringKey , otherwise defValue","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-boolean/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / putBoolean putBoolean \u00b6 fun putBoolean(booleanKey: String , value: Boolean ): Unit (source) Inserts a Boolean value into the SharedPreference for the supplied booleanKey . Parameters \u00b6 booleanKey - String of type ServiceConsts.PrefKeyBoolean value - Your Boolean value","title":"Put boolean"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-boolean/#putboolean","text":"fun putBoolean(booleanKey: String , value: Boolean ): Unit (source) Inserts a Boolean value into the SharedPreference for the supplied booleanKey .","title":"putBoolean"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-boolean/#parameters","text":"booleanKey - String of type ServiceConsts.PrefKeyBoolean value - Your Boolean value","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-int/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / putInt putInt \u00b6 fun putInt(intKey: String , value: Int ?): Unit (source) Inserts an Int value into the SharedPreference for the supplied intKey . Parameters \u00b6 intKey - String of type ServiceConsts.PrefKeyInt value - Your Int? value","title":"Put int"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-int/#putint","text":"fun putInt(intKey: String , value: Int ?): Unit (source) Inserts an Int value into the SharedPreference for the supplied intKey .","title":"putInt"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-int/#parameters","text":"intKey - String of type ServiceConsts.PrefKeyInt value - Your Int? value","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-list/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / putList putList \u00b6 fun putList(listKey: String , value: List < String >): Unit (source) Inserts a List of Strings as a comma separated String into the SharedPreference for the supplied listKey . Parameters \u00b6 listKey - String of type ServiceConsts.PrefKeyList value - Your List value","title":"Put list"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-list/#putlist","text":"fun putList(listKey: String , value: List < String >): Unit (source) Inserts a List of Strings as a comma separated String into the SharedPreference for the supplied listKey .","title":"putList"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-list/#parameters","text":"listKey - String of type ServiceConsts.PrefKeyList value - Your List value","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-string/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / putString putString \u00b6 fun putString(stringKey: String , value: String ?): Unit (source) Inserts a String value into the SharedPreference for the supplied stringKey . Parameters \u00b6 stringKey - String of type ServiceConsts.PrefKeyString value - Your String value","title":"Put string"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-string/#putstring","text":"fun putString(stringKey: String , value: String ?): Unit (source) Inserts a String value into the SharedPreference for the supplied stringKey .","title":"putString"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/put-string/#parameters","text":"stringKey - String of type ServiceConsts.PrefKeyString value - Your String value","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/register-listener/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / registerListener registerListener \u00b6 fun registerListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Registers a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference","title":"Register listener"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/register-listener/#registerlistener","text":"fun registerListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Registers a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference","title":"registerListener"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/remove/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / remove remove \u00b6 fun remove(prefsKey: String ): Unit (source) Removes from the SharedPreference the value associated with prefsKey if there is one. Accepts the following annotation type String values: ServiceConsts.PrefKeyBoolean ServiceConsts.PrefKeyInt ServiceConsts.PrefKeyList ServiceConsts.PrefKeyString Parameters \u00b6 prefsKey - String of type ServiceConsts.PrefKey*","title":"Remove"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/remove/#remove","text":"fun remove(prefsKey: String ): Unit (source) Removes from the SharedPreference the value associated with prefsKey if there is one. Accepts the following annotation type String values: ServiceConsts.PrefKeyBoolean ServiceConsts.PrefKeyInt ServiceConsts.PrefKeyList ServiceConsts.PrefKeyString","title":"remove"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/remove/#parameters","text":"prefsKey - String of type ServiceConsts.PrefKey*","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/unregister-listener/","text":"topl-service / io.matthewnelson.topl_service.prefs / TorServicePrefs / unregisterListener unregisterListener \u00b6 fun unregisterListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Unregisters a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference","title":"Unregister listener"},{"location":"topl-service/io.matthewnelson.topl_service.prefs/-tor-service-prefs/unregister-listener/#unregisterlistener","text":"fun unregisterListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Unregisters a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference","title":"unregisterListener"},{"location":"topl-service/io.matthewnelson.topl_service.util/","text":"topl-service / io.matthewnelson.topl_service.util Package io.matthewnelson.topl_service.util \u00b6 Types \u00b6 Name Summary ServiceConsts abstract class ServiceConsts : BaseConsts ServiceUtilities object ServiceUtilities","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/#package-iomatthewnelsontopl_serviceutil","text":"","title":"Package io.matthewnelson.topl_service.util"},{"location":"topl-service/io.matthewnelson.topl_service.util/#types","text":"Name Summary ServiceConsts abstract class ServiceConsts : BaseConsts ServiceUtilities object ServiceUtilities","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts ServiceConsts \u00b6 abstract class ServiceConsts : BaseConsts (source) Annotations \u00b6 Name Summary PrefKeyBoolean annotation class PrefKeyBoolean PrefKeyInt annotation class PrefKeyInt PrefKeyList annotation class PrefKeyList PrefKeyString annotation class PrefKeyString Constructors \u00b6 Name Summary <init> ServiceConsts() Inheritors \u00b6 Name Summary TorServiceController class TorServiceController : ServiceConsts TorServicePrefs This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. class TorServicePrefs : ServiceConsts","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/#serviceconsts","text":"abstract class ServiceConsts : BaseConsts (source)","title":"ServiceConsts"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/#annotations","text":"Name Summary PrefKeyBoolean annotation class PrefKeyBoolean PrefKeyInt annotation class PrefKeyInt PrefKeyList annotation class PrefKeyList PrefKeyString annotation class PrefKeyString","title":"Annotations"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/#constructors","text":"Name Summary <init> ServiceConsts()","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/#inheritors","text":"Name Summary TorServiceController class TorServiceController : ServiceConsts TorServicePrefs This class provides a standardized way for library users to change settings used by io.matthewnelson.topl_service.service.TorService such that the values expressed as default io.matthewnelson.topl_core_base.TorSettings when initializing things via the io.matthewnelson.topl_service.TorServiceController.Builder can be updated. The values saved to TorServicePrefs are always preferred over the defaults declared. class TorServicePrefs : ServiceConsts","title":"Inheritors"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-init-/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / <init> <init> \u00b6 ServiceConsts()","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-init-/#init","text":"ServiceConsts()","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean PrefKeyBoolean \u00b6 annotation class PrefKeyBoolean (source) Constructors \u00b6 Name Summary <init> PrefKeyBoolean() Companion Object Properties \u00b6 Name Summary DISABLE_NETWORK const val DISABLE_NETWORK: String HAS_BRIDGES const val HAS_BRIDGES: String HAS_COOKIE_AUTHENTICATION const val HAS_COOKIE_AUTHENTICATION: String HAS_DEBUG_LOGS const val HAS_DEBUG_LOGS: String HAS_DORMANT_CANCELED_BY_STARTUP const val HAS_DORMANT_CANCELED_BY_STARTUP: String HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL const val HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL: String HAS_OPEN_PROXY_ON_ALL_INTERFACES const val HAS_OPEN_PROXY_ON_ALL_INTERFACES: String HAS_REACHABLE_ADDRESS const val HAS_REACHABLE_ADDRESS: String HAS_REDUCED_CONNECTION_PADDING const val HAS_REDUCED_CONNECTION_PADDING: String HAS_SAFE_SOCKS const val HAS_SAFE_SOCKS: String HAS_STRICT_NODES const val HAS_STRICT_NODES: String HAS_TEST_SOCKS const val HAS_TEST_SOCKS: String IS_AUTO_MAP_HOSTS_ON_RESOLVE const val IS_AUTO_MAP_HOSTS_ON_RESOLVE: String IS_RELAY const val IS_RELAY: String RUN_AS_DAEMON const val RUN_AS_DAEMON: String USE_SOCKS5 const val USE_SOCKS5: String","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/#prefkeyboolean","text":"annotation class PrefKeyBoolean (source)","title":"PrefKeyBoolean"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/#constructors","text":"Name Summary <init> PrefKeyBoolean()","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/#companion-object-properties","text":"Name Summary DISABLE_NETWORK const val DISABLE_NETWORK: String HAS_BRIDGES const val HAS_BRIDGES: String HAS_COOKIE_AUTHENTICATION const val HAS_COOKIE_AUTHENTICATION: String HAS_DEBUG_LOGS const val HAS_DEBUG_LOGS: String HAS_DORMANT_CANCELED_BY_STARTUP const val HAS_DORMANT_CANCELED_BY_STARTUP: String HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL const val HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL: String HAS_OPEN_PROXY_ON_ALL_INTERFACES const val HAS_OPEN_PROXY_ON_ALL_INTERFACES: String HAS_REACHABLE_ADDRESS const val HAS_REACHABLE_ADDRESS: String HAS_REDUCED_CONNECTION_PADDING const val HAS_REDUCED_CONNECTION_PADDING: String HAS_SAFE_SOCKS const val HAS_SAFE_SOCKS: String HAS_STRICT_NODES const val HAS_STRICT_NODES: String HAS_TEST_SOCKS const val HAS_TEST_SOCKS: String IS_AUTO_MAP_HOSTS_ON_RESOLVE const val IS_AUTO_MAP_HOSTS_ON_RESOLVE: String IS_RELAY const val IS_RELAY: String RUN_AS_DAEMON const val RUN_AS_DAEMON: String USE_SOCKS5 const val USE_SOCKS5: String","title":"Companion Object Properties"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / DISABLE_NETWORK DISABLE_NETWORK \u00b6 const val DISABLE_NETWORK: String (source)","title":" d i s a b l e  n e t w o r k"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/#disable_network","text":"const val DISABLE_NETWORK: String (source)","title":"DISABLE_NETWORK"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-b-r-i-d-g-e-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_BRIDGES HAS_BRIDGES \u00b6 const val HAS_BRIDGES: String (source)","title":" h a s  b r i d g e s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-b-r-i-d-g-e-s/#has_bridges","text":"const val HAS_BRIDGES: String (source)","title":"HAS_BRIDGES"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-c-o-o-k-i-e_-a-u-t-h-e-n-t-i-c-a-t-i-o-n/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_COOKIE_AUTHENTICATION HAS_COOKIE_AUTHENTICATION \u00b6 const val HAS_COOKIE_AUTHENTICATION: String (source)","title":" h a s  c o o k i e  a u t h e n t i c a t i o n"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-c-o-o-k-i-e_-a-u-t-h-e-n-t-i-c-a-t-i-o-n/#has_cookie_authentication","text":"const val HAS_COOKIE_AUTHENTICATION: String (source)","title":"HAS_COOKIE_AUTHENTICATION"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-d-e-b-u-g_-l-o-g-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_DEBUG_LOGS HAS_DEBUG_LOGS \u00b6 const val HAS_DEBUG_LOGS: String (source)","title":" h a s  d e b u g  l o g s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-d-e-b-u-g_-l-o-g-s/#has_debug_logs","text":"const val HAS_DEBUG_LOGS: String (source)","title":"HAS_DEBUG_LOGS"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-d-o-r-m-a-n-t_-c-a-n-c-e-l-e-d_-b-y_-s-t-a-r-t-u-p/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_DORMANT_CANCELED_BY_STARTUP HAS_DORMANT_CANCELED_BY_STARTUP \u00b6 const val HAS_DORMANT_CANCELED_BY_STARTUP: String (source)","title":" h a s  d o r m a n t  c a n c e l e d  b y  s t a r t u p"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-d-o-r-m-a-n-t_-c-a-n-c-e-l-e-d_-b-y_-s-t-a-r-t-u-p/#has_dormant_canceled_by_startup","text":"const val HAS_DORMANT_CANCELED_BY_STARTUP: String (source)","title":"HAS_DORMANT_CANCELED_BY_STARTUP"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-i-s-o-l-a-t-i-o-n_-a-d-d-r-e-s-s_-f-l-a-g_-f-o-r_-t-u-n-n-e-l/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL \u00b6 const val HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL: String (source)","title":" h a s  i s o l a t i o n  a d d r e s s  f l a g  f o r  t u n n e l"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-i-s-o-l-a-t-i-o-n_-a-d-d-r-e-s-s_-f-l-a-g_-f-o-r_-t-u-n-n-e-l/#has_isolation_address_flag_for_tunnel","text":"const val HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL: String (source)","title":"HAS_ISOLATION_ADDRESS_FLAG_FOR_TUNNEL"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-o-p-e-n_-p-r-o-x-y_-o-n_-a-l-l_-i-n-t-e-r-f-a-c-e-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_OPEN_PROXY_ON_ALL_INTERFACES HAS_OPEN_PROXY_ON_ALL_INTERFACES \u00b6 const val HAS_OPEN_PROXY_ON_ALL_INTERFACES: String (source)","title":" h a s  o p e n  p r o x y  o n  a l l  i n t e r f a c e s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-o-p-e-n_-p-r-o-x-y_-o-n_-a-l-l_-i-n-t-e-r-f-a-c-e-s/#has_open_proxy_on_all_interfaces","text":"const val HAS_OPEN_PROXY_ON_ALL_INTERFACES: String (source)","title":"HAS_OPEN_PROXY_ON_ALL_INTERFACES"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_REACHABLE_ADDRESS HAS_REACHABLE_ADDRESS \u00b6 const val HAS_REACHABLE_ADDRESS: String (source)","title":" h a s  r e a c h a b l e  a d d r e s s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s/#has_reachable_address","text":"const val HAS_REACHABLE_ADDRESS: String (source)","title":"HAS_REACHABLE_ADDRESS"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-r-e-d-u-c-e-d_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_REDUCED_CONNECTION_PADDING HAS_REDUCED_CONNECTION_PADDING \u00b6 const val HAS_REDUCED_CONNECTION_PADDING: String (source)","title":" h a s  r e d u c e d  c o n n e c t i o n  p a d d i n g"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-r-e-d-u-c-e-d_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/#has_reduced_connection_padding","text":"const val HAS_REDUCED_CONNECTION_PADDING: String (source)","title":"HAS_REDUCED_CONNECTION_PADDING"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-s-a-f-e_-s-o-c-k-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_SAFE_SOCKS HAS_SAFE_SOCKS \u00b6 const val HAS_SAFE_SOCKS: String (source)","title":" h a s  s a f e  s o c k s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-s-a-f-e_-s-o-c-k-s/#has_safe_socks","text":"const val HAS_SAFE_SOCKS: String (source)","title":"HAS_SAFE_SOCKS"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-s-t-r-i-c-t_-n-o-d-e-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_STRICT_NODES HAS_STRICT_NODES \u00b6 const val HAS_STRICT_NODES: String (source)","title":" h a s  s t r i c t  n o d e s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-s-t-r-i-c-t_-n-o-d-e-s/#has_strict_nodes","text":"const val HAS_STRICT_NODES: String (source)","title":"HAS_STRICT_NODES"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-t-e-s-t_-s-o-c-k-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / HAS_TEST_SOCKS HAS_TEST_SOCKS \u00b6 const val HAS_TEST_SOCKS: String (source)","title":" h a s  t e s t  s o c k s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-h-a-s_-t-e-s-t_-s-o-c-k-s/#has_test_socks","text":"const val HAS_TEST_SOCKS: String (source)","title":"HAS_TEST_SOCKS"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-i-s_-a-u-t-o_-m-a-p_-h-o-s-t-s_-o-n_-r-e-s-o-l-v-e/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / IS_AUTO_MAP_HOSTS_ON_RESOLVE IS_AUTO_MAP_HOSTS_ON_RESOLVE \u00b6 const val IS_AUTO_MAP_HOSTS_ON_RESOLVE: String (source)","title":" i s  a u t o  m a p  h o s t s  o n  r e s o l v e"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-i-s_-a-u-t-o_-m-a-p_-h-o-s-t-s_-o-n_-r-e-s-o-l-v-e/#is_auto_map_hosts_on_resolve","text":"const val IS_AUTO_MAP_HOSTS_ON_RESOLVE: String (source)","title":"IS_AUTO_MAP_HOSTS_ON_RESOLVE"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-i-s_-r-e-l-a-y/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / IS_RELAY IS_RELAY \u00b6 const val IS_RELAY: String (source)","title":" i s  r e l a y"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-i-s_-r-e-l-a-y/#is_relay","text":"const val IS_RELAY: String (source)","title":"IS_RELAY"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-init-/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / <init> <init> \u00b6 PrefKeyBoolean()","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-init-/#init","text":"PrefKeyBoolean()","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-r-u-n_-a-s_-d-a-e-m-o-n/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / RUN_AS_DAEMON RUN_AS_DAEMON \u00b6 const val RUN_AS_DAEMON: String (source)","title":" r u n  a s  d a e m o n"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-r-u-n_-a-s_-d-a-e-m-o-n/#run_as_daemon","text":"const val RUN_AS_DAEMON: String (source)","title":"RUN_AS_DAEMON"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-u-s-e_-s-o-c-k-s5/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyBoolean / USE_SOCKS5 USE_SOCKS5 \u00b6 const val USE_SOCKS5: String (source)","title":" u s e  s o c k s5"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-boolean/-u-s-e_-s-o-c-k-s5/#use_socks5","text":"const val USE_SOCKS5: String (source)","title":"USE_SOCKS5"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyInt PrefKeyInt \u00b6 annotation class PrefKeyInt (source) Constructors \u00b6 Name Summary <init> PrefKeyInt() Companion Object Properties \u00b6 Name Summary PROXY_PORT const val PROXY_PORT: String PROXY_SOCKS5_SERVER_PORT const val PROXY_SOCKS5_SERVER_PORT: String RELAY_PORT const val RELAY_PORT: String","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/#prefkeyint","text":"annotation class PrefKeyInt (source)","title":"PrefKeyInt"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/#constructors","text":"Name Summary <init> PrefKeyInt()","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/#companion-object-properties","text":"Name Summary PROXY_PORT const val PROXY_PORT: String PROXY_SOCKS5_SERVER_PORT const val PROXY_SOCKS5_SERVER_PORT: String RELAY_PORT const val RELAY_PORT: String","title":"Companion Object Properties"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/-init-/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyInt / <init> <init> \u00b6 PrefKeyInt()","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/-init-/#init","text":"PrefKeyInt()","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/-p-r-o-x-y_-p-o-r-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyInt / PROXY_PORT PROXY_PORT \u00b6 const val PROXY_PORT: String (source)","title":" p r o x y  p o r t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/-p-r-o-x-y_-p-o-r-t/#proxy_port","text":"const val PROXY_PORT: String (source)","title":"PROXY_PORT"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/-p-r-o-x-y_-s-o-c-k-s5_-s-e-r-v-e-r_-p-o-r-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyInt / PROXY_SOCKS5_SERVER_PORT PROXY_SOCKS5_SERVER_PORT \u00b6 const val PROXY_SOCKS5_SERVER_PORT: String (source)","title":" p r o x y  s o c k s5  s e r v e r  p o r t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/-p-r-o-x-y_-s-o-c-k-s5_-s-e-r-v-e-r_-p-o-r-t/#proxy_socks5_server_port","text":"const val PROXY_SOCKS5_SERVER_PORT: String (source)","title":"PROXY_SOCKS5_SERVER_PORT"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/-r-e-l-a-y_-p-o-r-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyInt / RELAY_PORT RELAY_PORT \u00b6 const val RELAY_PORT: String (source)","title":" r e l a y  p o r t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-int/-r-e-l-a-y_-p-o-r-t/#relay_port","text":"const val RELAY_PORT: String (source)","title":"RELAY_PORT"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-list/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyList PrefKeyList \u00b6 annotation class PrefKeyList (source) Constructors \u00b6 Name Summary <init> PrefKeyList() Companion Object Properties \u00b6 Name Summary LIST_OF_SUPPORTED_BRIDGES const val LIST_OF_SUPPORTED_BRIDGES: String","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-list/#prefkeylist","text":"annotation class PrefKeyList (source)","title":"PrefKeyList"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-list/#constructors","text":"Name Summary <init> PrefKeyList()","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-list/#companion-object-properties","text":"Name Summary LIST_OF_SUPPORTED_BRIDGES const val LIST_OF_SUPPORTED_BRIDGES: String","title":"Companion Object Properties"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-list/-init-/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyList / <init> <init> \u00b6 PrefKeyList()","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-list/-init-/#init","text":"PrefKeyList()","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-list/-l-i-s-t_-o-f_-s-u-p-p-o-r-t-e-d_-b-r-i-d-g-e-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyList / LIST_OF_SUPPORTED_BRIDGES LIST_OF_SUPPORTED_BRIDGES \u00b6 const val LIST_OF_SUPPORTED_BRIDGES: String (source)","title":" l i s t  o f  s u p p o r t e d  b r i d g e s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-list/-l-i-s-t_-o-f_-s-u-p-p-o-r-t-e-d_-b-r-i-d-g-e-s/#list_of_supported_bridges","text":"const val LIST_OF_SUPPORTED_BRIDGES: String (source)","title":"LIST_OF_SUPPORTED_BRIDGES"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString PrefKeyString \u00b6 annotation class PrefKeyString (source) Constructors \u00b6 Name Summary <init> PrefKeyString() Companion Object Properties \u00b6 Name Summary CUSTOM_TORRC const val CUSTOM_TORRC: String DNS_PORT const val DNS_PORT: String ENTRY_NODES const val ENTRY_NODES: String EXCLUDED_NODES const val EXCLUDED_NODES: String EXIT_NODES const val EXIT_NODES: String HAS_CONNECTION_PADDING const val HAS_CONNECTION_PADDING: String HTTP_TUNNEL_PORT const val HTTP_TUNNEL_PORT: String PROXY_HOST const val PROXY_HOST: String PROXY_PASSWORD const val PROXY_PASSWORD: String PROXY_SOCKS5_HOST const val PROXY_SOCKS5_HOST: String PROXY_TYPE const val PROXY_TYPE: String PROXY_USER const val PROXY_USER: String REACHABLE_ADDRESS_PORTS const val REACHABLE_ADDRESS_PORTS: String RELAY_NICKNAME const val RELAY_NICKNAME: String SOCKS_PORT const val SOCKS_PORT: String TRANS_PORT const val TRANS_PORT: String VIRTUAL_ADDRESS_NETWORK const val VIRTUAL_ADDRESS_NETWORK: String","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/#prefkeystring","text":"annotation class PrefKeyString (source)","title":"PrefKeyString"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/#constructors","text":"Name Summary <init> PrefKeyString()","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/#companion-object-properties","text":"Name Summary CUSTOM_TORRC const val CUSTOM_TORRC: String DNS_PORT const val DNS_PORT: String ENTRY_NODES const val ENTRY_NODES: String EXCLUDED_NODES const val EXCLUDED_NODES: String EXIT_NODES const val EXIT_NODES: String HAS_CONNECTION_PADDING const val HAS_CONNECTION_PADDING: String HTTP_TUNNEL_PORT const val HTTP_TUNNEL_PORT: String PROXY_HOST const val PROXY_HOST: String PROXY_PASSWORD const val PROXY_PASSWORD: String PROXY_SOCKS5_HOST const val PROXY_SOCKS5_HOST: String PROXY_TYPE const val PROXY_TYPE: String PROXY_USER const val PROXY_USER: String REACHABLE_ADDRESS_PORTS const val REACHABLE_ADDRESS_PORTS: String RELAY_NICKNAME const val RELAY_NICKNAME: String SOCKS_PORT const val SOCKS_PORT: String TRANS_PORT const val TRANS_PORT: String VIRTUAL_ADDRESS_NETWORK const val VIRTUAL_ADDRESS_NETWORK: String","title":"Companion Object Properties"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-c-u-s-t-o-m_-t-o-r-r-c/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / CUSTOM_TORRC CUSTOM_TORRC \u00b6 const val CUSTOM_TORRC: String (source)","title":" c u s t o m  t o r r c"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-c-u-s-t-o-m_-t-o-r-r-c/#custom_torrc","text":"const val CUSTOM_TORRC: String (source)","title":"CUSTOM_TORRC"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-d-n-s_-p-o-r-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / DNS_PORT DNS_PORT \u00b6 const val DNS_PORT: String (source)","title":" d n s  p o r t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-d-n-s_-p-o-r-t/#dns_port","text":"const val DNS_PORT: String (source)","title":"DNS_PORT"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-e-n-t-r-y_-n-o-d-e-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / ENTRY_NODES ENTRY_NODES \u00b6 const val ENTRY_NODES: String (source)","title":" e n t r y  n o d e s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-e-n-t-r-y_-n-o-d-e-s/#entry_nodes","text":"const val ENTRY_NODES: String (source)","title":"ENTRY_NODES"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-e-x-c-l-u-d-e-d_-n-o-d-e-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / EXCLUDED_NODES EXCLUDED_NODES \u00b6 const val EXCLUDED_NODES: String (source)","title":" e x c l u d e d  n o d e s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-e-x-c-l-u-d-e-d_-n-o-d-e-s/#excluded_nodes","text":"const val EXCLUDED_NODES: String (source)","title":"EXCLUDED_NODES"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-e-x-i-t_-n-o-d-e-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / EXIT_NODES EXIT_NODES \u00b6 const val EXIT_NODES: String (source)","title":" e x i t  n o d e s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-e-x-i-t_-n-o-d-e-s/#exit_nodes","text":"const val EXIT_NODES: String (source)","title":"EXIT_NODES"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-h-a-s_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / HAS_CONNECTION_PADDING HAS_CONNECTION_PADDING \u00b6 const val HAS_CONNECTION_PADDING: String (source)","title":" h a s  c o n n e c t i o n  p a d d i n g"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-h-a-s_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/#has_connection_padding","text":"const val HAS_CONNECTION_PADDING: String (source)","title":"HAS_CONNECTION_PADDING"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-h-t-t-p_-t-u-n-n-e-l_-p-o-r-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / HTTP_TUNNEL_PORT HTTP_TUNNEL_PORT \u00b6 const val HTTP_TUNNEL_PORT: String (source)","title":" h t t p  t u n n e l  p o r t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-h-t-t-p_-t-u-n-n-e-l_-p-o-r-t/#http_tunnel_port","text":"const val HTTP_TUNNEL_PORT: String (source)","title":"HTTP_TUNNEL_PORT"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-init-/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / <init> <init> \u00b6 PrefKeyString()","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-init-/#init","text":"PrefKeyString()","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-h-o-s-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / PROXY_HOST PROXY_HOST \u00b6 const val PROXY_HOST: String (source)","title":" p r o x y  h o s t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-h-o-s-t/#proxy_host","text":"const val PROXY_HOST: String (source)","title":"PROXY_HOST"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-p-a-s-s-w-o-r-d/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / PROXY_PASSWORD PROXY_PASSWORD \u00b6 const val PROXY_PASSWORD: String (source)","title":" p r o x y  p a s s w o r d"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-p-a-s-s-w-o-r-d/#proxy_password","text":"const val PROXY_PASSWORD: String (source)","title":"PROXY_PASSWORD"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-s-o-c-k-s5_-h-o-s-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / PROXY_SOCKS5_HOST PROXY_SOCKS5_HOST \u00b6 const val PROXY_SOCKS5_HOST: String (source)","title":" p r o x y  s o c k s5  h o s t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-s-o-c-k-s5_-h-o-s-t/#proxy_socks5_host","text":"const val PROXY_SOCKS5_HOST: String (source)","title":"PROXY_SOCKS5_HOST"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-t-y-p-e/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / PROXY_TYPE PROXY_TYPE \u00b6 const val PROXY_TYPE: String (source)","title":" p r o x y  t y p e"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-t-y-p-e/#proxy_type","text":"const val PROXY_TYPE: String (source)","title":"PROXY_TYPE"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-u-s-e-r/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / PROXY_USER PROXY_USER \u00b6 const val PROXY_USER: String (source)","title":" p r o x y  u s e r"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-p-r-o-x-y_-u-s-e-r/#proxy_user","text":"const val PROXY_USER: String (source)","title":"PROXY_USER"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s_-p-o-r-t-s/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / REACHABLE_ADDRESS_PORTS REACHABLE_ADDRESS_PORTS \u00b6 const val REACHABLE_ADDRESS_PORTS: String (source)","title":" r e a c h a b l e  a d d r e s s  p o r t s"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s_-p-o-r-t-s/#reachable_address_ports","text":"const val REACHABLE_ADDRESS_PORTS: String (source)","title":"REACHABLE_ADDRESS_PORTS"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-r-e-l-a-y_-n-i-c-k-n-a-m-e/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / RELAY_NICKNAME RELAY_NICKNAME \u00b6 const val RELAY_NICKNAME: String (source)","title":" r e l a y  n i c k n a m e"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-r-e-l-a-y_-n-i-c-k-n-a-m-e/#relay_nickname","text":"const val RELAY_NICKNAME: String (source)","title":"RELAY_NICKNAME"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-s-o-c-k-s_-p-o-r-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / SOCKS_PORT SOCKS_PORT \u00b6 const val SOCKS_PORT: String (source)","title":" s o c k s  p o r t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-s-o-c-k-s_-p-o-r-t/#socks_port","text":"const val SOCKS_PORT: String (source)","title":"SOCKS_PORT"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-t-r-a-n-s_-p-o-r-t/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / TRANS_PORT TRANS_PORT \u00b6 const val TRANS_PORT: String (source)","title":" t r a n s  p o r t"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-t-r-a-n-s_-p-o-r-t/#trans_port","text":"const val TRANS_PORT: String (source)","title":"TRANS_PORT"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-v-i-r-t-u-a-l_-a-d-d-r-e-s-s_-n-e-t-w-o-r-k/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / PrefKeyString / VIRTUAL_ADDRESS_NETWORK VIRTUAL_ADDRESS_NETWORK \u00b6 const val VIRTUAL_ADDRESS_NETWORK: String (source)","title":" v i r t u a l  a d d r e s s  n e t w o r k"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-pref-key-string/-v-i-r-t-u-a-l_-a-d-d-r-e-s-s_-n-e-t-w-o-r-k/#virtual_address_network","text":"const val VIRTUAL_ADDRESS_NETWORK: String (source)","title":"VIRTUAL_ADDRESS_NETWORK"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-utilities/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceUtilities ServiceUtilities \u00b6 object ServiceUtilities (source) Functions \u00b6 Name Summary getFormattedBandwidthString Formats the supplied values to look like: 20kbps \u2193 / 85kbps \u2191``fun getFormattedBandwidthString(download: Long , upload: Long ): String","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-utilities/#serviceutilities","text":"object ServiceUtilities (source)","title":"ServiceUtilities"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-utilities/#functions","text":"Name Summary getFormattedBandwidthString Formats the supplied values to look like: 20kbps \u2193 / 85kbps \u2191``fun getFormattedBandwidthString(download: Long , upload: Long ): String","title":"Functions"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-utilities/get-formatted-bandwidth-string/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceUtilities / getFormattedBandwidthString getFormattedBandwidthString \u00b6 fun getFormattedBandwidthString(download: Long , upload: Long ): String (source) Formats the supplied values to look like: 20kbps \u2193 / 85kbps \u2191 Parameters \u00b6 download - Long value associated with download (bytesRead) upload - Long value associated with upload (bytesWritten)","title":"Get formatted bandwidth string"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-utilities/get-formatted-bandwidth-string/#getformattedbandwidthstring","text":"fun getFormattedBandwidthString(download: Long , upload: Long ): String (source) Formats the supplied values to look like: 20kbps \u2193 / 85kbps \u2191","title":"getFormattedBandwidthString"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-utilities/get-formatted-bandwidth-string/#parameters","text":"download - Long value associated with download (bytesRead) upload - Long value associated with upload (bytesWritten)","title":"Parameters"}]}