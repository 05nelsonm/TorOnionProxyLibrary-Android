{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TorOnionProxyLibrary-Android \u00b6 An Android Library for embedding Tor as a service into your Application NOTE: This project exists independently of the Tor Project, & Guardian Project. This is a Fork of the Tor_Onion_Proxy_Library project. It\u2019s been re-built from the ground up and engineered specifically for Android , where it was once multi-platform. It\u2019s been re-written in Kotlin, heavily refactored to improve reliability/ease of use, and an android.app.Service built on top as an additional module/Library for abstracting away complexities. The topl-service module/Library has simple to use APIs for integrating Tor into your application, and customizing the notification to meet your liking. Project Roadmap \u00b6 Get started! \u00b6 Other Projects Using It \u00b6 Info Add your project to the list by submitting a PR! Edit This Document License \u00b6 TorOnionProxyLibrary-Android (a.k.a. topl-android) is a derivation of work from the Tor_Onion_Proxy_Library project that started at commit hash 74407114cbfa8ea6f2ac51417dda8be98d8aba86 . Contributions made after said commit hash are: Copyright (C) 2020 Matthew Nelson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see here . =========================================================================== +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ =========================================================================== The following exception is an additional permission under section 7 of the GNU General Public License, version 3 (\u201cGPLv3\u201d). \u201cThe Interfaces\u201d is henceforth defined as Application Programming Interfaces needed to implement TorOnionProxyLibrary-Android, as listed below: From the topl-core-base module: All Classes/methods/variables From the topl-service-base module: All Classes/methods/variables From the topl-service module: The TorServiceController class and it\u2019s contained classes/methods/variables The ServiceNotification.Builder class and it\u2019s contained classes/methods/variables The BackgroundManager.Builder class and it\u2019s contained classes/methods/variables The BackgroundManager.Companion class and it\u2019s contained methods/variables The following code is excluded from \u201cThe Interfaces\u201d: All other code Linking TorOnionProxyLibrary-Android statically or dynamically with other modules is making a combined work based on TorOnionProxyLibrary-Android. Thus, the terms and conditions of the GNU General Public License cover the whole combination. As a special exception, the copyright holder of TorOnionProxyLibrary-Android gives you permission to combine TorOnionProxyLibrary-Android program with free software programs or libraries that are released under the GNU LGPL and with independent modules that communicate with TorOnionProxyLibrary-Android solely through \u201cThe Interfaces\u201d. You may copy and distribute such a system following the terms of the GNU GPL for TorOnionProxyLibrary-Android and the licenses of the other code concerned, provided that you include the source code of that other code when and as the GNU GPL requires distribution of source code and provided that you do not modify \u201cThe Interfaces\u201d. Note that people who make modified versions of TorOnionProxyLibrary-Android are not obligated to grant this special exception for their modified versions; it is their choice whether to do so. The GNU General Public License gives permission to release a modified version without this exception; this exception also makes it possible to release a modified version which carries forward this exception. If you modify \u201cThe Interfaces\u201d, this exception does not apply to your modified version of TorOnionProxyLibrary-Android, and you must remove this exception when you distribute your modified version.","title":"Overview"},{"location":"#toronionproxylibrary-android","text":"An Android Library for embedding Tor as a service into your Application NOTE: This project exists independently of the Tor Project, & Guardian Project. This is a Fork of the Tor_Onion_Proxy_Library project. It\u2019s been re-built from the ground up and engineered specifically for Android , where it was once multi-platform. It\u2019s been re-written in Kotlin, heavily refactored to improve reliability/ease of use, and an android.app.Service built on top as an additional module/Library for abstracting away complexities. The topl-service module/Library has simple to use APIs for integrating Tor into your application, and customizing the notification to meet your liking.","title":"TorOnionProxyLibrary-Android"},{"location":"#project-roadmap","text":"","title":"Project Roadmap"},{"location":"#get-started","text":"","title":"Get started!"},{"location":"#other-projects-using-it","text":"Info Add your project to the list by submitting a PR! Edit This Document","title":"Other Projects Using It"},{"location":"#license","text":"TorOnionProxyLibrary-Android (a.k.a. topl-android) is a derivation of work from the Tor_Onion_Proxy_Library project that started at commit hash 74407114cbfa8ea6f2ac51417dda8be98d8aba86 . Contributions made after said commit hash are: Copyright (C) 2020 Matthew Nelson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see here . =========================================================================== +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ =========================================================================== The following exception is an additional permission under section 7 of the GNU General Public License, version 3 (\u201cGPLv3\u201d). \u201cThe Interfaces\u201d is henceforth defined as Application Programming Interfaces needed to implement TorOnionProxyLibrary-Android, as listed below: From the topl-core-base module: All Classes/methods/variables From the topl-service-base module: All Classes/methods/variables From the topl-service module: The TorServiceController class and it\u2019s contained classes/methods/variables The ServiceNotification.Builder class and it\u2019s contained classes/methods/variables The BackgroundManager.Builder class and it\u2019s contained classes/methods/variables The BackgroundManager.Companion class and it\u2019s contained methods/variables The following code is excluded from \u201cThe Interfaces\u201d: All other code Linking TorOnionProxyLibrary-Android statically or dynamically with other modules is making a combined work based on TorOnionProxyLibrary-Android. Thus, the terms and conditions of the GNU General Public License cover the whole combination. As a special exception, the copyright holder of TorOnionProxyLibrary-Android gives you permission to combine TorOnionProxyLibrary-Android program with free software programs or libraries that are released under the GNU LGPL and with independent modules that communicate with TorOnionProxyLibrary-Android solely through \u201cThe Interfaces\u201d. You may copy and distribute such a system following the terms of the GNU GPL for TorOnionProxyLibrary-Android and the licenses of the other code concerned, provided that you include the source code of that other code when and as the GNU GPL requires distribution of source code and provided that you do not modify \u201cThe Interfaces\u201d. Note that people who make modified versions of TorOnionProxyLibrary-Android are not obligated to grant this special exception for their modified versions; it is their choice whether to do so. The GNU General Public License gives permission to release a modified version without this exception; this exception also makes it possible to release a modified version which carries forward this exception. If you modify \u201cThe Interfaces\u201d, this exception does not apply to your modified version of TorOnionProxyLibrary-Android, and you must remove this exception when you distribute your modified version.","title":"License "},{"location":"changelog/","text":"Change Log \u00b6 Version 2.1.1 (2021-05-06) \u00b6 Bump dependencies Version 2.1.0 (2021-01-30) \u00b6 New Features Added: topl-service:TorService Lifecycle Events are now broadcast to TorServiceEventBroadcaster topl-service-base:ServiceExecutionHooks have been implemented such that library users can leverage suspension functions at key points of TorService \u2018s operation, and allow for synchronous code execution. Moved topl-service:ServiceActionName String definitions to topl-service-base to expose them such that library users can utilize them in their implementation of TorServiceEventBroadcaster Bug Fixes: Kotlin internal visibility modifier is public from Java code. See Issue 100 Duplicate v3 Client Authentication files were inhibiting Tor from starting properly. See Issue 105 Tor notice messages were modified between 0.4.4.0 and 0.4.5.4-rc, which caused topl-service:ServiceEventBroadcaster \u2018s notice message filter to miss broadcasting of ports. See Issue 110 Dependencies were bumped to latest stable releases. Version 2.0.2 (2020-10-19) \u00b6 Bug Fix: Notifications not showing on API 25 and below 12abbf7 Deprecates ServiceNotification.Builder.setContentIntentData in favor of ServiceNotification.Builder.setContentIntent via Library implementer providing the needed PendingIntent Removes Notification Action icons Version 2.0.1 (2020-10-18) \u00b6 Deprecates the ServiceNotification.Builder.setActivityToBeOpenedOnTap method in favor of using the new ServiceNotification.Builder.setContentIntentData to mitigate multiple activities from being opened. Version 2.0.0 (2020-10-18) \u00b6 Adds support for Version 3 Hidden Service Client Authentication The V3ClientAuthManager class can be obtained from TorServiceController.getV3ClientAuthManager after Builder initialization, which facilitates easily adding private keys to Tor\u2019s ClientAuthDir . Adds better support for multi-module projects by moving topl-service \u2018s public classes/abstractions to a separate module, topl-service-base . TorService now broadcasts as a NOTICE via the EventBroadcasters when onTaskRemoved occurred, instead of being broadcast as DEBUG (which required TorSettings.hasDebugLogs to be set to true). Can now listen for it in the implementing application\u2019s TorServiceEventBroadcaster . See Migrations for details on how to migrate from 1.0.0 to 2.0.0 Version 1.0.0-beta02 (2020-10-08) \u00b6 Bug Fix: Service re-binding when application sent to background inhibiting call to stopSelf in some instances a544c73 Version 1.0.0-beta01 (2020-08-24) \u00b6 Bug Fix: remove use of = operator from kotlin methods where java.void is expected as a return value. Adds JvmOverloads/JvmStatic to methods/variables for making use of Library for Java users more convenient. Bug Fix: implements try/catch block on BaseService.startService method if application calls it while in the background. Adds new option for BackgroundManager.Builder to run the Service in the Foreground when the application is sent to the background. Exposes ServiceTorSettings class for easier construction of a settings screen by Library users. Adds methods to ServiceTorSettings for quickly saving user settings to TorServicePrefs . Adds a helper method in TorServiceController.Companion for quickly generating the class. Adds option within TorSettings for setting IsolationFlags specific to the protocol being opened on a port. Updates TorServiceEventBroadcaster \u2018s broadcasting of ports to now broadcast a single class containing all port information instead of individual methods for each port type. Adds a delay to modifying of Tor config DisableNetwork on device connectivity loss such that intermittent disconnections are smoothed out w/o the network call failing Also helps with inhibiting ports from changing if utilizing \u201cauto\u201d. Updates Dependency versions 88469d7 Bug Fix: Dokka Docs generated with failed links caused by not accounting for directory depth of the file. Version 1.0.0-alpha02 (2020-08-03) \u00b6 API breaking changes were made to TorServiceController.Builder . See the following to update: TorServiceController.Builder TorServiceEventBroadcaster Added ability to hide the notification NOTE: Will be shown when user swipes the application out of recent\u2019s tray (required). Service now starts via Context.startService + Context.bindService instead of starting in the foreground. Added a queue for processing of commands, ie. ServiceActions , for improved response time to API interactions. Added management of the service for when the application is sent to the background. Added APIs for retrieving the TorConfigFiles and TorSettings used by topl-service Various bug fixes and code clean up Version 1.0.0-alpha01 (2020-07-18) \u00b6 Initial Release","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-211-2021-05-06","text":"Bump dependencies","title":"Version 2.1.1 (2021-05-06)"},{"location":"changelog/#version-210-2021-01-30","text":"New Features Added: topl-service:TorService Lifecycle Events are now broadcast to TorServiceEventBroadcaster topl-service-base:ServiceExecutionHooks have been implemented such that library users can leverage suspension functions at key points of TorService \u2018s operation, and allow for synchronous code execution. Moved topl-service:ServiceActionName String definitions to topl-service-base to expose them such that library users can utilize them in their implementation of TorServiceEventBroadcaster Bug Fixes: Kotlin internal visibility modifier is public from Java code. See Issue 100 Duplicate v3 Client Authentication files were inhibiting Tor from starting properly. See Issue 105 Tor notice messages were modified between 0.4.4.0 and 0.4.5.4-rc, which caused topl-service:ServiceEventBroadcaster \u2018s notice message filter to miss broadcasting of ports. See Issue 110 Dependencies were bumped to latest stable releases.","title":"Version 2.1.0 (2021-01-30)"},{"location":"changelog/#version-202-2020-10-19","text":"Bug Fix: Notifications not showing on API 25 and below 12abbf7 Deprecates ServiceNotification.Builder.setContentIntentData in favor of ServiceNotification.Builder.setContentIntent via Library implementer providing the needed PendingIntent Removes Notification Action icons","title":"Version 2.0.2 (2020-10-19)"},{"location":"changelog/#version-201-2020-10-18","text":"Deprecates the ServiceNotification.Builder.setActivityToBeOpenedOnTap method in favor of using the new ServiceNotification.Builder.setContentIntentData to mitigate multiple activities from being opened.","title":"Version 2.0.1 (2020-10-18)"},{"location":"changelog/#version-200-2020-10-18","text":"Adds support for Version 3 Hidden Service Client Authentication The V3ClientAuthManager class can be obtained from TorServiceController.getV3ClientAuthManager after Builder initialization, which facilitates easily adding private keys to Tor\u2019s ClientAuthDir . Adds better support for multi-module projects by moving topl-service \u2018s public classes/abstractions to a separate module, topl-service-base . TorService now broadcasts as a NOTICE via the EventBroadcasters when onTaskRemoved occurred, instead of being broadcast as DEBUG (which required TorSettings.hasDebugLogs to be set to true). Can now listen for it in the implementing application\u2019s TorServiceEventBroadcaster . See Migrations for details on how to migrate from 1.0.0 to 2.0.0","title":"Version 2.0.0 (2020-10-18)"},{"location":"changelog/#version-100-beta02-2020-10-08","text":"Bug Fix: Service re-binding when application sent to background inhibiting call to stopSelf in some instances a544c73","title":"Version 1.0.0-beta02 (2020-10-08)"},{"location":"changelog/#version-100-beta01-2020-08-24","text":"Bug Fix: remove use of = operator from kotlin methods where java.void is expected as a return value. Adds JvmOverloads/JvmStatic to methods/variables for making use of Library for Java users more convenient. Bug Fix: implements try/catch block on BaseService.startService method if application calls it while in the background. Adds new option for BackgroundManager.Builder to run the Service in the Foreground when the application is sent to the background. Exposes ServiceTorSettings class for easier construction of a settings screen by Library users. Adds methods to ServiceTorSettings for quickly saving user settings to TorServicePrefs . Adds a helper method in TorServiceController.Companion for quickly generating the class. Adds option within TorSettings for setting IsolationFlags specific to the protocol being opened on a port. Updates TorServiceEventBroadcaster \u2018s broadcasting of ports to now broadcast a single class containing all port information instead of individual methods for each port type. Adds a delay to modifying of Tor config DisableNetwork on device connectivity loss such that intermittent disconnections are smoothed out w/o the network call failing Also helps with inhibiting ports from changing if utilizing \u201cauto\u201d. Updates Dependency versions 88469d7 Bug Fix: Dokka Docs generated with failed links caused by not accounting for directory depth of the file.","title":"Version 1.0.0-beta01 (2020-08-24)"},{"location":"changelog/#version-100-alpha02-2020-08-03","text":"API breaking changes were made to TorServiceController.Builder . See the following to update: TorServiceController.Builder TorServiceEventBroadcaster Added ability to hide the notification NOTE: Will be shown when user swipes the application out of recent\u2019s tray (required). Service now starts via Context.startService + Context.bindService instead of starting in the foreground. Added a queue for processing of commands, ie. ServiceActions , for improved response time to API interactions. Added management of the service for when the application is sent to the background. Added APIs for retrieving the TorConfigFiles and TorSettings used by topl-service Various bug fixes and code clean up","title":"Version 1.0.0-alpha02 (2020-08-03)"},{"location":"changelog/#version-100-alpha01-2020-07-18","text":"Initial Release","title":"Version 1.0.0-alpha01 (2020-07-18)"},{"location":"documentation/","text":"API Documentation \u00b6 topl-service \u00b6 topl-service-base \u00b6 topl-core-base \u00b6 Info Documentation here only includes Public methods/classes, meaning links to non-public methods/classes are broken. You can view all methods/classes from the Project View in Android Studio via: Project/External Libraries/io.matthewnelson.topl_android:topl_*@arr Migrations \u00b6","title":"Documentation"},{"location":"documentation/#api-documentation","text":"","title":"API Documentation"},{"location":"documentation/#topl-service","text":"","title":"topl-service"},{"location":"documentation/#topl-service-base","text":"","title":"topl-service-base"},{"location":"documentation/#topl-core-base","text":"Info Documentation here only includes Public methods/classes, meaning links to non-public methods/classes are broken. You can view all methods/classes from the Project View in Android Studio via: Project/External Libraries/io.matthewnelson.topl_android:topl_*@arr","title":"topl-core-base"},{"location":"documentation/#migrations","text":"","title":"Migrations"},{"location":"get_started/","text":"Get Started \u00b6 Implementation - Step 1: Assets/Binaries \u00b6 GeoIP files : Your application will need geoip and geoip6 files. Due to this issue they currently cannot be provided via a dependency that can be easily updated. Until then, you\u2019ll have to provide them. Steps: Download geoip and geoip6 files from https://github.com/torproject/tor/tree/master/src/config If you prefer the non-mirror repository, you can also obtain them from https://gitweb.torproject.org/tor.git/tree/src/config In your Application module\u2019s src/main/ directory, create a new Directory named assets Copy geoip and geoip6 files into the assets directory (or a subdirectory within assets , such as assets/common/ . File extensions not necessary). torrc file : Not needed Your application\u2019s torrc file gets created for you based on what you have stored in TorServicePrefs . If nothing is in TorServicePrefs for that particular setting, then it will fall back on your static/default ApplicationDefaultTorSettings that you supply upon initialization of TorServiceController.Builder . Tor Binaries : I use The GuardianProject\u2019s tor-android project to re-package and provide only the binaries, as that\u2019s all which is needed by TOPL-Android. As of version 0.4.4.0, the binaries are simply copied instead of being re-built (prior versions I was building, but build reproducability is problematic\u2026) which can be verified by checking the sha256sums (see the repo\u2019s README for instructions on how to do that). They can be found here . The only difference is the contents of what you are importing as a dependency. I package them in the jniLibs directory so that the Android OS will automatically extract them to your application\u2019s /data/app/... directory, and include no unnecessary classes or resources; just the binaries. Android API 29+ no longer supports execution of executable files from your application\u2019s /data/data/ directory, and must now be installed in the context.applicationInfo.nativeLibraryDir directory (aka, /data/app/... ) to execute. Nothing more is needed in terms of configuring initialization via the TorServiceController.Builder.useCustomTorConfigFiles , as files will be installed in the correct directory, and named to match what topl-service looks for. If you wish to use GuardianProject\u2019s dependency, see tor-android . You\u2019ll need to use their NativeResourceInstaller to install the binaries. You\u2019ll need to also implement TorServiceController.Builder.useCustomTorConfigFiles method when initializing topl-service and provide it with your own TorConfigFiles . See the sample provided in the TorConfigFiles.Builder documentation. Transport Plugin Binaries : Currently unsupported. Working on it!!! Info Tor Binaries are ~8MB for each ABI, so it\u2019s advised that builds are split to keep apk sizes down. See the sampleapp \u2018s build.gradle file for more details. here Implementation - Step 2: topl-service \u00b6 In your Application module\u2019s build.gradle file, add the following to the dependencies block: implementation \"io.matthewnelson.topl-android:topl-service:2.1.1\" Create a new class which extends ApplicationDefaultTorSettings and apply your own default settings. See the SampleApp\u2019s MyTorSettings class for help. Also checkout the documentation in the TorSettings class for more of a breakdown and help. Optional: If you wish to receive broadcasts (TorState/NetworkState, Port Information, Logs, etc.), Create a new class which extends TorServiceEventBroadcaster and implement the abstract methods. See the SampleApp\u2019s MyEventBroadcaster class for help. Use the TorServiceController.Builder.setEventBroadcaster and provide your implementation when initializing topl-service . In your Application class\u2019 onCreate implement, and customize as desired, the TorServiceController.Builder Call APIs provided from TorServiceController.Companion Multi-Module projects \u00b6 If you have a tor module in your project that extends the api\u2019s in TorServiceController to centralize control of topl-service , other modules depending on it need only import the topl-service-base module which provides all of the necessary public classes/abstractions. In your tor module\u2019s build.gradle file, add the following to the dependencies block: api \"io.matthewnelson.topl-android:topl-service-base:2.1.1\" Using the SNAPSHOT version of topl-service \u00b6 In your Application module\u2019s build.gradle file, add the following ( outside the android block): repositories { maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } } In your Application module\u2019s build.gradle file, add (or modify) the following in the dependencies block: implementation 'io.matthewnelson.topl-android:topl-service:2.2.0-SNAPSHOT' Warning SNAPSHOT versions are ever changing and may contain not yet fully fleshed out features. Do not ship a release.","title":"Get Started"},{"location":"get_started/#get-started","text":"","title":"Get Started"},{"location":"get_started/#implementation-step-1-assetsbinaries","text":"GeoIP files : Your application will need geoip and geoip6 files. Due to this issue they currently cannot be provided via a dependency that can be easily updated. Until then, you\u2019ll have to provide them. Steps: Download geoip and geoip6 files from https://github.com/torproject/tor/tree/master/src/config If you prefer the non-mirror repository, you can also obtain them from https://gitweb.torproject.org/tor.git/tree/src/config In your Application module\u2019s src/main/ directory, create a new Directory named assets Copy geoip and geoip6 files into the assets directory (or a subdirectory within assets , such as assets/common/ . File extensions not necessary). torrc file : Not needed Your application\u2019s torrc file gets created for you based on what you have stored in TorServicePrefs . If nothing is in TorServicePrefs for that particular setting, then it will fall back on your static/default ApplicationDefaultTorSettings that you supply upon initialization of TorServiceController.Builder . Tor Binaries : I use The GuardianProject\u2019s tor-android project to re-package and provide only the binaries, as that\u2019s all which is needed by TOPL-Android. As of version 0.4.4.0, the binaries are simply copied instead of being re-built (prior versions I was building, but build reproducability is problematic\u2026) which can be verified by checking the sha256sums (see the repo\u2019s README for instructions on how to do that). They can be found here . The only difference is the contents of what you are importing as a dependency. I package them in the jniLibs directory so that the Android OS will automatically extract them to your application\u2019s /data/app/... directory, and include no unnecessary classes or resources; just the binaries. Android API 29+ no longer supports execution of executable files from your application\u2019s /data/data/ directory, and must now be installed in the context.applicationInfo.nativeLibraryDir directory (aka, /data/app/... ) to execute. Nothing more is needed in terms of configuring initialization via the TorServiceController.Builder.useCustomTorConfigFiles , as files will be installed in the correct directory, and named to match what topl-service looks for. If you wish to use GuardianProject\u2019s dependency, see tor-android . You\u2019ll need to use their NativeResourceInstaller to install the binaries. You\u2019ll need to also implement TorServiceController.Builder.useCustomTorConfigFiles method when initializing topl-service and provide it with your own TorConfigFiles . See the sample provided in the TorConfigFiles.Builder documentation. Transport Plugin Binaries : Currently unsupported. Working on it!!! Info Tor Binaries are ~8MB for each ABI, so it\u2019s advised that builds are split to keep apk sizes down. See the sampleapp \u2018s build.gradle file for more details. here","title":"Implementation - Step 1: Assets/Binaries"},{"location":"get_started/#implementation-step-2-topl-service","text":"In your Application module\u2019s build.gradle file, add the following to the dependencies block: implementation \"io.matthewnelson.topl-android:topl-service:2.1.1\" Create a new class which extends ApplicationDefaultTorSettings and apply your own default settings. See the SampleApp\u2019s MyTorSettings class for help. Also checkout the documentation in the TorSettings class for more of a breakdown and help. Optional: If you wish to receive broadcasts (TorState/NetworkState, Port Information, Logs, etc.), Create a new class which extends TorServiceEventBroadcaster and implement the abstract methods. See the SampleApp\u2019s MyEventBroadcaster class for help. Use the TorServiceController.Builder.setEventBroadcaster and provide your implementation when initializing topl-service . In your Application class\u2019 onCreate implement, and customize as desired, the TorServiceController.Builder Call APIs provided from TorServiceController.Companion","title":"Implementation - Step 2: topl-service"},{"location":"get_started/#multi-module-projects","text":"If you have a tor module in your project that extends the api\u2019s in TorServiceController to centralize control of topl-service , other modules depending on it need only import the topl-service-base module which provides all of the necessary public classes/abstractions. In your tor module\u2019s build.gradle file, add the following to the dependencies block: api \"io.matthewnelson.topl-android:topl-service-base:2.1.1\"","title":"Multi-Module projects"},{"location":"get_started/#using-the-snapshot-version-of-topl-service","text":"In your Application module\u2019s build.gradle file, add the following ( outside the android block): repositories { maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } } In your Application module\u2019s build.gradle file, add (or modify) the following in the dependencies block: implementation 'io.matthewnelson.topl-android:topl-service:2.2.0-SNAPSHOT' Warning SNAPSHOT versions are ever changing and may contain not yet fully fleshed out features. Do not ship a release.","title":"Using the SNAPSHOT version of topl-service"},{"location":"migration/","text":"Migration \u00b6 Migrating from 1.0.0 to 2.0.0 \u00b6 Your Application\u2019s TorSettings class needs to now extend ApplicationDefaultTorSettings Remove and re-import class paths, as all non-Builder classes were moved to the topl-service-base module The topl-core-base dependency is no longer required as it is automatically provided with topl-service . If you have a Tor module, other module\u2019s depending on it need only import the topl-service-base module now as all visible classes/abstractions have been moved there. The TorServiceController.getServiceTorSettings no longer requires context","title":"Migration"},{"location":"migration/#migration","text":"","title":"Migration"},{"location":"migration/#migrating-from-100-to-200","text":"Your Application\u2019s TorSettings class needs to now extend ApplicationDefaultTorSettings Remove and re-import class paths, as all non-Builder classes were moved to the topl-service-base module The topl-core-base dependency is no longer required as it is automatically provided with topl-service . If you have a Tor module, other module\u2019s depending on it need only import the topl-service-base module now as all visible classes/abstractions have been moved there. The TorServiceController.getServiceTorSettings no longer requires context","title":"Migrating from 1.0.0 to 2.0.0"},{"location":"releasing/","text":"Releasing TorOnionProxyLibrary-Android \u00b6 Create a local release branch from master git checkout master git pull git checkout -b release_2.2.0 Update VERSION_NAME (remove -SNAPSHOT ) in gradle.properties VERSION_NAME=2.2.0 Update the current version and next version in mkdocs.yml extra: topl_android: release: '2.2.0' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Perform a clean build ./gradlew clean ./gradlew build Generate the Dokka docs rm -rf docs/topl-core docs/topl-core-base docs/topl-service-base docs/topl-service ./gradlew topl-core-base:dokka topl-core:dokka topl-service-base:dokka topl-service:dokka Fix Dokka doc links ./gradlew fixDokkaDocLinks Update docs/changelog.md after checking out all changes: compare changes Update docs/roadmap.md with with new milestones: Project Roadmap Take one last look git diff Commit all local changes and PGP sign git commit -S -am \"Prepare 2.2.0 release\" Create a PGP signed tag, and push it git tag -s 2.2.0 -m \"Release v2.2.0\" git push origin 2.2.0 Make sure you have valid credentials in ~/.gradle/gradle.properties to sign and upload the artifacts SONATYPE_NEXUS_USERNAME=<Your Username> SONATYPE_NEXUS_PASSWORD=<Your Password> signing.gnupg.homeDir=/home/matthew/.gnupg/ signing.gnupg.optionsFile=/home/matthew/.gnupg/gpg.conf signing.gnupg.keyName=0x61471B8AB3890961 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Release to Maven Central Login to Sonatype OSS Nexus: oss.sonatype.org Click on Staging Repositories Scroll to the bottom, you should see an entry named iomatthewnelson-XXXX Check the box next to the iomatthewnelson-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the iomatthewnelson-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff -S release_2.2.0 Update VERSION_NAME (increase version and add -SNAPSHOT ) and VERSION_CODE in gradle.properties VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT VERSION_CODE=INCREMENT Commit your changes and sign with PGP keys git commit -S -am \"Prepare for next development iteration\" Push your changes git push Wait for the release to become available on Maven Central , then: Redeploy the docs: pipenv shell mkdocs serve to check locally mkdocs gh-deploy to deploy Check settings in GitHub that it did not revert the url back to use github.io Ensure docs are served Here exit Sign SampleApp release apks: scripts/sign_sampleapp_release_build.sh Go to the Draft a new release page Enter the release name (2.2.0) as tag and title. Have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. Upload the signed release apks.","title":"Releasing"},{"location":"releasing/#releasing-toronionproxylibrary-android","text":"Create a local release branch from master git checkout master git pull git checkout -b release_2.2.0 Update VERSION_NAME (remove -SNAPSHOT ) in gradle.properties VERSION_NAME=2.2.0 Update the current version and next version in mkdocs.yml extra: topl_android: release: '2.2.0' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Perform a clean build ./gradlew clean ./gradlew build Generate the Dokka docs rm -rf docs/topl-core docs/topl-core-base docs/topl-service-base docs/topl-service ./gradlew topl-core-base:dokka topl-core:dokka topl-service-base:dokka topl-service:dokka Fix Dokka doc links ./gradlew fixDokkaDocLinks Update docs/changelog.md after checking out all changes: compare changes Update docs/roadmap.md with with new milestones: Project Roadmap Take one last look git diff Commit all local changes and PGP sign git commit -S -am \"Prepare 2.2.0 release\" Create a PGP signed tag, and push it git tag -s 2.2.0 -m \"Release v2.2.0\" git push origin 2.2.0 Make sure you have valid credentials in ~/.gradle/gradle.properties to sign and upload the artifacts SONATYPE_NEXUS_USERNAME=<Your Username> SONATYPE_NEXUS_PASSWORD=<Your Password> signing.gnupg.homeDir=/home/matthew/.gnupg/ signing.gnupg.optionsFile=/home/matthew/.gnupg/gpg.conf signing.gnupg.keyName=0x61471B8AB3890961 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Release to Maven Central Login to Sonatype OSS Nexus: oss.sonatype.org Click on Staging Repositories Scroll to the bottom, you should see an entry named iomatthewnelson-XXXX Check the box next to the iomatthewnelson-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the iomatthewnelson-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff -S release_2.2.0 Update VERSION_NAME (increase version and add -SNAPSHOT ) and VERSION_CODE in gradle.properties VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT VERSION_CODE=INCREMENT Commit your changes and sign with PGP keys git commit -S -am \"Prepare for next development iteration\" Push your changes git push Wait for the release to become available on Maven Central , then: Redeploy the docs: pipenv shell mkdocs serve to check locally mkdocs gh-deploy to deploy Check settings in GitHub that it did not revert the url back to use github.io Ensure docs are served Here exit Sign SampleApp release apks: scripts/sign_sampleapp_release_build.sh Go to the Draft a new release page Enter the release name (2.2.0) as tag and title. Have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. Upload the signed release apks.","title":"Releasing TorOnionProxyLibrary-Android"},{"location":"roadmap/","text":"TOPL-Android Roadmap \u00b6 Alpha release Builder Option to disable stop service on task termination v3 Hidden Service Client Authentication support Pass-through commands to the TorControlConnection Transport Plugin support v3 Hidden Service Creation back","title":"Project Roadmap"},{"location":"roadmap/#topl-android-roadmap","text":"Alpha release Builder Option to disable stop service on task termination v3 Hidden Service Client Authentication support Pass-through commands to the TorControlConnection Transport Plugin support v3 Hidden Service Creation back","title":"TOPL-Android Roadmap"},{"location":"topl-core/","text":"topl-core Packages \u00b6 Name Summary io.matthewnelson.topl_core io.matthewnelson.topl_core.broadcaster io.matthewnelson.topl_core.listener io.matthewnelson.topl_core.settings io.matthewnelson.topl_core.util Index \u00b6 All Types","title":"Index"},{"location":"topl-core/#packages","text":"Name Summary io.matthewnelson.topl_core io.matthewnelson.topl_core.broadcaster io.matthewnelson.topl_core.listener io.matthewnelson.topl_core.settings io.matthewnelson.topl_core.util","title":"Packages"},{"location":"topl-core/#index","text":"All Types","title":"Index"},{"location":"topl-core/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.topl_core.listener.BaseEventListener \u00b6 Extend this class to customize implementation of the member overrides. | io.matthewnelson.topl_core.broadcaster.BroadcastLogger \u00b6 This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. | io.matthewnelson.topl_core.util.CoreConsts \u00b6 | io.matthewnelson.topl_core.util.FileUtilities \u00b6 | io.matthewnelson.topl_core.util.OnionAuthUtilities \u00b6 | io.matthewnelson.topl_core.OnionProxyManager \u00b6 This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. | io.matthewnelson.topl_core.util.TorInstaller \u00b6 Extend this class and implement the need methods. | io.matthewnelson.topl_core.settings.TorSettingsBuilder \u00b6 Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. | io.matthewnelson.topl_core.broadcaster.TorStateMachine \u00b6 Current State of Tor | io.matthewnelson.topl_core.util.Utilities \u00b6 | io.matthewnelson.topl_core.util.WriteObserver \u00b6 Adapted from the Briar WriteObserver code","title":"Index"},{"location":"topl-core/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_corelistenerbaseeventlistener","text":"Extend this class to customize implementation of the member overrides. |","title":"io.matthewnelson.topl_core.listener.BaseEventListener"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_corebroadcasterbroadcastlogger","text":"This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. |","title":"io.matthewnelson.topl_core.broadcaster.BroadcastLogger"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilcoreconsts","text":"|","title":"io.matthewnelson.topl_core.util.CoreConsts"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilfileutilities","text":"|","title":"io.matthewnelson.topl_core.util.FileUtilities"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilonionauthutilities","text":"|","title":"io.matthewnelson.topl_core.util.OnionAuthUtilities"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreonionproxymanager","text":"This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. |","title":"io.matthewnelson.topl_core.OnionProxyManager"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutiltorinstaller","text":"Extend this class and implement the need methods. |","title":"io.matthewnelson.topl_core.util.TorInstaller"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coresettingstorsettingsbuilder","text":"Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. |","title":"io.matthewnelson.topl_core.settings.TorSettingsBuilder"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_corebroadcastertorstatemachine","text":"Current State of Tor |","title":"io.matthewnelson.topl_core.broadcaster.TorStateMachine"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilutilities","text":"|","title":"io.matthewnelson.topl_core.util.Utilities"},{"location":"topl-core/alltypes/#iomatthewnelsontopl_coreutilwriteobserver","text":"Adapted from the Briar WriteObserver code","title":"io.matthewnelson.topl_core.util.WriteObserver"},{"location":"topl-core/io.matthewnelson.topl_core/","text":"topl-core / io.matthewnelson.topl_core Package io.matthewnelson.topl_core \u00b6 Types \u00b6 Name Summary OnionProxyManager This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. class OnionProxyManager : CoreConsts","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core/#package-iomatthewnelsontopl_core","text":"","title":"Package io.matthewnelson.topl_core"},{"location":"topl-core/io.matthewnelson.topl_core/#types","text":"Name Summary OnionProxyManager This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. class OnionProxyManager : CoreConsts","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager OnionProxyManager \u00b6 class OnionProxyManager : CoreConsts (source) This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. This class is thread safe but that\u2019s mostly because we hit everything over the head with \u2018synchronized\u2019. Given the way this class is used there shouldn\u2019t be any performance implications of this. This class began life as TorPlugin from the Briar Project Parameters \u00b6 context - Context. torConfigFiles - TorConfigFiles For setting up OnionProxyContext torInstaller - TorInstaller For setting up OnionProxyContext torSettings - TorSettings For setting up OnionProxyContext eventListener - BaseEventListener For processing Tor OP messages. eventBroadcaster - Your own broadcaster which extends EventBroadcaster buildConfigDebug - Send BuildConfig.DEBUG which will show Logcat messages for this module on Debug builds of your Application. If null , all the messages will still be broadcast to the provided EventBroadcaster and you can handle them there how you\u2019d like. Constructors \u00b6 Name Summary <init> This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. OnionProxyManager(context: Context , torConfigFiles: TorConfigFiles , torInstaller: TorInstaller , torSettings: TorSettings , eventListener: BaseEventListener , eventBroadcaster: EventBroadcaster , buildConfigDebug: Boolean ? = null) Properties \u00b6 Name Summary eventListener BaseEventListener For processing Tor OP messages. val eventListener: BaseEventListener hasControlConnection val hasControlConnection: Boolean iPv4LocalHostSocksPort Returns the socks port on the IPv4 localhost address that the Tor OP is listening on val iPv4LocalHostSocksPort: Int isIPv4LocalHostSocksPortOpen val isIPv4LocalHostSocksPortOpen: Boolean isRunning Checks to see if the Tor OP is running (e.g. fully bootstrapped) and open to network connections. val isRunning: Boolean processId val processId: String torConfigFiles val torConfigFiles: TorConfigFiles torInstaller val torInstaller: TorInstaller torPid val torPid: Int torSettings val torSettings: TorSettings torStateMachine val torStateMachine: TorStateMachine Functions \u00b6 Name Summary disableNetwork Tells the Tor OP if it should accept network connections. fun disableNetwork(disable: Boolean ): Unit getBroadcastLogger See BroadcastLoggerHelper.getBroadcastLogger fun getBroadcastLogger(clazz: Class <*>): BroadcastLogger fun getBroadcastLogger(tagName: String ): BroadcastLogger getInfo See the torspec for accepted queries: fun getInfo(queryCommand: String ): String ? getNewSettingsBuilder fun getNewSettingsBuilder(): TorSettingsBuilder hasNetworkConnectivity fun hasNetworkConnectivity(): Boolean killTorProcess fun killTorProcess(): Unit publishHiddenService Publishes a hidden service fun publishHiddenService(hiddenServicePort: Int , localPort: Int ): String refreshBroadcastLoggersHasDebugLogsVar See BroadcastLoggerHelper.refreshBroadcastLoggersHasDebugLogsVar fun refreshBroadcastLoggersHasDebugLogsVar(): Unit reloadTorConfig fun reloadTorConfig(): Boolean restartTorProcess fun restartTorProcess(): Unit setExitNode Sets the exit nodes through the tor control connection fun setExitNode(exitNodes: String ?): Boolean setup Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. fun setup(): Unit signalControlConnection Sends a signal to the TorControlConnection fun signalControlConnection(torControlSignalCommand: String ): Boolean signalNewNym Will signal for a NewNym, then broadcast NEWNYM_SUCCESS_MESSAGE if successful. suspend fun signalNewNym(): Unit start Starts tor control service if it isn\u2019t already running. fun start(): Unit stop Kills the Tor OP Process. Once you have called this method nothing is going to work until you either call startWithRepeat or start fun stop(): Unit Companion Object Properties \u00b6 Name Summary NEWNYM_NO_NETWORK const val NEWNYM_NO_NETWORK: String NEWNYM_RATE_LIMIT_PARTIAL_MSG const val NEWNYM_RATE_LIMIT_PARTIAL_MSG: String NEWNYM_SUCCESS_MESSAGE const val NEWNYM_SUCCESS_MESSAGE: String","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#onionproxymanager","text":"class OnionProxyManager : CoreConsts (source) This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. This class is thread safe but that\u2019s mostly because we hit everything over the head with \u2018synchronized\u2019. Given the way this class is used there shouldn\u2019t be any performance implications of this. This class began life as TorPlugin from the Briar Project","title":"OnionProxyManager"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#parameters","text":"context - Context. torConfigFiles - TorConfigFiles For setting up OnionProxyContext torInstaller - TorInstaller For setting up OnionProxyContext torSettings - TorSettings For setting up OnionProxyContext eventListener - BaseEventListener For processing Tor OP messages. eventBroadcaster - Your own broadcaster which extends EventBroadcaster buildConfigDebug - Send BuildConfig.DEBUG which will show Logcat messages for this module on Debug builds of your Application. If null , all the messages will still be broadcast to the provided EventBroadcaster and you can handle them there how you\u2019d like.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#constructors","text":"Name Summary <init> This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. OnionProxyManager(context: Context , torConfigFiles: TorConfigFiles , torInstaller: TorInstaller , torSettings: TorSettings , eventListener: BaseEventListener , eventBroadcaster: EventBroadcaster , buildConfigDebug: Boolean ? = null)","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#properties","text":"Name Summary eventListener BaseEventListener For processing Tor OP messages. val eventListener: BaseEventListener hasControlConnection val hasControlConnection: Boolean iPv4LocalHostSocksPort Returns the socks port on the IPv4 localhost address that the Tor OP is listening on val iPv4LocalHostSocksPort: Int isIPv4LocalHostSocksPortOpen val isIPv4LocalHostSocksPortOpen: Boolean isRunning Checks to see if the Tor OP is running (e.g. fully bootstrapped) and open to network connections. val isRunning: Boolean processId val processId: String torConfigFiles val torConfigFiles: TorConfigFiles torInstaller val torInstaller: TorInstaller torPid val torPid: Int torSettings val torSettings: TorSettings torStateMachine val torStateMachine: TorStateMachine","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#functions","text":"Name Summary disableNetwork Tells the Tor OP if it should accept network connections. fun disableNetwork(disable: Boolean ): Unit getBroadcastLogger See BroadcastLoggerHelper.getBroadcastLogger fun getBroadcastLogger(clazz: Class <*>): BroadcastLogger fun getBroadcastLogger(tagName: String ): BroadcastLogger getInfo See the torspec for accepted queries: fun getInfo(queryCommand: String ): String ? getNewSettingsBuilder fun getNewSettingsBuilder(): TorSettingsBuilder hasNetworkConnectivity fun hasNetworkConnectivity(): Boolean killTorProcess fun killTorProcess(): Unit publishHiddenService Publishes a hidden service fun publishHiddenService(hiddenServicePort: Int , localPort: Int ): String refreshBroadcastLoggersHasDebugLogsVar See BroadcastLoggerHelper.refreshBroadcastLoggersHasDebugLogsVar fun refreshBroadcastLoggersHasDebugLogsVar(): Unit reloadTorConfig fun reloadTorConfig(): Boolean restartTorProcess fun restartTorProcess(): Unit setExitNode Sets the exit nodes through the tor control connection fun setExitNode(exitNodes: String ?): Boolean setup Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. fun setup(): Unit signalControlConnection Sends a signal to the TorControlConnection fun signalControlConnection(torControlSignalCommand: String ): Boolean signalNewNym Will signal for a NewNym, then broadcast NEWNYM_SUCCESS_MESSAGE if successful. suspend fun signalNewNym(): Unit start Starts tor control service if it isn\u2019t already running. fun start(): Unit stop Kills the Tor OP Process. Once you have called this method nothing is going to work until you either call startWithRepeat or start fun stop(): Unit","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/#companion-object-properties","text":"Name Summary NEWNYM_NO_NETWORK const val NEWNYM_NO_NETWORK: String NEWNYM_RATE_LIMIT_PARTIAL_MSG const val NEWNYM_RATE_LIMIT_PARTIAL_MSG: String NEWNYM_SUCCESS_MESSAGE const val NEWNYM_SUCCESS_MESSAGE: String","title":"Companion Object Properties"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-init-/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / <init> <init> \u00b6 OnionProxyManager(context: Context , torConfigFiles: TorConfigFiles , torInstaller: TorInstaller , torSettings: TorSettings , eventListener: BaseEventListener , eventBroadcaster: EventBroadcaster , buildConfigDebug: Boolean ? = null) This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. This class is thread safe but that\u2019s mostly because we hit everything over the head with \u2018synchronized\u2019. Given the way this class is used there shouldn\u2019t be any performance implications of this. This class began life as TorPlugin from the Briar Project Parameters \u00b6 context - Context. torConfigFiles - TorConfigFiles For setting up OnionProxyContext torInstaller - TorInstaller For setting up OnionProxyContext torSettings - TorSettings For setting up OnionProxyContext eventListener - BaseEventListener For processing Tor OP messages. eventBroadcaster - Your own broadcaster which extends EventBroadcaster buildConfigDebug - Send BuildConfig.DEBUG which will show Logcat messages for this module on Debug builds of your Application. If null , all the messages will still be broadcast to the provided EventBroadcaster and you can handle them there how you\u2019d like.","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-init-/#init","text":"OnionProxyManager(context: Context , torConfigFiles: TorConfigFiles , torInstaller: TorInstaller , torSettings: TorSettings , eventListener: BaseEventListener , eventBroadcaster: EventBroadcaster , buildConfigDebug: Boolean ? = null) This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. This class is thread safe but that\u2019s mostly because we hit everything over the head with \u2018synchronized\u2019. Given the way this class is used there shouldn\u2019t be any performance implications of this. This class began life as TorPlugin from the Briar Project","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-init-/#parameters","text":"context - Context. torConfigFiles - TorConfigFiles For setting up OnionProxyContext torInstaller - TorInstaller For setting up OnionProxyContext torSettings - TorSettings For setting up OnionProxyContext eventListener - BaseEventListener For processing Tor OP messages. eventBroadcaster - Your own broadcaster which extends EventBroadcaster buildConfigDebug - Send BuildConfig.DEBUG which will show Logcat messages for this module on Debug builds of your Application. If null , all the messages will still be broadcast to the provided EventBroadcaster and you can handle them there how you\u2019d like.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-n-o_-n-e-t-w-o-r-k/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / NEWNYM_NO_NETWORK NEWNYM_NO_NETWORK \u00b6 const val NEWNYM_NO_NETWORK: String (source)","title":" n e w n y m  n o  n e t w o r k"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-n-o_-n-e-t-w-o-r-k/#newnym_no_network","text":"const val NEWNYM_NO_NETWORK: String (source)","title":"NEWNYM_NO_NETWORK"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-r-a-t-e_-l-i-m-i-t_-p-a-r-t-i-a-l_-m-s-g/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / NEWNYM_RATE_LIMIT_PARTIAL_MSG NEWNYM_RATE_LIMIT_PARTIAL_MSG \u00b6 const val NEWNYM_RATE_LIMIT_PARTIAL_MSG: String (source)","title":" n e w n y m  r a t e  l i m i t  p a r t i a l  m s g"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-r-a-t-e_-l-i-m-i-t_-p-a-r-t-i-a-l_-m-s-g/#newnym_rate_limit_partial_msg","text":"const val NEWNYM_RATE_LIMIT_PARTIAL_MSG: String (source)","title":"NEWNYM_RATE_LIMIT_PARTIAL_MSG"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-s-u-c-c-e-s-s_-m-e-s-s-a-g-e/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / NEWNYM_SUCCESS_MESSAGE NEWNYM_SUCCESS_MESSAGE \u00b6 const val NEWNYM_SUCCESS_MESSAGE: String (source)","title":" n e w n y m  s u c c e s s  m e s s a g e"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/-n-e-w-n-y-m_-s-u-c-c-e-s-s_-m-e-s-s-a-g-e/#newnym_success_message","text":"const val NEWNYM_SUCCESS_MESSAGE: String (source)","title":"NEWNYM_SUCCESS_MESSAGE"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/disable-network/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / disableNetwork disableNetwork \u00b6 @Synchronized fun disableNetwork(disable: Boolean ): Unit (source) Tells the Tor OP if it should accept network connections. Whenever setting Tor\u2019s Conf to DisableNetwork X , ONLY use this method to do it such that torStateMachine will reflect the proper io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState . Parameters \u00b6 disable - Sets Tor config DisableNetwork (1 if true , 0 if false ) Exceptions \u00b6 IOException - if having issues with TorControlConnection#setConf NullPointerException - if controlConnection is null even after checking.","title":"Disable network"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/disable-network/#disablenetwork","text":"@Synchronized fun disableNetwork(disable: Boolean ): Unit (source) Tells the Tor OP if it should accept network connections. Whenever setting Tor\u2019s Conf to DisableNetwork X , ONLY use this method to do it such that torStateMachine will reflect the proper io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState .","title":"disableNetwork"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/disable-network/#parameters","text":"disable - Sets Tor config DisableNetwork (1 if true , 0 if false )","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/disable-network/#exceptions","text":"IOException - if having issues with TorControlConnection#setConf NullPointerException - if controlConnection is null even after checking.","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/event-listener/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / eventListener eventListener \u00b6 val eventListener: BaseEventListener (source) BaseEventListener For processing Tor OP messages.","title":"Event listener"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/event-listener/#eventlistener","text":"val eventListener: BaseEventListener (source) BaseEventListener For processing Tor OP messages.","title":"eventListener"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-broadcast-logger/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / getBroadcastLogger getBroadcastLogger \u00b6 fun getBroadcastLogger(clazz: Class <*>): BroadcastLogger (source) See BroadcastLoggerHelper.getBroadcastLogger Parameters \u00b6 clazz - Class<*> - For initializing BroadcastLogger.TAG with your class\u2019 name. fun getBroadcastLogger(tagName: String ): BroadcastLogger (source) See BroadcastLoggerHelper.getBroadcastLogger Parameters \u00b6 tagName - String - For initializing BroadcastLogger.TAG .","title":"Get broadcast logger"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-broadcast-logger/#getbroadcastlogger","text":"fun getBroadcastLogger(clazz: Class <*>): BroadcastLogger (source) See BroadcastLoggerHelper.getBroadcastLogger","title":"getBroadcastLogger"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-broadcast-logger/#parameters","text":"clazz - Class<*> - For initializing BroadcastLogger.TAG with your class\u2019 name. fun getBroadcastLogger(tagName: String ): BroadcastLogger (source) See BroadcastLoggerHelper.getBroadcastLogger","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-broadcast-logger/#parameters_1","text":"tagName - String - For initializing BroadcastLogger.TAG .","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-info/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / getInfo getInfo \u00b6 fun getInfo(queryCommand: String ): String ? (source) See the torspec for accepted queries: https://torproject.gitlab.io/torspec/control-spec/#getinfo Parameters \u00b6 queryCommand - What data you are querying the TorControlConnection for","title":"Get info"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-info/#getinfo","text":"fun getInfo(queryCommand: String ): String ? (source) See the torspec for accepted queries: https://torproject.gitlab.io/torspec/control-spec/#getinfo","title":"getInfo"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-info/#parameters","text":"queryCommand - What data you are querying the TorControlConnection for","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-new-settings-builder/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / getNewSettingsBuilder getNewSettingsBuilder \u00b6 fun getNewSettingsBuilder(): TorSettingsBuilder (source)","title":"Get new settings builder"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/get-new-settings-builder/#getnewsettingsbuilder","text":"fun getNewSettingsBuilder(): TorSettingsBuilder (source)","title":"getNewSettingsBuilder"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/has-control-connection/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / hasControlConnection hasControlConnection \u00b6 val hasControlConnection: Boolean (source)","title":"Has control connection"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/has-control-connection/#hascontrolconnection","text":"val hasControlConnection: Boolean (source)","title":"hasControlConnection"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/has-network-connectivity/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / hasNetworkConnectivity hasNetworkConnectivity \u00b6 fun hasNetworkConnectivity(): Boolean (source)","title":"Has network connectivity"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/has-network-connectivity/#hasnetworkconnectivity","text":"fun hasNetworkConnectivity(): Boolean (source)","title":"hasNetworkConnectivity"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/i-pv4-local-host-socks-port/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / iPv4LocalHostSocksPort iPv4LocalHostSocksPort \u00b6 val iPv4LocalHostSocksPort: Int (source) Returns the socks port on the IPv4 localhost address that the Tor OP is listening on Exceptions \u00b6 IOException - TorControlConnection or File errors. RuntimeException - If Tor is not running or there\u2019s no localhost binding for Socks. NullPointerException - If controlConnection is null even after checking. Return Discovered socks port","title":"I pv4 local host socks port"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/i-pv4-local-host-socks-port/#ipv4localhostsocksport","text":"val iPv4LocalHostSocksPort: Int (source) Returns the socks port on the IPv4 localhost address that the Tor OP is listening on","title":"iPv4LocalHostSocksPort"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/i-pv4-local-host-socks-port/#exceptions","text":"IOException - TorControlConnection or File errors. RuntimeException - If Tor is not running or there\u2019s no localhost binding for Socks. NullPointerException - If controlConnection is null even after checking. Return Discovered socks port","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/is-i-pv4-local-host-socks-port-open/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / isIPv4LocalHostSocksPortOpen isIPv4LocalHostSocksPortOpen \u00b6 val isIPv4LocalHostSocksPortOpen: Boolean (source)","title":"Is i pv4 local host socks port open"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/is-i-pv4-local-host-socks-port-open/#isipv4localhostsocksportopen","text":"val isIPv4LocalHostSocksPortOpen: Boolean (source)","title":"isIPv4LocalHostSocksPortOpen"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/is-running/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / isRunning isRunning \u00b6 val isRunning: Boolean (source) Checks to see if the Tor OP is running (e.g. fully bootstrapped) and open to network connections. Return True if running","title":"Is running"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/is-running/#isrunning","text":"val isRunning: Boolean (source) Checks to see if the Tor OP is running (e.g. fully bootstrapped) and open to network connections. Return True if running","title":"isRunning"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/kill-tor-process/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / killTorProcess killTorProcess \u00b6 fun killTorProcess(): Unit (source)","title":"Kill tor process"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/kill-tor-process/#killtorprocess","text":"fun killTorProcess(): Unit (source)","title":"killTorProcess"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/process-id/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / processId processId \u00b6 val processId: String (source)","title":"Process id"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/process-id/#processid","text":"val processId: String (source)","title":"processId"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/publish-hidden-service/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / publishHiddenService publishHiddenService \u00b6 @Synchronized fun publishHiddenService(hiddenServicePort: Int , localPort: Int ): String (source) Publishes a hidden service Parameters \u00b6 hiddenServicePort - The port that the hidden service will accept connections on localPort - The local port that the hidden service will relay connections to Exceptions \u00b6 IOException - File errors RuntimeException - See io.matthewnelson.topl_core.util.WriteObserver.poll IllegalStateException - If controlConnection is null (service isn\u2019t running) NullPointerException - If controlConnection is null even after checking SecurityException - Unauthorized access to file/directory. IllegalArgumentException - Return The hidden service\u2019s onion address in the form X.onion.","title":"Publish hidden service"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/publish-hidden-service/#publishhiddenservice","text":"@Synchronized fun publishHiddenService(hiddenServicePort: Int , localPort: Int ): String (source) Publishes a hidden service","title":"publishHiddenService"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/publish-hidden-service/#parameters","text":"hiddenServicePort - The port that the hidden service will accept connections on localPort - The local port that the hidden service will relay connections to","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/publish-hidden-service/#exceptions","text":"IOException - File errors RuntimeException - See io.matthewnelson.topl_core.util.WriteObserver.poll IllegalStateException - If controlConnection is null (service isn\u2019t running) NullPointerException - If controlConnection is null even after checking SecurityException - Unauthorized access to file/directory. IllegalArgumentException - Return The hidden service\u2019s onion address in the form X.onion.","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/refresh-broadcast-loggers-has-debug-logs-var/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / refreshBroadcastLoggersHasDebugLogsVar refreshBroadcastLoggersHasDebugLogsVar \u00b6 fun refreshBroadcastLoggersHasDebugLogsVar(): Unit (source) See BroadcastLoggerHelper.refreshBroadcastLoggersHasDebugLogsVar","title":"Refresh broadcast loggers has debug logs var"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/refresh-broadcast-loggers-has-debug-logs-var/#refreshbroadcastloggershasdebuglogsvar","text":"fun refreshBroadcastLoggersHasDebugLogsVar(): Unit (source) See BroadcastLoggerHelper.refreshBroadcastLoggersHasDebugLogsVar","title":"refreshBroadcastLoggersHasDebugLogsVar"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/reload-tor-config/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / reloadTorConfig reloadTorConfig \u00b6 fun reloadTorConfig(): Boolean (source)","title":"Reload tor config"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/reload-tor-config/#reloadtorconfig","text":"fun reloadTorConfig(): Boolean (source)","title":"reloadTorConfig"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/restart-tor-process/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / restartTorProcess restartTorProcess \u00b6 fun restartTorProcess(): Unit (source)","title":"Restart tor process"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/restart-tor-process/#restarttorprocess","text":"fun restartTorProcess(): Unit (source)","title":"restartTorProcess"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/set-exit-node/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / setExitNode setExitNode \u00b6 fun setExitNode(exitNodes: String ?): Boolean (source) Sets the exit nodes through the tor control connection Parameters \u00b6 exitNodes - Return true if successfully set, otherwise false","title":"Set exit node"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/set-exit-node/#setexitnode","text":"fun setExitNode(exitNodes: String ?): Boolean (source) Sets the exit nodes through the tor control connection","title":"setExitNode"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/set-exit-node/#parameters","text":"exitNodes - Return true if successfully set, otherwise false","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/setup/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / setup setup \u00b6 fun setup(): Unit (source) Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked.","title":"Setup"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/setup/#setup","text":"fun setup(): Unit (source) Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked.","title":"setup"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-control-connection/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / signalControlConnection signalControlConnection \u00b6 fun signalControlConnection(torControlSignalCommand: String ): Boolean (source) Sends a signal to the TorControlConnection Parameters \u00b6 torControlSignalCommand - See TorControlCommands for acceptable SIGNAL_ values. Return true if the signal was received by TorControlConnection , false if not.","title":"Signal control connection"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-control-connection/#signalcontrolconnection","text":"fun signalControlConnection(torControlSignalCommand: String ): Boolean (source) Sends a signal to the TorControlConnection","title":"signalControlConnection"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-control-connection/#parameters","text":"torControlSignalCommand - See TorControlCommands for acceptable SIGNAL_ values. Return true if the signal was received by TorControlConnection , false if not.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-new-nym/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / signalNewNym signalNewNym \u00b6 @Synchronized suspend fun signalNewNym(): Unit (source) Will signal for a NewNym, then broadcast NEWNYM_SUCCESS_MESSAGE if successful. Because there is no way to easily ascertain success, we need to check see if we\u2019ve been rate limited. Being rate limited means we were not successful when signaling NEWNYM, so we don\u2019t want to broadcast the success message. See BaseEventListener for more information on how this is done via calling the BaseEventListener.beginWatchingNoticeMsgs & BaseEventListener.doesNoticeMsgBufferContain methods. If the eventListener you\u2019re instantiating OnionProxyManager with has it\u2019s BaseEventListener.noticeMsg being piped to the EventBroadcaster.broadcastNotice , you will receive the message of being rate limited.","title":"Signal new nym"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/signal-new-nym/#signalnewnym","text":"@Synchronized suspend fun signalNewNym(): Unit (source) Will signal for a NewNym, then broadcast NEWNYM_SUCCESS_MESSAGE if successful. Because there is no way to easily ascertain success, we need to check see if we\u2019ve been rate limited. Being rate limited means we were not successful when signaling NEWNYM, so we don\u2019t want to broadcast the success message. See BaseEventListener for more information on how this is done via calling the BaseEventListener.beginWatchingNoticeMsgs & BaseEventListener.doesNoticeMsgBufferContain methods. If the eventListener you\u2019re instantiating OnionProxyManager with has it\u2019s BaseEventListener.noticeMsg being piped to the EventBroadcaster.broadcastNotice , you will receive the message of being rate limited.","title":"signalNewNym"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/start/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / start start \u00b6 @Synchronized fun start(): Unit (source) Starts tor control service if it isn\u2019t already running. If the device does not have connectivity, disableNetwork will not be called to set Tor\u2019s config for DisableNetwork to false (0). Handling connectivity changes should be done via your own android.content.BroadcastReceiver and by calling disableNetwork when appropriate. Exceptions \u00b6 IOException - File errors SecurityException - Unauthorized access to file/directory. IllegalArgumentException - if onionProxyContext methods are passed incorrect CoreConsts.ConfigFile string values","title":"Start"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/start/#start","text":"@Synchronized fun start(): Unit (source) Starts tor control service if it isn\u2019t already running. If the device does not have connectivity, disableNetwork will not be called to set Tor\u2019s config for DisableNetwork to false (0). Handling connectivity changes should be done via your own android.content.BroadcastReceiver and by calling disableNetwork when appropriate.","title":"start"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/start/#exceptions","text":"IOException - File errors SecurityException - Unauthorized access to file/directory. IllegalArgumentException - if onionProxyContext methods are passed incorrect CoreConsts.ConfigFile string values","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/stop/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / stop stop \u00b6 @Synchronized fun stop(): Unit (source) Kills the Tor OP Process. Once you have called this method nothing is going to work until you either call startWithRepeat or start Exceptions \u00b6 NullPointerException - If controlConnection magically changes to null. IOException - If controlConnection is not responding to shutdownTor .","title":"Stop"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/stop/#stop","text":"@Synchronized fun stop(): Unit (source) Kills the Tor OP Process. Once you have called this method nothing is going to work until you either call startWithRepeat or start","title":"stop"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/stop/#exceptions","text":"NullPointerException - If controlConnection magically changes to null. IOException - If controlConnection is not responding to shutdownTor .","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-config-files/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torConfigFiles torConfigFiles \u00b6 val torConfigFiles: TorConfigFiles (source)","title":"Tor config files"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-config-files/#torconfigfiles","text":"val torConfigFiles: TorConfigFiles (source)","title":"torConfigFiles"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-installer/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torInstaller torInstaller \u00b6 val torInstaller: TorInstaller (source)","title":"Tor installer"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-installer/#torinstaller","text":"val torInstaller: TorInstaller (source)","title":"torInstaller"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-pid/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torPid torPid \u00b6 val torPid: Int (source)","title":"Tor pid"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-pid/#torpid","text":"val torPid: Int (source)","title":"torPid"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-settings/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torSettings torSettings \u00b6 val torSettings: TorSettings (source)","title":"Tor settings"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-settings/#torsettings","text":"val torSettings: TorSettings (source)","title":"torSettings"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-state-machine/","text":"topl-core / io.matthewnelson.topl_core / OnionProxyManager / torStateMachine torStateMachine \u00b6 val torStateMachine: TorStateMachine (source)","title":"Tor state machine"},{"location":"topl-core/io.matthewnelson.topl_core/-onion-proxy-manager/tor-state-machine/#torstatemachine","text":"val torStateMachine: TorStateMachine (source)","title":"torStateMachine"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/","text":"topl-core / io.matthewnelson.topl_core.broadcaster Package io.matthewnelson.topl_core.broadcaster \u00b6 Types \u00b6 Name Summary BroadcastLogger This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. class BroadcastLogger : CoreConsts TorStateMachine Current State of Tor class TorStateMachine : CoreConsts","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/#package-iomatthewnelsontopl_corebroadcaster","text":"","title":"Package io.matthewnelson.topl_core.broadcaster"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/#types","text":"Name Summary BroadcastLogger This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. class BroadcastLogger : CoreConsts TorStateMachine Current State of Tor class TorStateMachine : CoreConsts","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger BroadcastLogger \u00b6 class BroadcastLogger : CoreConsts (source) This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. To enable Logcat messages, buildConfigDebug must be true (w/e you have sent io.matthewnelson.topl_core.OnionProxyManager upon instantiation), and TorSettings.hasDebugLogs must also be true . This way if your implementation of the Library is causing problems in your App you need only set TorSettings.hasDebugLogs to true for a Debug build of your App. See helper method io.matthewnelson.topl_core.OnionProxyManager.getBroadcastLogger to instantiate. Parameters \u00b6 TAG - Typically, the class name, but able to be set to whatever you wish eventBroadcaster - For broadcasting the info buildConfigDebug - To enable/disable Logcat messages hasDebugLogs - To switch debug logs on/off, as well as Logcat messages on Debug builds. Properties \u00b6 Name Summary eventBroadcaster For broadcasting the info val eventBroadcaster: EventBroadcaster TAG Typically, the class name, but able to be set to whatever you wish val TAG: String Functions \u00b6 Name Summary debug Will only broadcast if hasDebugLogs is on. fun debug(msg: String ): Unit error fun error(msg: String ): Unit exception fun exception(e: Exception ): Unit notice fun notice(msg: String ): Unit torState fun torState(state: String , networkState: String ): Unit warn fun warn(msg: String ): Unit","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/#broadcastlogger","text":"class BroadcastLogger : CoreConsts (source) This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. To enable Logcat messages, buildConfigDebug must be true (w/e you have sent io.matthewnelson.topl_core.OnionProxyManager upon instantiation), and TorSettings.hasDebugLogs must also be true . This way if your implementation of the Library is causing problems in your App you need only set TorSettings.hasDebugLogs to true for a Debug build of your App. See helper method io.matthewnelson.topl_core.OnionProxyManager.getBroadcastLogger to instantiate.","title":"BroadcastLogger"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/#parameters","text":"TAG - Typically, the class name, but able to be set to whatever you wish eventBroadcaster - For broadcasting the info buildConfigDebug - To enable/disable Logcat messages hasDebugLogs - To switch debug logs on/off, as well as Logcat messages on Debug builds.","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/#properties","text":"Name Summary eventBroadcaster For broadcasting the info val eventBroadcaster: EventBroadcaster TAG Typically, the class name, but able to be set to whatever you wish val TAG: String","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/#functions","text":"Name Summary debug Will only broadcast if hasDebugLogs is on. fun debug(msg: String ): Unit error fun error(msg: String ): Unit exception fun exception(e: Exception ): Unit notice fun notice(msg: String ): Unit torState fun torState(state: String , networkState: String ): Unit warn fun warn(msg: String ): Unit","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/-t-a-g/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / TAG TAG \u00b6 val TAG: String (source) Typically, the class name, but able to be set to whatever you wish","title":" t a g"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/-t-a-g/#tag","text":"val TAG: String (source) Typically, the class name, but able to be set to whatever you wish","title":"TAG"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/debug/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / debug debug \u00b6 fun debug(msg: String ): Unit (source) Will only broadcast if hasDebugLogs is on.","title":"Debug"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/debug/#debug","text":"fun debug(msg: String ): Unit (source) Will only broadcast if hasDebugLogs is on.","title":"debug"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/error/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / error error \u00b6 fun error(msg: String ): Unit (source)","title":"Error"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/error/#error","text":"fun error(msg: String ): Unit (source)","title":"error"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/event-broadcaster/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / eventBroadcaster eventBroadcaster \u00b6 val eventBroadcaster: EventBroadcaster (source) For broadcasting the info","title":"Event broadcaster"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/event-broadcaster/#eventbroadcaster","text":"val eventBroadcaster: EventBroadcaster (source) For broadcasting the info","title":"eventBroadcaster"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/exception/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / exception exception \u00b6 fun exception(e: Exception ): Unit (source)","title":"Exception"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/exception/#exception","text":"fun exception(e: Exception ): Unit (source)","title":"exception"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/notice/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / notice notice \u00b6 fun notice(msg: String ): Unit (source)","title":"Notice"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/notice/#notice","text":"fun notice(msg: String ): Unit (source)","title":"notice"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/tor-state/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / torState torState \u00b6 fun torState(state: String , networkState: String ): Unit (source)","title":"Tor state"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/tor-state/#torstate","text":"fun torState(state: String , networkState: String ): Unit (source)","title":"torState"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/warn/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / BroadcastLogger / warn warn \u00b6 fun warn(msg: String ): Unit (source)","title":"Warn"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-broadcast-logger/warn/#warn","text":"fun warn(msg: String ): Unit (source)","title":"warn"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine TorStateMachine \u00b6 class TorStateMachine : CoreConsts (source) Current State of Tor Properties \u00b6 Name Summary isNetworkDisabled val isNetworkDisabled: Boolean isOff val isOff: Boolean isOn val isOn: Boolean isStarting val isStarting: Boolean isStopping val isStopping: Boolean","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/#torstatemachine","text":"class TorStateMachine : CoreConsts (source) Current State of Tor","title":"TorStateMachine"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/#properties","text":"Name Summary isNetworkDisabled val isNetworkDisabled: Boolean isOff val isOff: Boolean isOn val isOn: Boolean isStarting val isStarting: Boolean isStopping val isStopping: Boolean","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-network-disabled/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isNetworkDisabled isNetworkDisabled \u00b6 val isNetworkDisabled: Boolean (source)","title":"Is network disabled"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-network-disabled/#isnetworkdisabled","text":"val isNetworkDisabled: Boolean (source)","title":"isNetworkDisabled"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-off/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isOff isOff \u00b6 val isOff: Boolean (source)","title":"Is off"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-off/#isoff","text":"val isOff: Boolean (source)","title":"isOff"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-on/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isOn isOn \u00b6 val isOn: Boolean (source)","title":"Is on"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-on/#ison","text":"val isOn: Boolean (source)","title":"isOn"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-starting/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isStarting isStarting \u00b6 val isStarting: Boolean (source)","title":"Is starting"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-starting/#isstarting","text":"val isStarting: Boolean (source)","title":"isStarting"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-stopping/","text":"topl-core / io.matthewnelson.topl_core.broadcaster / TorStateMachine / isStopping isStopping \u00b6 val isStopping: Boolean (source)","title":"Is stopping"},{"location":"topl-core/io.matthewnelson.topl_core.broadcaster/-tor-state-machine/is-stopping/#isstopping","text":"val isStopping: Boolean (source)","title":"isStopping"},{"location":"topl-core/io.matthewnelson.topl_core.listener/","text":"topl-core / io.matthewnelson.topl_core.listener Package io.matthewnelson.topl_core.listener \u00b6 Types \u00b6 Name Summary BaseEventListener Extend this class to customize implementation of the member overrides. abstract class BaseEventListener : EventListener","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.listener/#package-iomatthewnelsontopl_corelistener","text":"","title":"Package io.matthewnelson.topl_core.listener"},{"location":"topl-core/io.matthewnelson.topl_core.listener/#types","text":"Name Summary BaseEventListener Extend this class to customize implementation of the member overrides. abstract class BaseEventListener : EventListener","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener BaseEventListener \u00b6 abstract class BaseEventListener : EventListener (source) Extend this class to customize implementation of the member overrides. Constructors \u00b6 Name Summary <init> Extend this class to customize implementation of the member overrides. BaseEventListener() Properties \u00b6 Name Summary broadcastLogger This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller . var broadcastLogger: BroadcastLogger ? CONTROL_COMMAND_EVENTS See TorControlCommands.EVENT_NAMES values. These are REQUIRED for registering them in io.matthewnelson.topl_core.OnionProxyManager.start which allows you full control over what you wish to listen for. abstract val CONTROL_COMMAND_EVENTS: Array < String > Functions \u00b6 Name Summary noticeMsg Requires that when you extend this class and override noticeMsg , you must use super.noticeMsg(data) within your overridden method; otherwise, noticeMsgBuffer and doesNoticeMsgBufferContain will not work correctly. open fun noticeMsg(data: String ?): Unit","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/#baseeventlistener","text":"abstract class BaseEventListener : EventListener (source) Extend this class to customize implementation of the member overrides.","title":"BaseEventListener"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/#constructors","text":"Name Summary <init> Extend this class to customize implementation of the member overrides. BaseEventListener()","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/#properties","text":"Name Summary broadcastLogger This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller . var broadcastLogger: BroadcastLogger ? CONTROL_COMMAND_EVENTS See TorControlCommands.EVENT_NAMES values. These are REQUIRED for registering them in io.matthewnelson.topl_core.OnionProxyManager.start which allows you full control over what you wish to listen for. abstract val CONTROL_COMMAND_EVENTS: Array < String >","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/#functions","text":"Name Summary noticeMsg Requires that when you extend this class and override noticeMsg , you must use super.noticeMsg(data) within your overridden method; otherwise, noticeMsgBuffer and doesNoticeMsgBufferContain will not work correctly. open fun noticeMsg(data: String ?): Unit","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/-c-o-n-t-r-o-l_-c-o-m-m-a-n-d_-e-v-e-n-t-s/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener / CONTROL_COMMAND_EVENTS CONTROL_COMMAND_EVENTS \u00b6 abstract val CONTROL_COMMAND_EVENTS: Array < String > (source) See TorControlCommands.EVENT_NAMES values. These are REQUIRED for registering them in io.matthewnelson.topl_core.OnionProxyManager.start which allows you full control over what you wish to listen for.","title":" c o n t r o l  c o m m a n d  e v e n t s"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/-c-o-n-t-r-o-l_-c-o-m-m-a-n-d_-e-v-e-n-t-s/#control_command_events","text":"abstract val CONTROL_COMMAND_EVENTS: Array < String > (source) See TorControlCommands.EVENT_NAMES values. These are REQUIRED for registering them in io.matthewnelson.topl_core.OnionProxyManager.start which allows you full control over what you wish to listen for.","title":"CONTROL_COMMAND_EVENTS"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/-init-/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener / <init> <init> \u00b6 BaseEventListener() Extend this class to customize implementation of the member overrides.","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/-init-/#init","text":"BaseEventListener() Extend this class to customize implementation of the member overrides.","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/broadcast-logger/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener / broadcastLogger broadcastLogger \u00b6 protected var broadcastLogger: BroadcastLogger ? (source) This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller .","title":"Broadcast logger"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/broadcast-logger/#broadcastlogger","text":"protected var broadcastLogger: BroadcastLogger ? (source) This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller .","title":"broadcastLogger"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/notice-msg/","text":"topl-core / io.matthewnelson.topl_core.listener / BaseEventListener / noticeMsg noticeMsg \u00b6 open fun noticeMsg(data: String ?): Unit (source) Requires that when you extend this class and override noticeMsg , you must use super.noticeMsg(data) within your overridden method; otherwise, noticeMsgBuffer and doesNoticeMsgBufferContain will not work correctly.","title":"Notice msg"},{"location":"topl-core/io.matthewnelson.topl_core.listener/-base-event-listener/notice-msg/#noticemsg","text":"open fun noticeMsg(data: String ?): Unit (source) Requires that when you extend this class and override noticeMsg , you must use super.noticeMsg(data) within your overridden method; otherwise, noticeMsgBuffer and doesNoticeMsgBufferContain will not work correctly.","title":"noticeMsg"},{"location":"topl-core/io.matthewnelson.topl_core.settings/","text":"topl-core / io.matthewnelson.topl_core.settings Package io.matthewnelson.topl_core.settings \u00b6 Types \u00b6 Name Summary TorSettingsBuilder Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. class TorSettingsBuilder : CoreConsts","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.settings/#package-iomatthewnelsontopl_coresettings","text":"","title":"Package io.matthewnelson.topl_core.settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/#types","text":"Name Summary TorSettingsBuilder Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. class TorSettingsBuilder : CoreConsts","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder TorSettingsBuilder \u00b6 class TorSettingsBuilder : CoreConsts (source) Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. This class is basically a torrc file builder. Every method you call adds a specific value to the buffer which Tor understands. You can call addLine if something isn\u2019t covered here so you can customize your torrc file however you wish. Calling finishAndReturnString will return to you the String that has been built for you to write to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . Calling finishAndWriteToTorrcFile will do just that. onionProxyManager . getNewSettingsBuilder () . updateTorSettings () . setGeoIpFiles () . setV3AuthPrivateDir () . finishAndWriteToTorrcFile () Parameters \u00b6 onionProxyContext - OnionProxyContext broadcastLogger - for broadcasting/logging Functions \u00b6 Name Summary addBridge fun addBridge(type: String ?, config: String ?): TorSettingsBuilder addBridgesFromResources Adds bridges from a resource stream. This relies on the io.matthewnelson.topl_core.util.TorInstaller to know how to obtain this stream. These entries may be type-specified like: fun addBridgesFromResources(): TorSettingsBuilder addCustomBridge fun addCustomBridge(config: String ?): TorSettingsBuilder addLine Add a new line to the buffer if a setting here is not available. fun addLine(value: String ?): TorSettingsBuilder automapHostsOnResolve fun automapHostsOnResolve(enable: Boolean ): TorSettingsBuilder automapHostsOnResolveFromSettings fun automapHostsOnResolveFromSettings(): TorSettingsBuilder bridgesFromSettings fun bridgesFromSettings(): TorSettingsBuilder configurePluggableTransportsFromSettings fun configurePluggableTransportsFromSettings(pluggableTransportClient: File ?): TorSettingsBuilder connectionPadding fun connectionPadding(setting: String ): TorSettingsBuilder connectionPaddingFromSettings fun connectionPaddingFromSettings(): TorSettingsBuilder controlPortWriteToFile fun controlPortWriteToFile(torConfigFiles: TorConfigFiles ): TorSettingsBuilder controlPortWriteToFileFromConfig fun controlPortWriteToFileFromConfig(): TorSettingsBuilder cookieAuthentication fun cookieAuthentication(): TorSettingsBuilder cookieAuthenticationFromSettings fun cookieAuthenticationFromSettings(): TorSettingsBuilder debugLogs fun debugLogs(): TorSettingsBuilder debugLogsFromSettings fun debugLogsFromSettings(): TorSettingsBuilder disableNetwork fun disableNetwork(disable: Boolean ): TorSettingsBuilder disableNetworkFromSettings fun disableNetworkFromSettings(): TorSettingsBuilder dnsPort fun dnsPort(dnsPort: String , isolationFlags: List < String >?): TorSettingsBuilder dnsPortFromSettings fun dnsPortFromSettings(): TorSettingsBuilder dormantCanceledByStartup fun dormantCanceledByStartup(enable: Boolean ): TorSettingsBuilder dormantCanceledByStartupFromSettings fun dormantCanceledByStartupFromSettings(): TorSettingsBuilder dormantClientTimeoutFromSettings fun dormantClientTimeoutFromSettings(): TorSettingsBuilder dormantClientTimetout fun dormantClientTimetout(minutes: Int ): TorSettingsBuilder entryNodes fun entryNodes(entryNodes: String ?): TorSettingsBuilder excludeNodes fun excludeNodes(excludeNodes: String ?): TorSettingsBuilder exitNodes fun exitNodes(exitNodes: String ?): TorSettingsBuilder finishAndReturnString This returns what\u2019s in the buffer as a String and then clears it. You still need to write the String to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . fun finishAndReturnString(): String finishAndWriteToTorrcFile A convenience method for after populating the buffer by calling updateTorSettings . It will overwrite your current torrc file (or create a new one if it doesn\u2019t exist) with the new settings. fun finishAndWriteToTorrcFile(): Unit geoIpFile fun geoIpFile(path: String ?): TorSettingsBuilder geoIpV6File fun geoIpV6File(path: String ?): TorSettingsBuilder httpTunnelPort fun httpTunnelPort(port: String , isolationFlags: List < String >?): TorSettingsBuilder httpTunnelPortFromSettings fun httpTunnelPortFromSettings(): TorSettingsBuilder makeNonExitRelay fun makeNonExitRelay(dnsFile: String , orPort: String , nickname: String ): TorSettingsBuilder nodesFromSettings Sets the entry/exit/exclude nodes fun nodesFromSettings(): TorSettingsBuilder nonExitRelayFromSettings Adds non exit relay to builder. This method uses a default Quad9 nameserver. fun nonExitRelayFromSettings(): TorSettingsBuilder proxyOnAllInterfaces fun proxyOnAllInterfaces(): TorSettingsBuilder proxyOnAllInterfacesFromSettings fun proxyOnAllInterfacesFromSettings(): TorSettingsBuilder proxySocks5 Set socks5 proxy with no authentication. fun proxySocks5(host: String ?, port: Int ?): TorSettingsBuilder proxySocks5FromSettings fun proxySocks5FromSettings(): TorSettingsBuilder proxyWithAuthentication Sets proxyWithAuthentication information. fun proxyWithAuthentication(proxyType: String ?, proxyHost: String ?, proxyPort: Int ?, proxyUser: String ?, proxyPass: String ?): TorSettingsBuilder proxyWithAuthenticationFromSettings fun proxyWithAuthenticationFromSettings(): TorSettingsBuilder reachableAddressesFromSettings fun reachableAddressesFromSettings(): TorSettingsBuilder reachableAddressPorts fun reachableAddressPorts(reachableAddressesPorts: String ?): TorSettingsBuilder reducedConnectionPadding fun reducedConnectionPadding(enable: Boolean ): TorSettingsBuilder reducedConnectionPaddingFromSettings fun reducedConnectionPaddingFromSettings(): TorSettingsBuilder reset fun reset(): Unit runAsDaemon fun runAsDaemon(enable: Boolean ): TorSettingsBuilder runAsDaemonFromSettings fun runAsDaemonFromSettings(): TorSettingsBuilder safeSocks fun safeSocks(enable: Boolean ): TorSettingsBuilder safeSocksFromSettings fun safeSocksFromSettings(): TorSettingsBuilder setGeoIpFiles Ensure that you have setup io.matthewnelson.topl_core.util.TorInstaller such that you\u2019ve copied the geoip/geoip6 files over prior to calling this. fun setGeoIpFiles(): TorSettingsBuilder setV3AuthPrivateDir Will add to the torrc file \u201cClientOnionAuthDir </data/data/path/to/directory>, so be sure to create the directory if it does not exist in TorInstaller.setup prior to utilizing this method when building your torrc file. fun setV3AuthPrivateDir(): TorSettingsBuilder socksPort fun socksPort(socksPort: String , isolationFlags: List < String >?): TorSettingsBuilder socksPortFromSettings fun socksPortFromSettings(): TorSettingsBuilder strictNodes fun strictNodes(enable: Boolean ): TorSettingsBuilder strictNodesFromSettings fun strictNodesFromSettings(): TorSettingsBuilder testSocks fun testSocks(enable: Boolean ): TorSettingsBuilder testSocksFromSettings fun testSocksFromSettings(): TorSettingsBuilder torrcCustomFromSettings fun torrcCustomFromSettings(): TorSettingsBuilder transPort fun transPort(transPort: String , isolationFlags: List < String >?): TorSettingsBuilder transPortFromSettings fun transPortFromSettings(): TorSettingsBuilder transportPlugin fun transportPlugin(clientPath: String ): TorSettingsBuilder updateTorSettings Updates the buffer for all methods annotated with SettingsConfig . You still need to call finishAndReturnString and then write the returned String to your io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . fun updateTorSettings(): TorSettingsBuilder useBridges fun useBridges(useThem: Boolean ): TorSettingsBuilder useBridgesFromSettings fun useBridgesFromSettings(): TorSettingsBuilder v3AuthPrivateDir fun v3AuthPrivateDir(path: String ?): TorSettingsBuilder virtualAddressNetwork fun virtualAddressNetwork(address: String ?): TorSettingsBuilder virtualAddressNetworkFromSettings fun virtualAddressNetworkFromSettings(): TorSettingsBuilder","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/#torsettingsbuilder","text":"class TorSettingsBuilder : CoreConsts (source) Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. This class is basically a torrc file builder. Every method you call adds a specific value to the buffer which Tor understands. You can call addLine if something isn\u2019t covered here so you can customize your torrc file however you wish. Calling finishAndReturnString will return to you the String that has been built for you to write to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . Calling finishAndWriteToTorrcFile will do just that. onionProxyManager . getNewSettingsBuilder () . updateTorSettings () . setGeoIpFiles () . setV3AuthPrivateDir () . finishAndWriteToTorrcFile ()","title":"TorSettingsBuilder"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/#parameters","text":"onionProxyContext - OnionProxyContext broadcastLogger - for broadcasting/logging","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/#functions","text":"Name Summary addBridge fun addBridge(type: String ?, config: String ?): TorSettingsBuilder addBridgesFromResources Adds bridges from a resource stream. This relies on the io.matthewnelson.topl_core.util.TorInstaller to know how to obtain this stream. These entries may be type-specified like: fun addBridgesFromResources(): TorSettingsBuilder addCustomBridge fun addCustomBridge(config: String ?): TorSettingsBuilder addLine Add a new line to the buffer if a setting here is not available. fun addLine(value: String ?): TorSettingsBuilder automapHostsOnResolve fun automapHostsOnResolve(enable: Boolean ): TorSettingsBuilder automapHostsOnResolveFromSettings fun automapHostsOnResolveFromSettings(): TorSettingsBuilder bridgesFromSettings fun bridgesFromSettings(): TorSettingsBuilder configurePluggableTransportsFromSettings fun configurePluggableTransportsFromSettings(pluggableTransportClient: File ?): TorSettingsBuilder connectionPadding fun connectionPadding(setting: String ): TorSettingsBuilder connectionPaddingFromSettings fun connectionPaddingFromSettings(): TorSettingsBuilder controlPortWriteToFile fun controlPortWriteToFile(torConfigFiles: TorConfigFiles ): TorSettingsBuilder controlPortWriteToFileFromConfig fun controlPortWriteToFileFromConfig(): TorSettingsBuilder cookieAuthentication fun cookieAuthentication(): TorSettingsBuilder cookieAuthenticationFromSettings fun cookieAuthenticationFromSettings(): TorSettingsBuilder debugLogs fun debugLogs(): TorSettingsBuilder debugLogsFromSettings fun debugLogsFromSettings(): TorSettingsBuilder disableNetwork fun disableNetwork(disable: Boolean ): TorSettingsBuilder disableNetworkFromSettings fun disableNetworkFromSettings(): TorSettingsBuilder dnsPort fun dnsPort(dnsPort: String , isolationFlags: List < String >?): TorSettingsBuilder dnsPortFromSettings fun dnsPortFromSettings(): TorSettingsBuilder dormantCanceledByStartup fun dormantCanceledByStartup(enable: Boolean ): TorSettingsBuilder dormantCanceledByStartupFromSettings fun dormantCanceledByStartupFromSettings(): TorSettingsBuilder dormantClientTimeoutFromSettings fun dormantClientTimeoutFromSettings(): TorSettingsBuilder dormantClientTimetout fun dormantClientTimetout(minutes: Int ): TorSettingsBuilder entryNodes fun entryNodes(entryNodes: String ?): TorSettingsBuilder excludeNodes fun excludeNodes(excludeNodes: String ?): TorSettingsBuilder exitNodes fun exitNodes(exitNodes: String ?): TorSettingsBuilder finishAndReturnString This returns what\u2019s in the buffer as a String and then clears it. You still need to write the String to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . fun finishAndReturnString(): String finishAndWriteToTorrcFile A convenience method for after populating the buffer by calling updateTorSettings . It will overwrite your current torrc file (or create a new one if it doesn\u2019t exist) with the new settings. fun finishAndWriteToTorrcFile(): Unit geoIpFile fun geoIpFile(path: String ?): TorSettingsBuilder geoIpV6File fun geoIpV6File(path: String ?): TorSettingsBuilder httpTunnelPort fun httpTunnelPort(port: String , isolationFlags: List < String >?): TorSettingsBuilder httpTunnelPortFromSettings fun httpTunnelPortFromSettings(): TorSettingsBuilder makeNonExitRelay fun makeNonExitRelay(dnsFile: String , orPort: String , nickname: String ): TorSettingsBuilder nodesFromSettings Sets the entry/exit/exclude nodes fun nodesFromSettings(): TorSettingsBuilder nonExitRelayFromSettings Adds non exit relay to builder. This method uses a default Quad9 nameserver. fun nonExitRelayFromSettings(): TorSettingsBuilder proxyOnAllInterfaces fun proxyOnAllInterfaces(): TorSettingsBuilder proxyOnAllInterfacesFromSettings fun proxyOnAllInterfacesFromSettings(): TorSettingsBuilder proxySocks5 Set socks5 proxy with no authentication. fun proxySocks5(host: String ?, port: Int ?): TorSettingsBuilder proxySocks5FromSettings fun proxySocks5FromSettings(): TorSettingsBuilder proxyWithAuthentication Sets proxyWithAuthentication information. fun proxyWithAuthentication(proxyType: String ?, proxyHost: String ?, proxyPort: Int ?, proxyUser: String ?, proxyPass: String ?): TorSettingsBuilder proxyWithAuthenticationFromSettings fun proxyWithAuthenticationFromSettings(): TorSettingsBuilder reachableAddressesFromSettings fun reachableAddressesFromSettings(): TorSettingsBuilder reachableAddressPorts fun reachableAddressPorts(reachableAddressesPorts: String ?): TorSettingsBuilder reducedConnectionPadding fun reducedConnectionPadding(enable: Boolean ): TorSettingsBuilder reducedConnectionPaddingFromSettings fun reducedConnectionPaddingFromSettings(): TorSettingsBuilder reset fun reset(): Unit runAsDaemon fun runAsDaemon(enable: Boolean ): TorSettingsBuilder runAsDaemonFromSettings fun runAsDaemonFromSettings(): TorSettingsBuilder safeSocks fun safeSocks(enable: Boolean ): TorSettingsBuilder safeSocksFromSettings fun safeSocksFromSettings(): TorSettingsBuilder setGeoIpFiles Ensure that you have setup io.matthewnelson.topl_core.util.TorInstaller such that you\u2019ve copied the geoip/geoip6 files over prior to calling this. fun setGeoIpFiles(): TorSettingsBuilder setV3AuthPrivateDir Will add to the torrc file \u201cClientOnionAuthDir </data/data/path/to/directory>, so be sure to create the directory if it does not exist in TorInstaller.setup prior to utilizing this method when building your torrc file. fun setV3AuthPrivateDir(): TorSettingsBuilder socksPort fun socksPort(socksPort: String , isolationFlags: List < String >?): TorSettingsBuilder socksPortFromSettings fun socksPortFromSettings(): TorSettingsBuilder strictNodes fun strictNodes(enable: Boolean ): TorSettingsBuilder strictNodesFromSettings fun strictNodesFromSettings(): TorSettingsBuilder testSocks fun testSocks(enable: Boolean ): TorSettingsBuilder testSocksFromSettings fun testSocksFromSettings(): TorSettingsBuilder torrcCustomFromSettings fun torrcCustomFromSettings(): TorSettingsBuilder transPort fun transPort(transPort: String , isolationFlags: List < String >?): TorSettingsBuilder transPortFromSettings fun transPortFromSettings(): TorSettingsBuilder transportPlugin fun transportPlugin(clientPath: String ): TorSettingsBuilder updateTorSettings Updates the buffer for all methods annotated with SettingsConfig . You still need to call finishAndReturnString and then write the returned String to your io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . fun updateTorSettings(): TorSettingsBuilder useBridges fun useBridges(useThem: Boolean ): TorSettingsBuilder useBridgesFromSettings fun useBridgesFromSettings(): TorSettingsBuilder v3AuthPrivateDir fun v3AuthPrivateDir(path: String ?): TorSettingsBuilder virtualAddressNetwork fun virtualAddressNetwork(address: String ?): TorSettingsBuilder virtualAddressNetworkFromSettings fun virtualAddressNetworkFromSettings(): TorSettingsBuilder","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-bridge/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / addBridge addBridge \u00b6 fun addBridge(type: String ?, config: String ?): TorSettingsBuilder (source)","title":"Add bridge"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-bridge/#addbridge","text":"fun addBridge(type: String ?, config: String ?): TorSettingsBuilder (source)","title":"addBridge"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-bridges-from-resources/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / addBridgesFromResources addBridgesFromResources \u00b6 fun addBridgesFromResources(): TorSettingsBuilder (source) Adds bridges from a resource stream. This relies on the io.matthewnelson.topl_core.util.TorInstaller to know how to obtain this stream. These entries may be type-specified like: obfs3 169.229.59.74:31493 AF9F66B7B04F8FF6F32D455F05135250A16543C9 Or it may just be a custom entry like 69.163.45.129:443 9F090DE98CA6F67DEEB1F87EFE7C1BFD884E6E2F See io.matthewnelson.topl_core.util.TorInstaller comment for further details on how to implement that. TODO: Re-work format type to use annotations\u2026","title":"Add bridges from resources"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-bridges-from-resources/#addbridgesfromresources","text":"fun addBridgesFromResources(): TorSettingsBuilder (source) Adds bridges from a resource stream. This relies on the io.matthewnelson.topl_core.util.TorInstaller to know how to obtain this stream. These entries may be type-specified like: obfs3 169.229.59.74:31493 AF9F66B7B04F8FF6F32D455F05135250A16543C9 Or it may just be a custom entry like 69.163.45.129:443 9F090DE98CA6F67DEEB1F87EFE7C1BFD884E6E2F See io.matthewnelson.topl_core.util.TorInstaller comment for further details on how to implement that. TODO: Re-work format type to use annotations\u2026","title":"addBridgesFromResources"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-custom-bridge/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / addCustomBridge addCustomBridge \u00b6 fun addCustomBridge(config: String ?): TorSettingsBuilder (source)","title":"Add custom bridge"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-custom-bridge/#addcustombridge","text":"fun addCustomBridge(config: String ?): TorSettingsBuilder (source)","title":"addCustomBridge"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-line/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / addLine addLine \u00b6 fun addLine(value: String ?): TorSettingsBuilder (source) Add a new line to the buffer if a setting here is not available.","title":"Add line"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/add-line/#addline","text":"fun addLine(value: String ?): TorSettingsBuilder (source) Add a new line to the buffer if a setting here is not available.","title":"addLine"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/automap-hosts-on-resolve-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / automapHostsOnResolveFromSettings automapHostsOnResolveFromSettings \u00b6 fun automapHostsOnResolveFromSettings(): TorSettingsBuilder (source)","title":"Automap hosts on resolve from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/automap-hosts-on-resolve-from-settings/#automaphostsonresolvefromsettings","text":"fun automapHostsOnResolveFromSettings(): TorSettingsBuilder (source)","title":"automapHostsOnResolveFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/automap-hosts-on-resolve/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / automapHostsOnResolve automapHostsOnResolve \u00b6 fun automapHostsOnResolve(enable: Boolean ): TorSettingsBuilder (source)","title":"Automap hosts on resolve"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/automap-hosts-on-resolve/#automaphostsonresolve","text":"fun automapHostsOnResolve(enable: Boolean ): TorSettingsBuilder (source)","title":"automapHostsOnResolve"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/bridges-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / bridgesFromSettings bridgesFromSettings \u00b6 fun bridgesFromSettings(): TorSettingsBuilder (source)","title":"Bridges from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/bridges-from-settings/#bridgesfromsettings","text":"fun bridgesFromSettings(): TorSettingsBuilder (source)","title":"bridgesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/configure-pluggable-transports-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / configurePluggableTransportsFromSettings configurePluggableTransportsFromSettings \u00b6 fun configurePluggableTransportsFromSettings(pluggableTransportClient: File ?): TorSettingsBuilder (source)","title":"Configure pluggable transports from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/configure-pluggable-transports-from-settings/#configurepluggabletransportsfromsettings","text":"fun configurePluggableTransportsFromSettings(pluggableTransportClient: File ?): TorSettingsBuilder (source)","title":"configurePluggableTransportsFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/connection-padding-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / connectionPaddingFromSettings connectionPaddingFromSettings \u00b6 fun connectionPaddingFromSettings(): TorSettingsBuilder (source)","title":"Connection padding from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/connection-padding-from-settings/#connectionpaddingfromsettings","text":"fun connectionPaddingFromSettings(): TorSettingsBuilder (source)","title":"connectionPaddingFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/connection-padding/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / connectionPadding connectionPadding \u00b6 fun connectionPadding(setting: String ): TorSettingsBuilder (source)","title":"Connection padding"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/connection-padding/#connectionpadding","text":"fun connectionPadding(setting: String ): TorSettingsBuilder (source)","title":"connectionPadding"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/control-port-write-to-file-from-config/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / controlPortWriteToFileFromConfig controlPortWriteToFileFromConfig \u00b6 fun controlPortWriteToFileFromConfig(): TorSettingsBuilder (source)","title":"Control port write to file from config"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/control-port-write-to-file-from-config/#controlportwritetofilefromconfig","text":"fun controlPortWriteToFileFromConfig(): TorSettingsBuilder (source)","title":"controlPortWriteToFileFromConfig"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/control-port-write-to-file/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / controlPortWriteToFile controlPortWriteToFile \u00b6 fun controlPortWriteToFile(torConfigFiles: TorConfigFiles ): TorSettingsBuilder (source)","title":"Control port write to file"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/control-port-write-to-file/#controlportwritetofile","text":"fun controlPortWriteToFile(torConfigFiles: TorConfigFiles ): TorSettingsBuilder (source)","title":"controlPortWriteToFile"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/cookie-authentication-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / cookieAuthenticationFromSettings cookieAuthenticationFromSettings \u00b6 fun cookieAuthenticationFromSettings(): TorSettingsBuilder (source)","title":"Cookie authentication from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/cookie-authentication-from-settings/#cookieauthenticationfromsettings","text":"fun cookieAuthenticationFromSettings(): TorSettingsBuilder (source)","title":"cookieAuthenticationFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/cookie-authentication/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / cookieAuthentication cookieAuthentication \u00b6 fun cookieAuthentication(): TorSettingsBuilder (source)","title":"Cookie authentication"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/cookie-authentication/#cookieauthentication","text":"fun cookieAuthentication(): TorSettingsBuilder (source)","title":"cookieAuthentication"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/debug-logs-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / debugLogsFromSettings debugLogsFromSettings \u00b6 fun debugLogsFromSettings(): TorSettingsBuilder (source)","title":"Debug logs from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/debug-logs-from-settings/#debuglogsfromsettings","text":"fun debugLogsFromSettings(): TorSettingsBuilder (source)","title":"debugLogsFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/debug-logs/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / debugLogs debugLogs \u00b6 fun debugLogs(): TorSettingsBuilder (source)","title":"Debug logs"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/debug-logs/#debuglogs","text":"fun debugLogs(): TorSettingsBuilder (source)","title":"debugLogs"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/disable-network-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / disableNetworkFromSettings disableNetworkFromSettings \u00b6 fun disableNetworkFromSettings(): TorSettingsBuilder (source)","title":"Disable network from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/disable-network-from-settings/#disablenetworkfromsettings","text":"fun disableNetworkFromSettings(): TorSettingsBuilder (source)","title":"disableNetworkFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/disable-network/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / disableNetwork disableNetwork \u00b6 fun disableNetwork(disable: Boolean ): TorSettingsBuilder (source)","title":"Disable network"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/disable-network/#disablenetwork","text":"fun disableNetwork(disable: Boolean ): TorSettingsBuilder (source)","title":"disableNetwork"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dns-port-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dnsPortFromSettings dnsPortFromSettings \u00b6 fun dnsPortFromSettings(): TorSettingsBuilder (source)","title":"Dns port from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dns-port-from-settings/#dnsportfromsettings","text":"fun dnsPortFromSettings(): TorSettingsBuilder (source)","title":"dnsPortFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dns-port/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dnsPort dnsPort \u00b6 fun dnsPort(dnsPort: String , isolationFlags: List < String >?): TorSettingsBuilder (source)","title":"Dns port"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dns-port/#dnsport","text":"fun dnsPort(dnsPort: String , isolationFlags: List < String >?): TorSettingsBuilder (source)","title":"dnsPort"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-canceled-by-startup-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dormantCanceledByStartupFromSettings dormantCanceledByStartupFromSettings \u00b6 fun dormantCanceledByStartupFromSettings(): TorSettingsBuilder (source)","title":"Dormant canceled by startup from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-canceled-by-startup-from-settings/#dormantcanceledbystartupfromsettings","text":"fun dormantCanceledByStartupFromSettings(): TorSettingsBuilder (source)","title":"dormantCanceledByStartupFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-canceled-by-startup/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dormantCanceledByStartup dormantCanceledByStartup \u00b6 fun dormantCanceledByStartup(enable: Boolean ): TorSettingsBuilder (source)","title":"Dormant canceled by startup"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-canceled-by-startup/#dormantcanceledbystartup","text":"fun dormantCanceledByStartup(enable: Boolean ): TorSettingsBuilder (source)","title":"dormantCanceledByStartup"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-client-timeout-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dormantClientTimeoutFromSettings dormantClientTimeoutFromSettings \u00b6 fun dormantClientTimeoutFromSettings(): TorSettingsBuilder (source)","title":"Dormant client timeout from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-client-timeout-from-settings/#dormantclienttimeoutfromsettings","text":"fun dormantClientTimeoutFromSettings(): TorSettingsBuilder (source)","title":"dormantClientTimeoutFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-client-timetout/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / dormantClientTimetout dormantClientTimetout \u00b6 fun dormantClientTimetout(minutes: Int ): TorSettingsBuilder (source)","title":"Dormant client timetout"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/dormant-client-timetout/#dormantclienttimetout","text":"fun dormantClientTimetout(minutes: Int ): TorSettingsBuilder (source)","title":"dormantClientTimetout"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/entry-nodes/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / entryNodes entryNodes \u00b6 fun entryNodes(entryNodes: String ?): TorSettingsBuilder (source)","title":"Entry nodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/entry-nodes/#entrynodes","text":"fun entryNodes(entryNodes: String ?): TorSettingsBuilder (source)","title":"entryNodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/exclude-nodes/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / excludeNodes excludeNodes \u00b6 fun excludeNodes(excludeNodes: String ?): TorSettingsBuilder (source)","title":"Exclude nodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/exclude-nodes/#excludenodes","text":"fun excludeNodes(excludeNodes: String ?): TorSettingsBuilder (source)","title":"excludeNodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/exit-nodes/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / exitNodes exitNodes \u00b6 fun exitNodes(exitNodes: String ?): TorSettingsBuilder (source)","title":"Exit nodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/exit-nodes/#exitnodes","text":"fun exitNodes(exitNodes: String ?): TorSettingsBuilder (source)","title":"exitNodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/finish-and-return-string/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / finishAndReturnString finishAndReturnString \u00b6 fun finishAndReturnString(): String (source) This returns what\u2019s in the buffer as a String and then clears it. You still need to write the String to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile .","title":"Finish and return string"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/finish-and-return-string/#finishandreturnstring","text":"fun finishAndReturnString(): String (source) This returns what\u2019s in the buffer as a String and then clears it. You still need to write the String to the io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile .","title":"finishAndReturnString"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/finish-and-write-to-torrc-file/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / finishAndWriteToTorrcFile finishAndWriteToTorrcFile \u00b6 fun finishAndWriteToTorrcFile(): Unit (source) A convenience method for after populating the buffer by calling updateTorSettings . It will overwrite your current torrc file (or create a new one if it doesn\u2019t exist) with the new settings. TODO: Devise a more elegant solution using a diff to simply update it if need be.","title":"Finish and write to torrc file"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/finish-and-write-to-torrc-file/#finishandwritetotorrcfile","text":"fun finishAndWriteToTorrcFile(): Unit (source) A convenience method for after populating the buffer by calling updateTorSettings . It will overwrite your current torrc file (or create a new one if it doesn\u2019t exist) with the new settings. TODO: Devise a more elegant solution using a diff to simply update it if need be.","title":"finishAndWriteToTorrcFile"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/geo-ip-file/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / geoIpFile geoIpFile \u00b6 fun geoIpFile(path: String ?): TorSettingsBuilder (source)","title":"Geo ip file"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/geo-ip-file/#geoipfile","text":"fun geoIpFile(path: String ?): TorSettingsBuilder (source)","title":"geoIpFile"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/geo-ip-v6-file/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / geoIpV6File geoIpV6File \u00b6 fun geoIpV6File(path: String ?): TorSettingsBuilder (source)","title":"Geo ip v6 file"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/geo-ip-v6-file/#geoipv6file","text":"fun geoIpV6File(path: String ?): TorSettingsBuilder (source)","title":"geoIpV6File"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/http-tunnel-port-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / httpTunnelPortFromSettings httpTunnelPortFromSettings \u00b6 fun httpTunnelPortFromSettings(): TorSettingsBuilder (source)","title":"Http tunnel port from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/http-tunnel-port-from-settings/#httptunnelportfromsettings","text":"fun httpTunnelPortFromSettings(): TorSettingsBuilder (source)","title":"httpTunnelPortFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/http-tunnel-port/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / httpTunnelPort httpTunnelPort \u00b6 fun httpTunnelPort(port: String , isolationFlags: List < String >?): TorSettingsBuilder (source)","title":"Http tunnel port"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/http-tunnel-port/#httptunnelport","text":"fun httpTunnelPort(port: String , isolationFlags: List < String >?): TorSettingsBuilder (source)","title":"httpTunnelPort"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/make-non-exit-relay/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / makeNonExitRelay makeNonExitRelay \u00b6 fun makeNonExitRelay(dnsFile: String , orPort: String , nickname: String ): TorSettingsBuilder (source)","title":"Make non exit relay"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/make-non-exit-relay/#makenonexitrelay","text":"fun makeNonExitRelay(dnsFile: String , orPort: String , nickname: String ): TorSettingsBuilder (source)","title":"makeNonExitRelay"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/nodes-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / nodesFromSettings nodesFromSettings \u00b6 fun nodesFromSettings(): TorSettingsBuilder (source) Sets the entry/exit/exclude nodes","title":"Nodes from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/nodes-from-settings/#nodesfromsettings","text":"fun nodesFromSettings(): TorSettingsBuilder (source) Sets the entry/exit/exclude nodes","title":"nodesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/non-exit-relay-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / nonExitRelayFromSettings nonExitRelayFromSettings \u00b6 fun nonExitRelayFromSettings(): TorSettingsBuilder (source) Adds non exit relay to builder. This method uses a default Quad9 nameserver.","title":"Non exit relay from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/non-exit-relay-from-settings/#nonexitrelayfromsettings","text":"fun nonExitRelayFromSettings(): TorSettingsBuilder (source) Adds non exit relay to builder. This method uses a default Quad9 nameserver.","title":"nonExitRelayFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-on-all-interfaces-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxyOnAllInterfacesFromSettings proxyOnAllInterfacesFromSettings \u00b6 fun proxyOnAllInterfacesFromSettings(): TorSettingsBuilder (source)","title":"Proxy on all interfaces from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-on-all-interfaces-from-settings/#proxyonallinterfacesfromsettings","text":"fun proxyOnAllInterfacesFromSettings(): TorSettingsBuilder (source)","title":"proxyOnAllInterfacesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-on-all-interfaces/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxyOnAllInterfaces proxyOnAllInterfaces \u00b6 fun proxyOnAllInterfaces(): TorSettingsBuilder (source)","title":"Proxy on all interfaces"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-on-all-interfaces/#proxyonallinterfaces","text":"fun proxyOnAllInterfaces(): TorSettingsBuilder (source)","title":"proxyOnAllInterfaces"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-socks5-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxySocks5FromSettings proxySocks5FromSettings \u00b6 fun proxySocks5FromSettings(): TorSettingsBuilder (source)","title":"Proxy socks5 from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-socks5-from-settings/#proxysocks5fromsettings","text":"fun proxySocks5FromSettings(): TorSettingsBuilder (source)","title":"proxySocks5FromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-socks5/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxySocks5 proxySocks5 \u00b6 fun proxySocks5(host: String ?, port: Int ?): TorSettingsBuilder (source) Set socks5 proxy with no authentication.","title":"Proxy socks5"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-socks5/#proxysocks5","text":"fun proxySocks5(host: String ?, port: Int ?): TorSettingsBuilder (source) Set socks5 proxy with no authentication.","title":"proxySocks5"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-with-authentication-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxyWithAuthenticationFromSettings proxyWithAuthenticationFromSettings \u00b6 fun proxyWithAuthenticationFromSettings(): TorSettingsBuilder (source)","title":"Proxy with authentication from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-with-authentication-from-settings/#proxywithauthenticationfromsettings","text":"fun proxyWithAuthenticationFromSettings(): TorSettingsBuilder (source)","title":"proxyWithAuthenticationFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-with-authentication/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / proxyWithAuthentication proxyWithAuthentication \u00b6 fun proxyWithAuthentication(proxyType: String ?, proxyHost: String ?, proxyPort: Int ?, proxyUser: String ?, proxyPass: String ?): TorSettingsBuilder (source) Sets proxyWithAuthentication information. requires that TorSettings.useSocks5 && TorSettings.hasBridges are set to false NOTE: Only supports Socks5 or HTTPS","title":"Proxy with authentication"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/proxy-with-authentication/#proxywithauthentication","text":"fun proxyWithAuthentication(proxyType: String ?, proxyHost: String ?, proxyPort: Int ?, proxyUser: String ?, proxyPass: String ?): TorSettingsBuilder (source) Sets proxyWithAuthentication information. requires that TorSettings.useSocks5 && TorSettings.hasBridges are set to false NOTE: Only supports Socks5 or HTTPS","title":"proxyWithAuthentication"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reachable-address-ports/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reachableAddressPorts reachableAddressPorts \u00b6 fun reachableAddressPorts(reachableAddressesPorts: String ?): TorSettingsBuilder (source)","title":"Reachable address ports"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reachable-address-ports/#reachableaddressports","text":"fun reachableAddressPorts(reachableAddressesPorts: String ?): TorSettingsBuilder (source)","title":"reachableAddressPorts"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reachable-addresses-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reachableAddressesFromSettings reachableAddressesFromSettings \u00b6 fun reachableAddressesFromSettings(): TorSettingsBuilder (source)","title":"Reachable addresses from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reachable-addresses-from-settings/#reachableaddressesfromsettings","text":"fun reachableAddressesFromSettings(): TorSettingsBuilder (source)","title":"reachableAddressesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reduced-connection-padding-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reducedConnectionPaddingFromSettings reducedConnectionPaddingFromSettings \u00b6 fun reducedConnectionPaddingFromSettings(): TorSettingsBuilder (source)","title":"Reduced connection padding from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reduced-connection-padding-from-settings/#reducedconnectionpaddingfromsettings","text":"fun reducedConnectionPaddingFromSettings(): TorSettingsBuilder (source)","title":"reducedConnectionPaddingFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reduced-connection-padding/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reducedConnectionPadding reducedConnectionPadding \u00b6 fun reducedConnectionPadding(enable: Boolean ): TorSettingsBuilder (source)","title":"Reduced connection padding"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reduced-connection-padding/#reducedconnectionpadding","text":"fun reducedConnectionPadding(enable: Boolean ): TorSettingsBuilder (source)","title":"reducedConnectionPadding"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reset/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / reset reset \u00b6 fun reset(): Unit (source)","title":"Reset"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/reset/#reset","text":"fun reset(): Unit (source)","title":"reset"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/run-as-daemon-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / runAsDaemonFromSettings runAsDaemonFromSettings \u00b6 fun runAsDaemonFromSettings(): TorSettingsBuilder (source)","title":"Run as daemon from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/run-as-daemon-from-settings/#runasdaemonfromsettings","text":"fun runAsDaemonFromSettings(): TorSettingsBuilder (source)","title":"runAsDaemonFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/run-as-daemon/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / runAsDaemon runAsDaemon \u00b6 fun runAsDaemon(enable: Boolean ): TorSettingsBuilder (source)","title":"Run as daemon"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/run-as-daemon/#runasdaemon","text":"fun runAsDaemon(enable: Boolean ): TorSettingsBuilder (source)","title":"runAsDaemon"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/safe-socks-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / safeSocksFromSettings safeSocksFromSettings \u00b6 fun safeSocksFromSettings(): TorSettingsBuilder (source)","title":"Safe socks from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/safe-socks-from-settings/#safesocksfromsettings","text":"fun safeSocksFromSettings(): TorSettingsBuilder (source)","title":"safeSocksFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/safe-socks/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / safeSocks safeSocks \u00b6 fun safeSocks(enable: Boolean ): TorSettingsBuilder (source)","title":"Safe socks"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/safe-socks/#safesocks","text":"fun safeSocks(enable: Boolean ): TorSettingsBuilder (source)","title":"safeSocks"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/set-geo-ip-files/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / setGeoIpFiles setGeoIpFiles \u00b6 fun setGeoIpFiles(): TorSettingsBuilder (source) Ensure that you have setup io.matthewnelson.topl_core.util.TorInstaller such that you\u2019ve copied the geoip/geoip6 files over prior to calling this.","title":"Set geo ip files"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/set-geo-ip-files/#setgeoipfiles","text":"fun setGeoIpFiles(): TorSettingsBuilder (source) Ensure that you have setup io.matthewnelson.topl_core.util.TorInstaller such that you\u2019ve copied the geoip/geoip6 files over prior to calling this.","title":"setGeoIpFiles"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/set-v3-auth-private-dir/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / setV3AuthPrivateDir setV3AuthPrivateDir \u00b6 fun setV3AuthPrivateDir(): TorSettingsBuilder (source) Will add to the torrc file \u201cClientOnionAuthDir </data/data/path/to/directory>, so be sure to create the directory if it does not exist in TorInstaller.setup prior to utilizing this method when building your torrc file.","title":"Set v3 auth private dir"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/set-v3-auth-private-dir/#setv3authprivatedir","text":"fun setV3AuthPrivateDir(): TorSettingsBuilder (source) Will add to the torrc file \u201cClientOnionAuthDir </data/data/path/to/directory>, so be sure to create the directory if it does not exist in TorInstaller.setup prior to utilizing this method when building your torrc file.","title":"setV3AuthPrivateDir"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/socks-port-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / socksPortFromSettings socksPortFromSettings \u00b6 @WorkerThread fun socksPortFromSettings(): TorSettingsBuilder (source)","title":"Socks port from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/socks-port-from-settings/#socksportfromsettings","text":"@WorkerThread fun socksPortFromSettings(): TorSettingsBuilder (source)","title":"socksPortFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/socks-port/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / socksPort socksPort \u00b6 fun socksPort(socksPort: String , isolationFlags: List < String >?): TorSettingsBuilder (source)","title":"Socks port"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/socks-port/#socksport","text":"fun socksPort(socksPort: String , isolationFlags: List < String >?): TorSettingsBuilder (source)","title":"socksPort"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/strict-nodes-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / strictNodesFromSettings strictNodesFromSettings \u00b6 fun strictNodesFromSettings(): TorSettingsBuilder (source)","title":"Strict nodes from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/strict-nodes-from-settings/#strictnodesfromsettings","text":"fun strictNodesFromSettings(): TorSettingsBuilder (source)","title":"strictNodesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/strict-nodes/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / strictNodes strictNodes \u00b6 fun strictNodes(enable: Boolean ): TorSettingsBuilder (source)","title":"Strict nodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/strict-nodes/#strictnodes","text":"fun strictNodes(enable: Boolean ): TorSettingsBuilder (source)","title":"strictNodes"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/test-socks-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / testSocksFromSettings testSocksFromSettings \u00b6 fun testSocksFromSettings(): TorSettingsBuilder (source)","title":"Test socks from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/test-socks-from-settings/#testsocksfromsettings","text":"fun testSocksFromSettings(): TorSettingsBuilder (source)","title":"testSocksFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/test-socks/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / testSocks testSocks \u00b6 fun testSocks(enable: Boolean ): TorSettingsBuilder (source)","title":"Test socks"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/test-socks/#testsocks","text":"fun testSocks(enable: Boolean ): TorSettingsBuilder (source)","title":"testSocks"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/torrc-custom-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / torrcCustomFromSettings torrcCustomFromSettings \u00b6 fun torrcCustomFromSettings(): TorSettingsBuilder (source)","title":"Torrc custom from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/torrc-custom-from-settings/#torrccustomfromsettings","text":"fun torrcCustomFromSettings(): TorSettingsBuilder (source)","title":"torrcCustomFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/trans-port-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / transPortFromSettings transPortFromSettings \u00b6 fun transPortFromSettings(): TorSettingsBuilder (source)","title":"Trans port from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/trans-port-from-settings/#transportfromsettings","text":"fun transPortFromSettings(): TorSettingsBuilder (source)","title":"transPortFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/trans-port/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / transPort transPort \u00b6 fun transPort(transPort: String , isolationFlags: List < String >?): TorSettingsBuilder (source)","title":"Trans port"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/trans-port/#transport","text":"fun transPort(transPort: String , isolationFlags: List < String >?): TorSettingsBuilder (source)","title":"transPort"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/transport-plugin/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / transportPlugin transportPlugin \u00b6 fun transportPlugin(clientPath: String ): TorSettingsBuilder (source)","title":"Transport plugin"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/transport-plugin/#transportplugin","text":"fun transportPlugin(clientPath: String ): TorSettingsBuilder (source)","title":"transportPlugin"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/update-tor-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / updateTorSettings updateTorSettings \u00b6 fun updateTorSettings(): TorSettingsBuilder (source) Updates the buffer for all methods annotated with SettingsConfig . You still need to call finishAndReturnString and then write the returned String to your io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . Alternatively, call finishAndWriteToTorrcFile , it\u2019s up to you. Exceptions \u00b6 SecurityException - If denied access to the class IllegalAccessException - see java.lang.reflect.Method.invoke IllegalArgumentException - see java.lang.reflect.Method.invoke InvocationTargetException - see java.lang.reflect.Method.invoke NullPointerException - see java.lang.reflect.Method.invoke ExceptionInInitializerError - see java.lang.reflect.Method.invoke TODO: Replace reflection.......... gross.","title":"Update tor settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/update-tor-settings/#updatetorsettings","text":"fun updateTorSettings(): TorSettingsBuilder (source) Updates the buffer for all methods annotated with SettingsConfig . You still need to call finishAndReturnString and then write the returned String to your io.matthewnelson.topl_core_base.TorConfigFiles.torrcFile . Alternatively, call finishAndWriteToTorrcFile , it\u2019s up to you.","title":"updateTorSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/update-tor-settings/#exceptions","text":"SecurityException - If denied access to the class IllegalAccessException - see java.lang.reflect.Method.invoke IllegalArgumentException - see java.lang.reflect.Method.invoke InvocationTargetException - see java.lang.reflect.Method.invoke NullPointerException - see java.lang.reflect.Method.invoke ExceptionInInitializerError - see java.lang.reflect.Method.invoke TODO: Replace reflection.......... gross.","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/use-bridges-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / useBridgesFromSettings useBridgesFromSettings \u00b6 fun useBridgesFromSettings(): TorSettingsBuilder (source)","title":"Use bridges from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/use-bridges-from-settings/#usebridgesfromsettings","text":"fun useBridgesFromSettings(): TorSettingsBuilder (source)","title":"useBridgesFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/use-bridges/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / useBridges useBridges \u00b6 fun useBridges(useThem: Boolean ): TorSettingsBuilder (source)","title":"Use bridges"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/use-bridges/#usebridges","text":"fun useBridges(useThem: Boolean ): TorSettingsBuilder (source)","title":"useBridges"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/v3-auth-private-dir/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / v3AuthPrivateDir v3AuthPrivateDir \u00b6 fun v3AuthPrivateDir(path: String ?): TorSettingsBuilder (source)","title":"V3 auth private dir"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/v3-auth-private-dir/#v3authprivatedir","text":"fun v3AuthPrivateDir(path: String ?): TorSettingsBuilder (source)","title":"v3AuthPrivateDir"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/virtual-address-network-from-settings/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / virtualAddressNetworkFromSettings virtualAddressNetworkFromSettings \u00b6 fun virtualAddressNetworkFromSettings(): TorSettingsBuilder (source)","title":"Virtual address network from settings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/virtual-address-network-from-settings/#virtualaddressnetworkfromsettings","text":"fun virtualAddressNetworkFromSettings(): TorSettingsBuilder (source)","title":"virtualAddressNetworkFromSettings"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/virtual-address-network/","text":"topl-core / io.matthewnelson.topl_core.settings / TorSettingsBuilder / virtualAddressNetwork virtualAddressNetwork \u00b6 fun virtualAddressNetwork(address: String ?): TorSettingsBuilder (source)","title":"Virtual address network"},{"location":"topl-core/io.matthewnelson.topl_core.settings/-tor-settings-builder/virtual-address-network/#virtualaddressnetwork","text":"fun virtualAddressNetwork(address: String ?): TorSettingsBuilder (source)","title":"virtualAddressNetwork"},{"location":"topl-core/io.matthewnelson.topl_core.util/","text":"topl-core / io.matthewnelson.topl_core.util Package io.matthewnelson.topl_core.util \u00b6 Types \u00b6 Name Summary CoreConsts abstract class CoreConsts : BaseConsts FileUtilities object FileUtilities OnionAuthUtilities object OnionAuthUtilities TorInstaller Extend this class and implement the need methods. abstract class TorInstaller : CoreConsts Utilities object Utilities WriteObserver Adapted from the Briar WriteObserver code class WriteObserver : FileObserver","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/#package-iomatthewnelsontopl_coreutil","text":"","title":"Package io.matthewnelson.topl_core.util"},{"location":"topl-core/io.matthewnelson.topl_core.util/#types","text":"Name Summary CoreConsts abstract class CoreConsts : BaseConsts FileUtilities object FileUtilities OnionAuthUtilities object OnionAuthUtilities TorInstaller Extend this class and implement the need methods. abstract class TorInstaller : CoreConsts Utilities object Utilities WriteObserver Adapted from the Briar WriteObserver code class WriteObserver : FileObserver","title":"Types"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/","text":"topl-core / io.matthewnelson.topl_core.util / CoreConsts CoreConsts \u00b6 abstract class CoreConsts : BaseConsts (source) Constructors \u00b6 Name Summary <init> CoreConsts() Inheritors \u00b6 Name Summary BroadcastLogger This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. class BroadcastLogger : CoreConsts OnionProxyManager This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. class OnionProxyManager : CoreConsts TorInstaller Extend this class and implement the need methods. abstract class TorInstaller : CoreConsts TorSettingsBuilder Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. class TorSettingsBuilder : CoreConsts TorStateMachine Current State of Tor class TorStateMachine : CoreConsts","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/#coreconsts","text":"abstract class CoreConsts : BaseConsts (source)","title":"CoreConsts"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/#constructors","text":"Name Summary <init> CoreConsts()","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/#inheritors","text":"Name Summary BroadcastLogger This class is for standardizing broadcast messages across all classes for this Library. Debugging is important while hacking on TOPL-Android, but those Logcat messages should never make it to a release build. class BroadcastLogger : CoreConsts OnionProxyManager This is where all the fun is, this is the class which acts as a gateway into the topl-core module, and ensures synchronicity is had. class OnionProxyManager : CoreConsts TorInstaller Extend this class and implement the need methods. abstract class TorInstaller : CoreConsts TorSettingsBuilder Call io.matthewnelson.topl_core.OnionProxyManager.getNewSettingsBuilder to obtain this class. class TorSettingsBuilder : CoreConsts TorStateMachine Current State of Tor class TorStateMachine : CoreConsts","title":"Inheritors"},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/-init-/","text":"topl-core / io.matthewnelson.topl_core.util / CoreConsts / <init> <init> \u00b6 CoreConsts()","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.util/-core-consts/-init-/#init","text":"CoreConsts()","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities FileUtilities \u00b6 object FileUtilities (source) Functions \u00b6 Name Summary cleanInstallOneFile Reads the input stream, deletes fileToWriteTo if it exists and over writes it with the stream. fun cleanInstallOneFile(readFrom: InputStream , fileToWriteTo: File ): Unit copy Closes both input and output streams when done. fun copy(in: InputStream , out: OutputStream ): Unit copyDoNotCloseInput Won\u2019t close the input stream when it\u2019s done, needed to handle ZipInputStreams fun copyDoNotCloseInput(in: InputStream , out: OutputStream ): Unit extractContentFromZip This has to exist somewhere! Why isn\u2019t it a part of the standard Java library? fun extractContentFromZip(destinationDirectory: File , zipFileInputStream: InputStream ): Unit listFilesToLog fun listFilesToLog(f: File ): Unit recursiveFileDelete fun recursiveFileDelete(fileOrDirectory: File ): Unit setPerms Sets readable/executable for all users and writable by owner fun setPerms(file: File ): Unit setToReadOnlyPermissions fun setToReadOnlyPermissions(file: File ): Boolean","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/#fileutilities","text":"object FileUtilities (source)","title":"FileUtilities"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/#functions","text":"Name Summary cleanInstallOneFile Reads the input stream, deletes fileToWriteTo if it exists and over writes it with the stream. fun cleanInstallOneFile(readFrom: InputStream , fileToWriteTo: File ): Unit copy Closes both input and output streams when done. fun copy(in: InputStream , out: OutputStream ): Unit copyDoNotCloseInput Won\u2019t close the input stream when it\u2019s done, needed to handle ZipInputStreams fun copyDoNotCloseInput(in: InputStream , out: OutputStream ): Unit extractContentFromZip This has to exist somewhere! Why isn\u2019t it a part of the standard Java library? fun extractContentFromZip(destinationDirectory: File , zipFileInputStream: InputStream ): Unit listFilesToLog fun listFilesToLog(f: File ): Unit recursiveFileDelete fun recursiveFileDelete(fileOrDirectory: File ): Unit setPerms Sets readable/executable for all users and writable by owner fun setPerms(file: File ): Unit setToReadOnlyPermissions fun setToReadOnlyPermissions(file: File ): Boolean","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/clean-install-one-file/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / cleanInstallOneFile cleanInstallOneFile \u00b6 @JvmStatic fun cleanInstallOneFile(readFrom: InputStream , fileToWriteTo: File ): Unit (source) Reads the input stream, deletes fileToWriteTo if it exists and over writes it with the stream. Parameters \u00b6 readFrom - Stream to read from fileToWriteTo - File to write to Exceptions \u00b6 java.io.IOException - * If any of the file operations fail","title":"Clean install one file"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/clean-install-one-file/#cleaninstallonefile","text":"@JvmStatic fun cleanInstallOneFile(readFrom: InputStream , fileToWriteTo: File ): Unit (source) Reads the input stream, deletes fileToWriteTo if it exists and over writes it with the stream.","title":"cleanInstallOneFile"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/clean-install-one-file/#parameters","text":"readFrom - Stream to read from fileToWriteTo - File to write to","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/clean-install-one-file/#exceptions","text":"java.io.IOException - * If any of the file operations fail","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy-do-not-close-input/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / copyDoNotCloseInput copyDoNotCloseInput \u00b6 @JvmStatic fun copyDoNotCloseInput(in: InputStream , out: OutputStream ): Unit (source) Won\u2019t close the input stream when it\u2019s done, needed to handle ZipInputStreams Parameters \u00b6 in - Won\u2019t be closed out - Will be closed Exceptions \u00b6 java.io.IOException - If close on output fails","title":"Copy do not close input"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy-do-not-close-input/#copydonotcloseinput","text":"@JvmStatic fun copyDoNotCloseInput(in: InputStream , out: OutputStream ): Unit (source) Won\u2019t close the input stream when it\u2019s done, needed to handle ZipInputStreams","title":"copyDoNotCloseInput"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy-do-not-close-input/#parameters","text":"in - Won\u2019t be closed out - Will be closed","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy-do-not-close-input/#exceptions","text":"java.io.IOException - If close on output fails","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / copy copy \u00b6 @JvmStatic fun copy(in: InputStream , out: OutputStream ): Unit (source) Closes both input and output streams when done. Parameters \u00b6 in - Stream to read from out - Stream to write to Exceptions \u00b6 java.io.IOException - * If close on input or output fails","title":"Copy"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy/#copy","text":"@JvmStatic fun copy(in: InputStream , out: OutputStream ): Unit (source) Closes both input and output streams when done.","title":"copy"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy/#parameters","text":"in - Stream to read from out - Stream to write to","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/copy/#exceptions","text":"java.io.IOException - * If close on input or output fails","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/extract-content-from-zip/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / extractContentFromZip extractContentFromZip \u00b6 @JvmStatic fun extractContentFromZip(destinationDirectory: File , zipFileInputStream: InputStream ): Unit (source) This has to exist somewhere! Why isn\u2019t it a part of the standard Java library? Parameters \u00b6 destinationDirectory - Directory files are to be extracted to zipFileInputStream - Stream to unzip Exceptions \u00b6 java.io.IOException - * If there are any file errors","title":"Extract content from zip"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/extract-content-from-zip/#extractcontentfromzip","text":"@JvmStatic fun extractContentFromZip(destinationDirectory: File , zipFileInputStream: InputStream ): Unit (source) This has to exist somewhere! Why isn\u2019t it a part of the standard Java library?","title":"extractContentFromZip"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/extract-content-from-zip/#parameters","text":"destinationDirectory - Directory files are to be extracted to zipFileInputStream - Stream to unzip","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/extract-content-from-zip/#exceptions","text":"java.io.IOException - * If there are any file errors","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/list-files-to-log/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / listFilesToLog listFilesToLog \u00b6 @JvmStatic fun listFilesToLog(f: File ): Unit (source)","title":"List files to log"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/list-files-to-log/#listfilestolog","text":"@JvmStatic fun listFilesToLog(f: File ): Unit (source)","title":"listFilesToLog"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/recursive-file-delete/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / recursiveFileDelete recursiveFileDelete \u00b6 @JvmStatic fun recursiveFileDelete(fileOrDirectory: File ): Unit (source)","title":"Recursive file delete"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/recursive-file-delete/#recursivefiledelete","text":"@JvmStatic fun recursiveFileDelete(fileOrDirectory: File ): Unit (source)","title":"recursiveFileDelete"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-perms/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / setPerms setPerms \u00b6 @JvmStatic fun setPerms(file: File ): Unit (source) Sets readable/executable for all users and writable by owner Parameters \u00b6 file - the file to set the permissions on","title":"Set perms"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-perms/#setperms","text":"@JvmStatic fun setPerms(file: File ): Unit (source) Sets readable/executable for all users and writable by owner","title":"setPerms"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-perms/#parameters","text":"file - the file to set the permissions on","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-to-read-only-permissions/","text":"topl-core / io.matthewnelson.topl_core.util / FileUtilities / setToReadOnlyPermissions setToReadOnlyPermissions \u00b6 @JvmStatic fun setToReadOnlyPermissions(file: File ): Boolean (source)","title":"Set to read only permissions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-file-utilities/set-to-read-only-permissions/#settoreadonlypermissions","text":"@JvmStatic fun setToReadOnlyPermissions(file: File ): Boolean (source)","title":"setToReadOnlyPermissions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/","text":"topl-core / io.matthewnelson.topl_core.util / OnionAuthUtilities OnionAuthUtilities \u00b6 object OnionAuthUtilities (source) Functions \u00b6 Name Summary addV3ClientAuthenticationPrivateKey Creates a file containing v3 Client Authorization for a Hidden Service in the format of: fun addV3ClientAuthenticationPrivateKey(nickname: String , onionAddress: String , base32EncodedPrivateKey: String , torConfigFiles: TorConfigFiles ): File ? deleteFile fun deleteFile(nickname: String , torConfigFiles: TorConfigFiles ): Boolean ? fun deleteFile(file: File , torConfigFiles: TorConfigFiles ): Boolean ? getAllFileNicknames From the v3 Client Authentication directory, all files that contain the \u201c.auth_private\u201d extension will have their name w/o the extension returned in an array. If the directory is empty, returns null . fun getAllFileNicknames(torConfigFiles: TorConfigFiles ): Array < String >? getAllFiles All files within the v3 Client Authentication directory are returned. If the directory is empty, returns null . fun getAllFiles(torConfigFiles: TorConfigFiles ): Array < File >? getFileByNickname Retrieve a v3 client authentication file by the nickname, whether the file extension \u201c.auth_private\u201d is included or not. fun getFileByNickname(nickname: String , torConfigFiles: TorConfigFiles ): File ?","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/#onionauthutilities","text":"object OnionAuthUtilities (source)","title":"OnionAuthUtilities"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/#functions","text":"Name Summary addV3ClientAuthenticationPrivateKey Creates a file containing v3 Client Authorization for a Hidden Service in the format of: fun addV3ClientAuthenticationPrivateKey(nickname: String , onionAddress: String , base32EncodedPrivateKey: String , torConfigFiles: TorConfigFiles ): File ? deleteFile fun deleteFile(nickname: String , torConfigFiles: TorConfigFiles ): Boolean ? fun deleteFile(file: File , torConfigFiles: TorConfigFiles ): Boolean ? getAllFileNicknames From the v3 Client Authentication directory, all files that contain the \u201c.auth_private\u201d extension will have their name w/o the extension returned in an array. If the directory is empty, returns null . fun getAllFileNicknames(torConfigFiles: TorConfigFiles ): Array < String >? getAllFiles All files within the v3 Client Authentication directory are returned. If the directory is empty, returns null . fun getAllFiles(torConfigFiles: TorConfigFiles ): Array < File >? getFileByNickname Retrieve a v3 client authentication file by the nickname, whether the file extension \u201c.auth_private\u201d is included or not. fun getFileByNickname(nickname: String , torConfigFiles: TorConfigFiles ): File ?","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/add-v3-client-authentication-private-key/","text":"topl-core / io.matthewnelson.topl_core.util / OnionAuthUtilities / addV3ClientAuthenticationPrivateKey addV3ClientAuthenticationPrivateKey \u00b6 @WorkerThread @JvmStatic fun addV3ClientAuthenticationPrivateKey(nickname: String , onionAddress: String , base32EncodedPrivateKey: String , torConfigFiles: TorConfigFiles ): File ? (source) Creates a file containing v3 Client Authorization for a Hidden Service in the format of: Filename: nickname .auth_private File Contents: <56-char-onion-addr-without-.onion-part>:descriptor:x25519: Exceptions are thrown for you with adequate messages if the values passed are non-compliant. Docs: https://2019.www.torproject.org/docs/tor-onion-service.html.en#ClientAuthorization Parameters \u00b6 nickname - The nickname for the file. Is appended with .auth_private and used as the File name nickname requirements are: onionAddress - The .onion address for which this Private Key will exist for base32EncodedPrivateKey - The private key for authenticating to the Hidden Service Exceptions \u00b6 IllegalArgumentException - If passed arguments are not compliant with the spec IllegalStateException - If the file already exists (and must be deleted before overwriting), or if a file exists with the same onion address & private key SecurityException - If access is not authorized Return The File if it was created properly, null if it was not","title":"Add v3 client authentication private key"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/add-v3-client-authentication-private-key/#addv3clientauthenticationprivatekey","text":"@WorkerThread @JvmStatic fun addV3ClientAuthenticationPrivateKey(nickname: String , onionAddress: String , base32EncodedPrivateKey: String , torConfigFiles: TorConfigFiles ): File ? (source) Creates a file containing v3 Client Authorization for a Hidden Service in the format of: Filename: nickname .auth_private File Contents: <56-char-onion-addr-without-.onion-part>:descriptor:x25519: Exceptions are thrown for you with adequate messages if the values passed are non-compliant. Docs: https://2019.www.torproject.org/docs/tor-onion-service.html.en#ClientAuthorization","title":"addV3ClientAuthenticationPrivateKey"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/add-v3-client-authentication-private-key/#parameters","text":"nickname - The nickname for the file. Is appended with .auth_private and used as the File name nickname requirements are: onionAddress - The .onion address for which this Private Key will exist for base32EncodedPrivateKey - The private key for authenticating to the Hidden Service","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/add-v3-client-authentication-private-key/#exceptions","text":"IllegalArgumentException - If passed arguments are not compliant with the spec IllegalStateException - If the file already exists (and must be deleted before overwriting), or if a file exists with the same onion address & private key SecurityException - If access is not authorized Return The File if it was created properly, null if it was not","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/delete-file/","text":"topl-core / io.matthewnelson.topl_core.util / OnionAuthUtilities / deleteFile deleteFile \u00b6 @WorkerThread @JvmStatic fun deleteFile(nickname: String , torConfigFiles: TorConfigFiles ): Boolean ? (source) @WorkerThread @JvmStatic fun deleteFile(file: File , torConfigFiles: TorConfigFiles ): Boolean ? (source)","title":"Delete file"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/delete-file/#deletefile","text":"@WorkerThread @JvmStatic fun deleteFile(nickname: String , torConfigFiles: TorConfigFiles ): Boolean ? (source) @WorkerThread @JvmStatic fun deleteFile(file: File , torConfigFiles: TorConfigFiles ): Boolean ? (source)","title":"deleteFile"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-all-file-nicknames/","text":"topl-core / io.matthewnelson.topl_core.util / OnionAuthUtilities / getAllFileNicknames getAllFileNicknames \u00b6 @WorkerThread @JvmStatic fun getAllFileNicknames(torConfigFiles: TorConfigFiles ): Array < String >? (source) From the v3 Client Authentication directory, all files that contain the \u201c.auth_private\u201d extension will have their name w/o the extension returned in an array. If the directory is empty, returns null . Parameters \u00b6 torConfigFiles -","title":"Get all file nicknames"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-all-file-nicknames/#getallfilenicknames","text":"@WorkerThread @JvmStatic fun getAllFileNicknames(torConfigFiles: TorConfigFiles ): Array < String >? (source) From the v3 Client Authentication directory, all files that contain the \u201c.auth_private\u201d extension will have their name w/o the extension returned in an array. If the directory is empty, returns null .","title":"getAllFileNicknames"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-all-file-nicknames/#parameters","text":"torConfigFiles -","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-all-files/","text":"topl-core / io.matthewnelson.topl_core.util / OnionAuthUtilities / getAllFiles getAllFiles \u00b6 @WorkerThread @JvmStatic fun getAllFiles(torConfigFiles: TorConfigFiles ): Array < File >? (source) All files within the v3 Client Authentication directory are returned. If the directory is empty, returns null . Parameters \u00b6 torConfigFiles -","title":"Get all files"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-all-files/#getallfiles","text":"@WorkerThread @JvmStatic fun getAllFiles(torConfigFiles: TorConfigFiles ): Array < File >? (source) All files within the v3 Client Authentication directory are returned. If the directory is empty, returns null .","title":"getAllFiles"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-all-files/#parameters","text":"torConfigFiles -","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-file-by-nickname/","text":"topl-core / io.matthewnelson.topl_core.util / OnionAuthUtilities / getFileByNickname getFileByNickname \u00b6 @WorkerThread @JvmStatic fun getFileByNickname(nickname: String , torConfigFiles: TorConfigFiles ): File ? (source) Retrieve a v3 client authentication file by the nickname, whether the file extension \u201c.auth_private\u201d is included or not. Parameters \u00b6 nickname - The pre file extension name torConfigFiles -","title":"Get file by nickname"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-file-by-nickname/#getfilebynickname","text":"@WorkerThread @JvmStatic fun getFileByNickname(nickname: String , torConfigFiles: TorConfigFiles ): File ? (source) Retrieve a v3 client authentication file by the nickname, whether the file extension \u201c.auth_private\u201d is included or not.","title":"getFileByNickname"},{"location":"topl-core/io.matthewnelson.topl_core.util/-onion-auth-utilities/get-file-by-nickname/#parameters","text":"nickname - The pre file extension name torConfigFiles -","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller TorInstaller \u00b6 abstract class TorInstaller : CoreConsts (source) Extend this class and implement the need methods. setup is called from io.matthewnelson.topl_core.OnionProxyManager.setup after instantiation, and openBridgesStream is called from io.matthewnelson.topl_core.settings.TorSettingsBuilder.addBridgesFromResources when configuring bridge support. Constructors \u00b6 Name Summary <init> Extend this class and implement the need methods. TorInstaller() Properties \u00b6 Name Summary broadcastLogger This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller . var broadcastLogger: BroadcastLogger ? Functions \u00b6 Name Summary getAssetOrResourceByName fun getAssetOrResourceByName(fileName: String ): InputStream ? openBridgesStream If first byte of stream is 0, then the following stream will have the form abstract fun openBridgesStream(): InputStream ? setup Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. abstract fun setup(): Unit updateTorConfigCustom abstract fun updateTorConfigCustom(content: String ?): Unit","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/#torinstaller","text":"abstract class TorInstaller : CoreConsts (source) Extend this class and implement the need methods. setup is called from io.matthewnelson.topl_core.OnionProxyManager.setup after instantiation, and openBridgesStream is called from io.matthewnelson.topl_core.settings.TorSettingsBuilder.addBridgesFromResources when configuring bridge support.","title":"TorInstaller"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/#constructors","text":"Name Summary <init> Extend this class and implement the need methods. TorInstaller()","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/#properties","text":"Name Summary broadcastLogger This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller . var broadcastLogger: BroadcastLogger ?","title":"Properties"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/#functions","text":"Name Summary getAssetOrResourceByName fun getAssetOrResourceByName(fileName: String ): InputStream ? openBridgesStream If first byte of stream is 0, then the following stream will have the form abstract fun openBridgesStream(): InputStream ? setup Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. abstract fun setup(): Unit updateTorConfigCustom abstract fun updateTorConfigCustom(content: String ?): Unit","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/-init-/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / <init> <init> \u00b6 TorInstaller() Extend this class and implement the need methods. setup is called from io.matthewnelson.topl_core.OnionProxyManager.setup after instantiation, and openBridgesStream is called from io.matthewnelson.topl_core.settings.TorSettingsBuilder.addBridgesFromResources when configuring bridge support.","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/-init-/#init","text":"TorInstaller() Extend this class and implement the need methods. setup is called from io.matthewnelson.topl_core.OnionProxyManager.setup after instantiation, and openBridgesStream is called from io.matthewnelson.topl_core.settings.TorSettingsBuilder.addBridgesFromResources when configuring bridge support.","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/broadcast-logger/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / broadcastLogger broadcastLogger \u00b6 protected var broadcastLogger: BroadcastLogger ? (source) This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller .","title":"Broadcast logger"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/broadcast-logger/#broadcastlogger","text":"protected var broadcastLogger: BroadcastLogger ? (source) This gets set as soon as io.matthewnelson.topl_core.OnionProxyManager is instantiated, and can be used to broadcast messages in your class which extends TorInstaller .","title":"broadcastLogger"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/get-asset-or-resource-by-name/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / getAssetOrResourceByName getAssetOrResourceByName \u00b6 fun getAssetOrResourceByName(fileName: String ): InputStream ? (source)","title":"Get asset or resource by name"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/get-asset-or-resource-by-name/#getassetorresourcebyname","text":"fun getAssetOrResourceByName(fileName: String ): InputStream ? (source)","title":"getAssetOrResourceByName"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/open-bridges-stream/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / openBridgesStream openBridgesStream \u00b6 abstract fun openBridgesStream(): InputStream ? (source) If first byte of stream is 0, then the following stream will have the form ($bridge_type $bridge_info \\r\\n)* if first byte is 1, the the stream will have the form ($bridge_info \\r\\n)* The second form is used for custom bridges from the user. /* BridgesList is an overloaded field, which can cause some confusion. The list can be: 1) a filter like obfs4, meek, or snowflake OR 2) it can be a custom bridge For (1), we just pass back all bridges, the filter will occur elsewhere in the library. For (2) we return the bridge list as a raw stream. If length is greater than 9, then we know this is a custom bridge * */ // TODO: Completely refactor how bridges work. val userDefinedBridgeList : String = TorServicePrefs ( torService . getContext ()) . getList ( PrefKeyList . USER_DEFINED_BRIDGES , arrayListOf ()) . joinToString () var bridgeType = ( if ( userDefinedBridgeList . length > 9 ) 1 else 0 ). toByte () // Terrible hack. Must keep in sync with topl::addBridgesFromResources. if ( bridgeType . toInt () == 0 ) { when ( userDefinedBridgeList ) { SupportedBridgeType . OBFS4 -> bridgeType = 2 SupportedBridgeType . MEEK -> bridgeType = 3 SupportedBridgeType . SNOWFLAKE -> bridgeType = 4 } } val bridgeTypeStream = ByteArrayInputStream ( byteArrayOf ( bridgeType )) val bridgeStream = if ( bridgeType . toInt () == 1 ) { ByteArrayInputStream ( userDefinedBridgeList . toByteArray ()) } else { torService . getContext (). resources . openRawResource ( R . raw . bridges ) } return SequenceInputStream ( bridgeTypeStream , bridgeStream )","title":"Open bridges stream"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/open-bridges-stream/#openbridgesstream","text":"abstract fun openBridgesStream(): InputStream ? (source) If first byte of stream is 0, then the following stream will have the form ($bridge_type $bridge_info \\r\\n)* if first byte is 1, the the stream will have the form ($bridge_info \\r\\n)* The second form is used for custom bridges from the user. /* BridgesList is an overloaded field, which can cause some confusion. The list can be: 1) a filter like obfs4, meek, or snowflake OR 2) it can be a custom bridge For (1), we just pass back all bridges, the filter will occur elsewhere in the library. For (2) we return the bridge list as a raw stream. If length is greater than 9, then we know this is a custom bridge * */ // TODO: Completely refactor how bridges work. val userDefinedBridgeList : String = TorServicePrefs ( torService . getContext ()) . getList ( PrefKeyList . USER_DEFINED_BRIDGES , arrayListOf ()) . joinToString () var bridgeType = ( if ( userDefinedBridgeList . length > 9 ) 1 else 0 ). toByte () // Terrible hack. Must keep in sync with topl::addBridgesFromResources. if ( bridgeType . toInt () == 0 ) { when ( userDefinedBridgeList ) { SupportedBridgeType . OBFS4 -> bridgeType = 2 SupportedBridgeType . MEEK -> bridgeType = 3 SupportedBridgeType . SNOWFLAKE -> bridgeType = 4 } } val bridgeTypeStream = ByteArrayInputStream ( byteArrayOf ( bridgeType )) val bridgeStream = if ( bridgeType . toInt () == 1 ) { ByteArrayInputStream ( userDefinedBridgeList . toByteArray ()) } else { torService . getContext (). resources . openRawResource ( R . raw . bridges ) } return SequenceInputStream ( bridgeTypeStream , bridgeStream )","title":"openBridgesStream"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/setup/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / setup setup \u00b6 abstract fun setup(): Unit (source) Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. if ( ! torConfigFiles . geoIpFile . exists ()) { copyGeoIpAsset () geoIpFileCopied = true } if ( ! torConfigFiles . geoIpv6File . exists ()) { copyGeoIpv6Asset () geoIpv6FileCopied = true } if ( ! torConfigFiles . v3AuthPrivateDir . exists ()) { torConfigFiles . v3AuthPrivateDir . mkdirs () } val localPrefs = BaseService . getLocalPrefs ( torService . getContext ()) // If the app version has been increased, or if this is a debug build, copy over // geoip assets then update SharedPreferences with the new version code. This // mitigates copying to be done only if a version upgrade is had. if ( BaseService . getBuildConfigDebug () || BaseService . getBuildConfigVersionCode () > localPrefs . getInt ( APP_VERSION_CODE , - 1 ) ) { if ( ! geoIpFileCopied ) { copyGeoIpAsset () } if ( ! geoIpv6FileCopied ) { copyGeoIpv6Asset () } localPrefs . edit () . putInt ( APP_VERSION_CODE , BaseService . getBuildConfigVersionCode ()) . apply () } Return true if tor installation is successful, otherwise false.","title":"Setup"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/setup/#setup","text":"abstract fun setup(): Unit (source) Sets up and installs any files needed to run tor. If the tor files are already on the system this does not need to be invoked. if ( ! torConfigFiles . geoIpFile . exists ()) { copyGeoIpAsset () geoIpFileCopied = true } if ( ! torConfigFiles . geoIpv6File . exists ()) { copyGeoIpv6Asset () geoIpv6FileCopied = true } if ( ! torConfigFiles . v3AuthPrivateDir . exists ()) { torConfigFiles . v3AuthPrivateDir . mkdirs () } val localPrefs = BaseService . getLocalPrefs ( torService . getContext ()) // If the app version has been increased, or if this is a debug build, copy over // geoip assets then update SharedPreferences with the new version code. This // mitigates copying to be done only if a version upgrade is had. if ( BaseService . getBuildConfigDebug () || BaseService . getBuildConfigVersionCode () > localPrefs . getInt ( APP_VERSION_CODE , - 1 ) ) { if ( ! geoIpFileCopied ) { copyGeoIpAsset () } if ( ! geoIpv6FileCopied ) { copyGeoIpv6Asset () } localPrefs . edit () . putInt ( APP_VERSION_CODE , BaseService . getBuildConfigVersionCode ()) . apply () } Return true if tor installation is successful, otherwise false.","title":"setup"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/update-tor-config-custom/","text":"topl-core / io.matthewnelson.topl_core.util / TorInstaller / updateTorConfigCustom updateTorConfigCustom \u00b6 abstract fun updateTorConfigCustom(content: String ?): Unit (source)","title":"Update tor config custom"},{"location":"topl-core/io.matthewnelson.topl_core.util/-tor-installer/update-tor-config-custom/#updatetorconfigcustom","text":"abstract fun updateTorConfigCustom(content: String ?): Unit (source)","title":"updateTorConfigCustom"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/","text":"topl-core / io.matthewnelson.topl_core.util / Utilities Utilities \u00b6 object Utilities (source) Functions \u00b6 Name Summary socks4aSocketConnection When making a request via the Tor Proxy one needs to establish the socket using SOCKS4a. However Android only supports SOCKS4 so this class provides a wrapper when getting a socket to handle things. fun socks4aSocketConnection(networkHost: String , networkPort: Int , socksHost: String , socksPort: Int ): Socket","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/#utilities","text":"object Utilities (source)","title":"Utilities"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/#functions","text":"Name Summary socks4aSocketConnection When making a request via the Tor Proxy one needs to establish the socket using SOCKS4a. However Android only supports SOCKS4 so this class provides a wrapper when getting a socket to handle things. fun socks4aSocketConnection(networkHost: String , networkPort: Int , socksHost: String , socksPort: Int ): Socket","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/socks4a-socket-connection/","text":"topl-core / io.matthewnelson.topl_core.util / Utilities / socks4aSocketConnection socks4aSocketConnection \u00b6 @JvmStatic fun socks4aSocketConnection(networkHost: String , networkPort: Int , socksHost: String , socksPort: Int ): Socket (source) When making a request via the Tor Proxy one needs to establish the socket using SOCKS4a. However Android only supports SOCKS4 so this class provides a wrapper when getting a socket to handle things. Parameters \u00b6 networkHost - DNS or IP address of destination host networkPort - Port of destination host socksHost - DNS or IP address of local SOCKS4A Proxy (the Tor Onion Proxy) socksPort - Port of SOCKS4A Proxy (the Tor Onion Proxy) Exceptions \u00b6 IOException - Networking issues Return A socket set up to relay via socks to the local Tor Onion Proxy and via the Tor Network to the destination host.","title":"Socks4a socket connection"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/socks4a-socket-connection/#socks4asocketconnection","text":"@JvmStatic fun socks4aSocketConnection(networkHost: String , networkPort: Int , socksHost: String , socksPort: Int ): Socket (source) When making a request via the Tor Proxy one needs to establish the socket using SOCKS4a. However Android only supports SOCKS4 so this class provides a wrapper when getting a socket to handle things.","title":"socks4aSocketConnection"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/socks4a-socket-connection/#parameters","text":"networkHost - DNS or IP address of destination host networkPort - Port of destination host socksHost - DNS or IP address of local SOCKS4A Proxy (the Tor Onion Proxy) socksPort - Port of SOCKS4A Proxy (the Tor Onion Proxy)","title":"Parameters"},{"location":"topl-core/io.matthewnelson.topl_core.util/-utilities/socks4a-socket-connection/#exceptions","text":"IOException - Networking issues Return A socket set up to relay via socks to the local Tor Onion Proxy and via the Tor Network to the destination host.","title":"Exceptions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/","text":"topl-core / io.matthewnelson.topl_core.util / WriteObserver WriteObserver \u00b6 class WriteObserver : FileObserver (source) Adapted from the Briar WriteObserver code Constructors \u00b6 Name Summary <init> Adapted from the Briar WriteObserver code WriteObserver(file: File ) Functions \u00b6 Name Summary onEvent fun onEvent(i: Int , s: String ?): Unit poll fun poll(timeout: Long , unit: TimeUnit ): Boolean","title":"Index"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/#writeobserver","text":"class WriteObserver : FileObserver (source) Adapted from the Briar WriteObserver code","title":"WriteObserver"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/#constructors","text":"Name Summary <init> Adapted from the Briar WriteObserver code WriteObserver(file: File )","title":"Constructors"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/#functions","text":"Name Summary onEvent fun onEvent(i: Int , s: String ?): Unit poll fun poll(timeout: Long , unit: TimeUnit ): Boolean","title":"Functions"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/-init-/","text":"topl-core / io.matthewnelson.topl_core.util / WriteObserver / <init> <init> \u00b6 WriteObserver(file: File ) Adapted from the Briar WriteObserver code","title":" init "},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/-init-/#init","text":"WriteObserver(file: File ) Adapted from the Briar WriteObserver code","title":"&lt;init&gt;"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/on-event/","text":"topl-core / io.matthewnelson.topl_core.util / WriteObserver / onEvent onEvent \u00b6 fun onEvent(i: Int , s: String ?): Unit (source)","title":"On event"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/on-event/#onevent","text":"fun onEvent(i: Int , s: String ?): Unit (source)","title":"onEvent"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/poll/","text":"topl-core / io.matthewnelson.topl_core.util / WriteObserver / poll poll \u00b6 fun poll(timeout: Long , unit: TimeUnit ): Boolean (source)","title":"Poll"},{"location":"topl-core/io.matthewnelson.topl_core.util/-write-observer/poll/#poll","text":"fun poll(timeout: Long , unit: TimeUnit ): Boolean (source)","title":"poll"},{"location":"topl-core-base/","text":"topl-core-base Packages \u00b6 Name Summary io.matthewnelson.topl_core_base Index \u00b6 All Types","title":"Index"},{"location":"topl-core-base/#packages","text":"Name Summary io.matthewnelson.topl_core_base","title":"Packages"},{"location":"topl-core-base/#index","text":"All Types","title":"Index"},{"location":"topl-core-base/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.topl_core_base.BaseConsts \u00b6 | io.matthewnelson.topl_core_base.EventBroadcaster \u00b6 Service for sending event logs to the system. | (extensions in package io.matthewnelson.topl_core_base) java.io.File \u00b6 | io.matthewnelson.topl_core_base.TorConfigFiles \u00b6 Holds Tor configuration information for files and directories that Tor will use. | io.matthewnelson.topl_core_base.TorSettings \u00b6 This class is for defining default values for your torrc file. Extend this class and define your own settings.","title":"Index"},{"location":"topl-core-base/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"topl-core-base/alltypes/#iomatthewnelsontopl_core_basebaseconsts","text":"|","title":"io.matthewnelson.topl_core_base.BaseConsts"},{"location":"topl-core-base/alltypes/#iomatthewnelsontopl_core_baseeventbroadcaster","text":"Service for sending event logs to the system. | (extensions in package io.matthewnelson.topl_core_base)","title":"io.matthewnelson.topl_core_base.EventBroadcaster"},{"location":"topl-core-base/alltypes/#javaiofile","text":"|","title":"java.io.File"},{"location":"topl-core-base/alltypes/#iomatthewnelsontopl_core_basetorconfigfiles","text":"Holds Tor configuration information for files and directories that Tor will use. |","title":"io.matthewnelson.topl_core_base.TorConfigFiles"},{"location":"topl-core-base/alltypes/#iomatthewnelsontopl_core_basetorsettings","text":"This class is for defining default values for your torrc file. Extend this class and define your own settings.","title":"io.matthewnelson.topl_core_base.TorSettings"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/","text":"topl-core-base / io.matthewnelson.topl_core_base Package io.matthewnelson.topl_core_base \u00b6 Types \u00b6 Name Summary BaseConsts abstract class BaseConsts EventBroadcaster Service for sending event logs to the system. abstract class EventBroadcaster : BaseConsts TorConfigFiles Holds Tor configuration information for files and directories that Tor will use. class TorConfigFiles : BaseConsts TorSettings This class is for defining default values for your torrc file. Extend this class and define your own settings. abstract class TorSettings : BaseConsts Extensions for External Classes \u00b6 Name Summary java.io.File","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/#package-iomatthewnelsontopl_core_base","text":"","title":"Package io.matthewnelson.topl_core_base"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/#types","text":"Name Summary BaseConsts abstract class BaseConsts EventBroadcaster Service for sending event logs to the system. abstract class EventBroadcaster : BaseConsts TorConfigFiles Holds Tor configuration information for files and directories that Tor will use. class TorConfigFiles : BaseConsts TorSettings This class is for defining default values for your torrc file. Extend this class and define your own settings. abstract class TorSettings : BaseConsts","title":"Types"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/#extensions-for-external-classes","text":"Name Summary java.io.File","title":"Extensions for External Classes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts BaseConsts \u00b6 abstract class BaseConsts (source) Annotations \u00b6 Name Summary BroadcastType annotation class BroadcastType ConfigFileName annotation class ConfigFileName ConnectionPadding annotation class ConnectionPadding IsolationFlag annotation class IsolationFlag PortOption annotation class PortOption ProxyType annotation class ProxyType SupportedBridgeType annotation class SupportedBridgeType TorNetworkState annotation class TorNetworkState TorState annotation class TorState Constructors \u00b6 Name Summary <init> BaseConsts() Inheritors \u00b6 Name Summary EventBroadcaster Service for sending event logs to the system. abstract class EventBroadcaster : BaseConsts TorConfigFiles Holds Tor configuration information for files and directories that Tor will use. class TorConfigFiles : BaseConsts TorSettings This class is for defining default values for your torrc file. Extend this class and define your own settings. abstract class TorSettings : BaseConsts","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/#baseconsts","text":"abstract class BaseConsts (source)","title":"BaseConsts"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/#annotations","text":"Name Summary BroadcastType annotation class BroadcastType ConfigFileName annotation class ConfigFileName ConnectionPadding annotation class ConnectionPadding IsolationFlag annotation class IsolationFlag PortOption annotation class PortOption ProxyType annotation class ProxyType SupportedBridgeType annotation class SupportedBridgeType TorNetworkState annotation class TorNetworkState TorState annotation class TorState","title":"Annotations"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/#constructors","text":"Name Summary <init> BaseConsts()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/#inheritors","text":"Name Summary EventBroadcaster Service for sending event logs to the system. abstract class EventBroadcaster : BaseConsts TorConfigFiles Holds Tor configuration information for files and directories that Tor will use. class TorConfigFiles : BaseConsts TorSettings This class is for defining default values for your torrc file. Extend this class and define your own settings. abstract class TorSettings : BaseConsts","title":"Inheritors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / <init> <init> \u00b6 BaseConsts()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-init-/#init","text":"BaseConsts()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType BroadcastType \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class BroadcastType (source) Constructors \u00b6 Name Summary <init> BroadcastType() Companion Object Properties \u00b6 Name Summary DEBUG const val DEBUG: String ERROR const val ERROR: String EXCEPTION const val EXCEPTION: String NOTICE const val NOTICE: String WARN const val WARN: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/#broadcasttype","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class BroadcastType (source)","title":"BroadcastType"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/#constructors","text":"Name Summary <init> BroadcastType()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/#companion-object-properties","text":"Name Summary DEBUG const val DEBUG: String ERROR const val ERROR: String EXCEPTION const val EXCEPTION: String NOTICE const val NOTICE: String WARN const val WARN: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-d-e-b-u-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / DEBUG DEBUG \u00b6 const val DEBUG: String (source)","title":" d e b u g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-d-e-b-u-g/#debug","text":"const val DEBUG: String (source)","title":"DEBUG"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-e-r-r-o-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / ERROR ERROR \u00b6 const val ERROR: String (source)","title":" e r r o r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-e-r-r-o-r/#error","text":"const val ERROR: String (source)","title":"ERROR"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-e-x-c-e-p-t-i-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / EXCEPTION EXCEPTION \u00b6 const val EXCEPTION: String (source)","title":" e x c e p t i o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-e-x-c-e-p-t-i-o-n/#exception","text":"const val EXCEPTION: String (source)","title":"EXCEPTION"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / <init> <init> \u00b6 BroadcastType()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-init-/#init","text":"BroadcastType()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-n-o-t-i-c-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / NOTICE NOTICE \u00b6 const val NOTICE: String (source)","title":" n o t i c e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-n-o-t-i-c-e/#notice","text":"const val NOTICE: String (source)","title":"NOTICE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-w-a-r-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / BroadcastType / WARN WARN \u00b6 const val WARN: String (source)","title":" w a r n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-broadcast-type/-w-a-r-n/#warn","text":"const val WARN: String (source)","title":"WARN"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName ConfigFileName \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class ConfigFileName (source) Constructors \u00b6 Name Summary <init> ConfigFileName() Companion Object Properties \u00b6 Name Summary CONTROL_PORT const val CONTROL_PORT: String COOKIE_AUTH const val COOKIE_AUTH: String DATA_DIR const val DATA_DIR: String GEO_IP const val GEO_IP: String GEO_IPV_6 const val GEO_IPV_6: String HIDDEN_SERVICE const val HIDDEN_SERVICE: String HOST const val HOST: String RESOLVE_CONF const val RESOLVE_CONF: String TOR_EXECUTABLE const val TOR_EXECUTABLE: String TORRC const val TORRC: String V3_AUTH_PRIVATE_DIR const val V3_AUTH_PRIVATE_DIR: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/#configfilename","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class ConfigFileName (source)","title":"ConfigFileName"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/#constructors","text":"Name Summary <init> ConfigFileName()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/#companion-object-properties","text":"Name Summary CONTROL_PORT const val CONTROL_PORT: String COOKIE_AUTH const val COOKIE_AUTH: String DATA_DIR const val DATA_DIR: String GEO_IP const val GEO_IP: String GEO_IPV_6 const val GEO_IPV_6: String HIDDEN_SERVICE const val HIDDEN_SERVICE: String HOST const val HOST: String RESOLVE_CONF const val RESOLVE_CONF: String TOR_EXECUTABLE const val TOR_EXECUTABLE: String TORRC const val TORRC: String V3_AUTH_PRIVATE_DIR const val V3_AUTH_PRIVATE_DIR: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-c-o-n-t-r-o-l_-p-o-r-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / CONTROL_PORT CONTROL_PORT \u00b6 const val CONTROL_PORT: String (source)","title":" c o n t r o l  p o r t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-c-o-n-t-r-o-l_-p-o-r-t/#control_port","text":"const val CONTROL_PORT: String (source)","title":"CONTROL_PORT"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-c-o-o-k-i-e_-a-u-t-h/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / COOKIE_AUTH COOKIE_AUTH \u00b6 const val COOKIE_AUTH: String (source)","title":" c o o k i e  a u t h"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-c-o-o-k-i-e_-a-u-t-h/#cookie_auth","text":"const val COOKIE_AUTH: String (source)","title":"COOKIE_AUTH"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-d-a-t-a_-d-i-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / DATA_DIR DATA_DIR \u00b6 const val DATA_DIR: String (source)","title":" d a t a  d i r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-d-a-t-a_-d-i-r/#data_dir","text":"const val DATA_DIR: String (source)","title":"DATA_DIR"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-g-e-o_-i-p-v_6/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / GEO_IPV_6 GEO_IPV_6 \u00b6 const val GEO_IPV_6: String (source)","title":" g e o  i p v 6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-g-e-o_-i-p-v_6/#geo_ipv_6","text":"const val GEO_IPV_6: String (source)","title":"GEO_IPV_6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-g-e-o_-i-p/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / GEO_IP GEO_IP \u00b6 const val GEO_IP: String (source)","title":" g e o  i p"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-g-e-o_-i-p/#geo_ip","text":"const val GEO_IP: String (source)","title":"GEO_IP"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-h-i-d-d-e-n_-s-e-r-v-i-c-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / HIDDEN_SERVICE HIDDEN_SERVICE \u00b6 const val HIDDEN_SERVICE: String (source)","title":" h i d d e n  s e r v i c e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-h-i-d-d-e-n_-s-e-r-v-i-c-e/#hidden_service","text":"const val HIDDEN_SERVICE: String (source)","title":"HIDDEN_SERVICE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-h-o-s-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / HOST HOST \u00b6 const val HOST: String (source)","title":" h o s t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-h-o-s-t/#host","text":"const val HOST: String (source)","title":"HOST"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / <init> <init> \u00b6 ConfigFileName()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-init-/#init","text":"ConfigFileName()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-r-e-s-o-l-v-e_-c-o-n-f/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / RESOLVE_CONF RESOLVE_CONF \u00b6 const val RESOLVE_CONF: String (source)","title":" r e s o l v e  c o n f"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-r-e-s-o-l-v-e_-c-o-n-f/#resolve_conf","text":"const val RESOLVE_CONF: String (source)","title":"RESOLVE_CONF"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-t-o-r-r-c/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / TORRC TORRC \u00b6 const val TORRC: String (source)","title":" t o r r c"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-t-o-r-r-c/#torrc","text":"const val TORRC: String (source)","title":"TORRC"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-t-o-r_-e-x-e-c-u-t-a-b-l-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / TOR_EXECUTABLE TOR_EXECUTABLE \u00b6 const val TOR_EXECUTABLE: String (source)","title":" t o r  e x e c u t a b l e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-t-o-r_-e-x-e-c-u-t-a-b-l-e/#tor_executable","text":"const val TOR_EXECUTABLE: String (source)","title":"TOR_EXECUTABLE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-v3_-a-u-t-h_-p-r-i-v-a-t-e_-d-i-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConfigFileName / V3_AUTH_PRIVATE_DIR V3_AUTH_PRIVATE_DIR \u00b6 const val V3_AUTH_PRIVATE_DIR: String (source)","title":" v3  a u t h  p r i v a t e  d i r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-config-file-name/-v3_-a-u-t-h_-p-r-i-v-a-t-e_-d-i-r/#v3_auth_private_dir","text":"const val V3_AUTH_PRIVATE_DIR: String (source)","title":"V3_AUTH_PRIVATE_DIR"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding ConnectionPadding \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class ConnectionPadding (source) Constructors \u00b6 Name Summary <init> ConnectionPadding() Companion Object Properties \u00b6 Name Summary AUTO const val AUTO: String OFF const val OFF: String ON const val ON: String Companion Object Functions \u00b6 Name Summary getAll fun getAll(): List < String >","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/#connectionpadding","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class ConnectionPadding (source)","title":"ConnectionPadding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/#constructors","text":"Name Summary <init> ConnectionPadding()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/#companion-object-properties","text":"Name Summary AUTO const val AUTO: String OFF const val OFF: String ON const val ON: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/#companion-object-functions","text":"Name Summary getAll fun getAll(): List < String >","title":"Companion Object Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-a-u-t-o/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / AUTO AUTO \u00b6 const val AUTO: String (source)","title":" a u t o"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-a-u-t-o/#auto","text":"const val AUTO: String (source)","title":"AUTO"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / <init> <init> \u00b6 ConnectionPadding()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-init-/#init","text":"ConnectionPadding()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-o-f-f/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / OFF OFF \u00b6 const val OFF: String (source)","title":" o f f"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-o-f-f/#off","text":"const val OFF: String (source)","title":"OFF"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / ON ON \u00b6 const val ON: String (source)","title":" o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/-o-n/#on","text":"const val ON: String (source)","title":"ON"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/get-all/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ConnectionPadding / getAll getAll \u00b6 fun getAll(): List < String > (source)","title":"Get all"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-connection-padding/get-all/#getall","text":"fun getAll(): List < String > (source)","title":"getAll"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag IsolationFlag \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class IsolationFlag (source) Constructors \u00b6 Name Summary <init> IsolationFlag() Companion Object Properties \u00b6 Name Summary CACHE_DNS const val CACHE_DNS: String CACHE_IPV4_DNS const val CACHE_IPV4_DNS: String CACHE_IPV6_DNS const val CACHE_IPV6_DNS: String IPV6_TRAFFIC const val IPV6_TRAFFIC: String ISOLATE_CLIENT_PROTOCOL const val ISOLATE_CLIENT_PROTOCOL: String ISOLATE_DEST_ADDR const val ISOLATE_DEST_ADDR: String ISOLATE_DEST_PORT const val ISOLATE_DEST_PORT: String KEEP_ALIVE_ISOLATE_SOCKS_AUTH const val KEEP_ALIVE_ISOLATE_SOCKS_AUTH: String NO_DNS_REQUEST const val NO_DNS_REQUEST: String NO_IPV4_TRAFFIC const val NO_IPV4_TRAFFIC: String NO_ISOLATE_CLIENT_ADDR const val NO_ISOLATE_CLIENT_ADDR: String NO_ISOLATE_SOCKS_AUTH const val NO_ISOLATE_SOCKS_AUTH: String NO_ONION_TRAFFIC const val NO_ONION_TRAFFIC: String ONION_TRAFFIC_ONLY const val ONION_TRAFFIC_ONLY: String PREFER_IPV6 const val PREFER_IPV6: String PREFER_IPV6_AUTOMAP const val PREFER_IPV6_AUTOMAP: String PREFER_SOCKS_NO_AUTH const val PREFER_SOCKS_NO_AUTH: String USE_DNS_CACHE const val USE_DNS_CACHE: String USE_IPV4_CACHE const val USE_IPV4_CACHE: String USE_IPV6_CACHE const val USE_IPV6_CACHE: String Companion Object Functions \u00b6 Name Summary getAll fun getAll(): List < String >","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/#isolationflag","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class IsolationFlag (source)","title":"IsolationFlag"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/#constructors","text":"Name Summary <init> IsolationFlag()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/#companion-object-properties","text":"Name Summary CACHE_DNS const val CACHE_DNS: String CACHE_IPV4_DNS const val CACHE_IPV4_DNS: String CACHE_IPV6_DNS const val CACHE_IPV6_DNS: String IPV6_TRAFFIC const val IPV6_TRAFFIC: String ISOLATE_CLIENT_PROTOCOL const val ISOLATE_CLIENT_PROTOCOL: String ISOLATE_DEST_ADDR const val ISOLATE_DEST_ADDR: String ISOLATE_DEST_PORT const val ISOLATE_DEST_PORT: String KEEP_ALIVE_ISOLATE_SOCKS_AUTH const val KEEP_ALIVE_ISOLATE_SOCKS_AUTH: String NO_DNS_REQUEST const val NO_DNS_REQUEST: String NO_IPV4_TRAFFIC const val NO_IPV4_TRAFFIC: String NO_ISOLATE_CLIENT_ADDR const val NO_ISOLATE_CLIENT_ADDR: String NO_ISOLATE_SOCKS_AUTH const val NO_ISOLATE_SOCKS_AUTH: String NO_ONION_TRAFFIC const val NO_ONION_TRAFFIC: String ONION_TRAFFIC_ONLY const val ONION_TRAFFIC_ONLY: String PREFER_IPV6 const val PREFER_IPV6: String PREFER_IPV6_AUTOMAP const val PREFER_IPV6_AUTOMAP: String PREFER_SOCKS_NO_AUTH const val PREFER_SOCKS_NO_AUTH: String USE_DNS_CACHE const val USE_DNS_CACHE: String USE_IPV4_CACHE const val USE_IPV4_CACHE: String USE_IPV6_CACHE const val USE_IPV6_CACHE: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/#companion-object-functions","text":"Name Summary getAll fun getAll(): List < String >","title":"Companion Object Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-c-a-c-h-e_-d-n-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / CACHE_DNS CACHE_DNS \u00b6 const val CACHE_DNS: String (source)","title":" c a c h e  d n s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-c-a-c-h-e_-d-n-s/#cache_dns","text":"const val CACHE_DNS: String (source)","title":"CACHE_DNS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-c-a-c-h-e_-i-p-v4_-d-n-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / CACHE_IPV4_DNS CACHE_IPV4_DNS \u00b6 const val CACHE_IPV4_DNS: String (source)","title":" c a c h e  i p v4  d n s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-c-a-c-h-e_-i-p-v4_-d-n-s/#cache_ipv4_dns","text":"const val CACHE_IPV4_DNS: String (source)","title":"CACHE_IPV4_DNS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-c-a-c-h-e_-i-p-v6_-d-n-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / CACHE_IPV6_DNS CACHE_IPV6_DNS \u00b6 const val CACHE_IPV6_DNS: String (source)","title":" c a c h e  i p v6  d n s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-c-a-c-h-e_-i-p-v6_-d-n-s/#cache_ipv6_dns","text":"const val CACHE_IPV6_DNS: String (source)","title":"CACHE_IPV6_DNS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-i-p-v6_-t-r-a-f-f-i-c/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / IPV6_TRAFFIC IPV6_TRAFFIC \u00b6 const val IPV6_TRAFFIC: String (source)","title":" i p v6  t r a f f i c"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-i-p-v6_-t-r-a-f-f-i-c/#ipv6_traffic","text":"const val IPV6_TRAFFIC: String (source)","title":"IPV6_TRAFFIC"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-i-s-o-l-a-t-e_-c-l-i-e-n-t_-p-r-o-t-o-c-o-l/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / ISOLATE_CLIENT_PROTOCOL ISOLATE_CLIENT_PROTOCOL \u00b6 const val ISOLATE_CLIENT_PROTOCOL: String (source)","title":" i s o l a t e  c l i e n t  p r o t o c o l"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-i-s-o-l-a-t-e_-c-l-i-e-n-t_-p-r-o-t-o-c-o-l/#isolate_client_protocol","text":"const val ISOLATE_CLIENT_PROTOCOL: String (source)","title":"ISOLATE_CLIENT_PROTOCOL"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-i-s-o-l-a-t-e_-d-e-s-t_-a-d-d-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / ISOLATE_DEST_ADDR ISOLATE_DEST_ADDR \u00b6 const val ISOLATE_DEST_ADDR: String (source)","title":" i s o l a t e  d e s t  a d d r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-i-s-o-l-a-t-e_-d-e-s-t_-a-d-d-r/#isolate_dest_addr","text":"const val ISOLATE_DEST_ADDR: String (source)","title":"ISOLATE_DEST_ADDR"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-i-s-o-l-a-t-e_-d-e-s-t_-p-o-r-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / ISOLATE_DEST_PORT ISOLATE_DEST_PORT \u00b6 const val ISOLATE_DEST_PORT: String (source)","title":" i s o l a t e  d e s t  p o r t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-i-s-o-l-a-t-e_-d-e-s-t_-p-o-r-t/#isolate_dest_port","text":"const val ISOLATE_DEST_PORT: String (source)","title":"ISOLATE_DEST_PORT"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / <init> <init> \u00b6 IsolationFlag()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-init-/#init","text":"IsolationFlag()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-k-e-e-p_-a-l-i-v-e_-i-s-o-l-a-t-e_-s-o-c-k-s_-a-u-t-h/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / KEEP_ALIVE_ISOLATE_SOCKS_AUTH KEEP_ALIVE_ISOLATE_SOCKS_AUTH \u00b6 const val KEEP_ALIVE_ISOLATE_SOCKS_AUTH: String (source)","title":" k e e p  a l i v e  i s o l a t e  s o c k s  a u t h"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-k-e-e-p_-a-l-i-v-e_-i-s-o-l-a-t-e_-s-o-c-k-s_-a-u-t-h/#keep_alive_isolate_socks_auth","text":"const val KEEP_ALIVE_ISOLATE_SOCKS_AUTH: String (source)","title":"KEEP_ALIVE_ISOLATE_SOCKS_AUTH"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-d-n-s_-r-e-q-u-e-s-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / NO_DNS_REQUEST NO_DNS_REQUEST \u00b6 const val NO_DNS_REQUEST: String (source)","title":" n o  d n s  r e q u e s t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-d-n-s_-r-e-q-u-e-s-t/#no_dns_request","text":"const val NO_DNS_REQUEST: String (source)","title":"NO_DNS_REQUEST"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-i-p-v4_-t-r-a-f-f-i-c/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / NO_IPV4_TRAFFIC NO_IPV4_TRAFFIC \u00b6 const val NO_IPV4_TRAFFIC: String (source)","title":" n o  i p v4  t r a f f i c"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-i-p-v4_-t-r-a-f-f-i-c/#no_ipv4_traffic","text":"const val NO_IPV4_TRAFFIC: String (source)","title":"NO_IPV4_TRAFFIC"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-i-s-o-l-a-t-e_-c-l-i-e-n-t_-a-d-d-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / NO_ISOLATE_CLIENT_ADDR NO_ISOLATE_CLIENT_ADDR \u00b6 const val NO_ISOLATE_CLIENT_ADDR: String (source)","title":" n o  i s o l a t e  c l i e n t  a d d r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-i-s-o-l-a-t-e_-c-l-i-e-n-t_-a-d-d-r/#no_isolate_client_addr","text":"const val NO_ISOLATE_CLIENT_ADDR: String (source)","title":"NO_ISOLATE_CLIENT_ADDR"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-i-s-o-l-a-t-e_-s-o-c-k-s_-a-u-t-h/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / NO_ISOLATE_SOCKS_AUTH NO_ISOLATE_SOCKS_AUTH \u00b6 const val NO_ISOLATE_SOCKS_AUTH: String (source)","title":" n o  i s o l a t e  s o c k s  a u t h"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-i-s-o-l-a-t-e_-s-o-c-k-s_-a-u-t-h/#no_isolate_socks_auth","text":"const val NO_ISOLATE_SOCKS_AUTH: String (source)","title":"NO_ISOLATE_SOCKS_AUTH"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-o-n-i-o-n_-t-r-a-f-f-i-c/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / NO_ONION_TRAFFIC NO_ONION_TRAFFIC \u00b6 const val NO_ONION_TRAFFIC: String (source)","title":" n o  o n i o n  t r a f f i c"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-n-o_-o-n-i-o-n_-t-r-a-f-f-i-c/#no_onion_traffic","text":"const val NO_ONION_TRAFFIC: String (source)","title":"NO_ONION_TRAFFIC"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-o-n-i-o-n_-t-r-a-f-f-i-c_-o-n-l-y/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / ONION_TRAFFIC_ONLY ONION_TRAFFIC_ONLY \u00b6 const val ONION_TRAFFIC_ONLY: String (source)","title":" o n i o n  t r a f f i c  o n l y"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-o-n-i-o-n_-t-r-a-f-f-i-c_-o-n-l-y/#onion_traffic_only","text":"const val ONION_TRAFFIC_ONLY: String (source)","title":"ONION_TRAFFIC_ONLY"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-p-r-e-f-e-r_-i-p-v6/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / PREFER_IPV6 PREFER_IPV6 \u00b6 const val PREFER_IPV6: String (source)","title":" p r e f e r  i p v6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-p-r-e-f-e-r_-i-p-v6/#prefer_ipv6","text":"const val PREFER_IPV6: String (source)","title":"PREFER_IPV6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-p-r-e-f-e-r_-i-p-v6_-a-u-t-o-m-a-p/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / PREFER_IPV6_AUTOMAP PREFER_IPV6_AUTOMAP \u00b6 const val PREFER_IPV6_AUTOMAP: String (source)","title":" p r e f e r  i p v6  a u t o m a p"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-p-r-e-f-e-r_-i-p-v6_-a-u-t-o-m-a-p/#prefer_ipv6_automap","text":"const val PREFER_IPV6_AUTOMAP: String (source)","title":"PREFER_IPV6_AUTOMAP"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-p-r-e-f-e-r_-s-o-c-k-s_-n-o_-a-u-t-h/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / PREFER_SOCKS_NO_AUTH PREFER_SOCKS_NO_AUTH \u00b6 const val PREFER_SOCKS_NO_AUTH: String (source)","title":" p r e f e r  s o c k s  n o  a u t h"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-p-r-e-f-e-r_-s-o-c-k-s_-n-o_-a-u-t-h/#prefer_socks_no_auth","text":"const val PREFER_SOCKS_NO_AUTH: String (source)","title":"PREFER_SOCKS_NO_AUTH"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-u-s-e_-d-n-s_-c-a-c-h-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / USE_DNS_CACHE USE_DNS_CACHE \u00b6 const val USE_DNS_CACHE: String (source)","title":" u s e  d n s  c a c h e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-u-s-e_-d-n-s_-c-a-c-h-e/#use_dns_cache","text":"const val USE_DNS_CACHE: String (source)","title":"USE_DNS_CACHE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-u-s-e_-i-p-v4_-c-a-c-h-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / USE_IPV4_CACHE USE_IPV4_CACHE \u00b6 const val USE_IPV4_CACHE: String (source)","title":" u s e  i p v4  c a c h e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-u-s-e_-i-p-v4_-c-a-c-h-e/#use_ipv4_cache","text":"const val USE_IPV4_CACHE: String (source)","title":"USE_IPV4_CACHE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-u-s-e_-i-p-v6_-c-a-c-h-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / USE_IPV6_CACHE USE_IPV6_CACHE \u00b6 const val USE_IPV6_CACHE: String (source)","title":" u s e  i p v6  c a c h e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/-u-s-e_-i-p-v6_-c-a-c-h-e/#use_ipv6_cache","text":"const val USE_IPV6_CACHE: String (source)","title":"USE_IPV6_CACHE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/get-all/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / IsolationFlag / getAll getAll \u00b6 fun getAll(): List < String > (source)","title":"Get all"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-isolation-flag/get-all/#getall","text":"fun getAll(): List < String > (source)","title":"getAll"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / PortOption PortOption \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class PortOption (source) Constructors \u00b6 Name Summary <init> PortOption() Companion Object Properties \u00b6 Name Summary AUTO const val AUTO: String DISABLED const val DISABLED: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/#portoption","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class PortOption (source)","title":"PortOption"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/#constructors","text":"Name Summary <init> PortOption()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/#companion-object-properties","text":"Name Summary AUTO const val AUTO: String DISABLED const val DISABLED: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/-a-u-t-o/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / PortOption / AUTO AUTO \u00b6 const val AUTO: String (source)","title":" a u t o"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/-a-u-t-o/#auto","text":"const val AUTO: String (source)","title":"AUTO"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/-d-i-s-a-b-l-e-d/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / PortOption / DISABLED DISABLED \u00b6 const val DISABLED: String (source)","title":" d i s a b l e d"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/-d-i-s-a-b-l-e-d/#disabled","text":"const val DISABLED: String (source)","title":"DISABLED"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / PortOption / <init> <init> \u00b6 PortOption()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-port-option/-init-/#init","text":"PortOption()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ProxyType ProxyType \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class ProxyType (source) Constructors \u00b6 Name Summary <init> ProxyType() Companion Object Properties \u00b6 Name Summary DISABLED const val DISABLED: String HTTPS const val HTTPS: String SOCKS_5 const val SOCKS_5: String Companion Object Functions \u00b6 Name Summary getAll fun getAll(): List < String >","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/#proxytype","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class ProxyType (source)","title":"ProxyType"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/#constructors","text":"Name Summary <init> ProxyType()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/#companion-object-properties","text":"Name Summary DISABLED const val DISABLED: String HTTPS const val HTTPS: String SOCKS_5 const val SOCKS_5: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/#companion-object-functions","text":"Name Summary getAll fun getAll(): List < String >","title":"Companion Object Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/-d-i-s-a-b-l-e-d/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ProxyType / DISABLED DISABLED \u00b6 const val DISABLED: String (source)","title":" d i s a b l e d"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/-d-i-s-a-b-l-e-d/#disabled","text":"const val DISABLED: String (source)","title":"DISABLED"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/-h-t-t-p-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ProxyType / HTTPS HTTPS \u00b6 const val HTTPS: String (source)","title":" h t t p s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/-h-t-t-p-s/#https","text":"const val HTTPS: String (source)","title":"HTTPS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ProxyType / <init> <init> \u00b6 ProxyType()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/-init-/#init","text":"ProxyType()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/-s-o-c-k-s_5/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ProxyType / SOCKS_5 SOCKS_5 \u00b6 const val SOCKS_5: String (source)","title":" s o c k s 5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/-s-o-c-k-s_5/#socks_5","text":"const val SOCKS_5: String (source)","title":"SOCKS_5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/get-all/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / ProxyType / getAll getAll \u00b6 fun getAll(): List < String > (source)","title":"Get all"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-proxy-type/get-all/#getall","text":"fun getAll(): List < String > (source)","title":"getAll"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridgeType SupportedBridgeType \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE]) annotation class SupportedBridgeType (source) Constructors \u00b6 Name Summary <init> SupportedBridgeType() Companion Object Properties \u00b6 Name Summary MEEK const val MEEK: String OBFS4 const val OBFS4: String SNOWFLAKE const val SNOWFLAKE: String Companion Object Functions \u00b6 Name Summary getAll fun getAll(): List < String >","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/#supportedbridgetype","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE]) annotation class SupportedBridgeType (source)","title":"SupportedBridgeType"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/#constructors","text":"Name Summary <init> SupportedBridgeType()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/#companion-object-properties","text":"Name Summary MEEK const val MEEK: String OBFS4 const val OBFS4: String SNOWFLAKE const val SNOWFLAKE: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/#companion-object-functions","text":"Name Summary getAll fun getAll(): List < String >","title":"Companion Object Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridgeType / <init> <init> \u00b6 SupportedBridgeType()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/-init-/#init","text":"SupportedBridgeType()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/-m-e-e-k/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridgeType / MEEK MEEK \u00b6 const val MEEK: String (source)","title":" m e e k"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/-m-e-e-k/#meek","text":"const val MEEK: String (source)","title":"MEEK"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/-o-b-f-s4/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridgeType / OBFS4 OBFS4 \u00b6 const val OBFS4: String (source)","title":" o b f s4"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/-o-b-f-s4/#obfs4","text":"const val OBFS4: String (source)","title":"OBFS4"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/-s-n-o-w-f-l-a-k-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridgeType / SNOWFLAKE SNOWFLAKE \u00b6 const val SNOWFLAKE: String (source)","title":" s n o w f l a k e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/-s-n-o-w-f-l-a-k-e/#snowflake","text":"const val SNOWFLAKE: String (source)","title":"SNOWFLAKE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/get-all/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / SupportedBridgeType / getAll getAll \u00b6 fun getAll(): List < String > (source)","title":"Get all"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-supported-bridge-type/get-all/#getall","text":"fun getAll(): List < String > (source)","title":"getAll"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorNetworkState TorNetworkState \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class TorNetworkState (source) Constructors \u00b6 Name Summary <init> TorNetworkState() Companion Object Properties \u00b6 Name Summary DISABLED const val DISABLED: String ENABLED const val ENABLED: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/#tornetworkstate","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class TorNetworkState (source)","title":"TorNetworkState"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/#constructors","text":"Name Summary <init> TorNetworkState()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/#companion-object-properties","text":"Name Summary DISABLED const val DISABLED: String ENABLED const val ENABLED: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-d-i-s-a-b-l-e-d/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorNetworkState / DISABLED DISABLED \u00b6 const val DISABLED: String (source)","title":" d i s a b l e d"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-d-i-s-a-b-l-e-d/#disabled","text":"const val DISABLED: String (source)","title":"DISABLED"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-e-n-a-b-l-e-d/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorNetworkState / ENABLED ENABLED \u00b6 const val ENABLED: String (source)","title":" e n a b l e d"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-e-n-a-b-l-e-d/#enabled","text":"const val ENABLED: String (source)","title":"ENABLED"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorNetworkState / <init> <init> \u00b6 TorNetworkState()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-network-state/-init-/#init","text":"TorNetworkState()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState TorState \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class TorState (source) Constructors \u00b6 Name Summary <init> TorState() Companion Object Properties \u00b6 Name Summary OFF const val OFF: String ON const val ON: String STARTING const val STARTING: String STOPPING const val STOPPING: String","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/#torstate","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.TYPE, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.PROPERTY]) annotation class TorState (source)","title":"TorState"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/#constructors","text":"Name Summary <init> TorState()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/#companion-object-properties","text":"Name Summary OFF const val OFF: String ON const val ON: String STARTING const val STARTING: String STOPPING const val STOPPING: String","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / <init> <init> \u00b6 TorState()","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-init-/#init","text":"TorState()","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-o-f-f/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / OFF OFF \u00b6 const val OFF: String (source)","title":" o f f"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-o-f-f/#off","text":"const val OFF: String (source)","title":"OFF"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / ON ON \u00b6 const val ON: String (source)","title":" o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-o-n/#on","text":"const val ON: String (source)","title":"ON"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-s-t-a-r-t-i-n-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / STARTING STARTING \u00b6 const val STARTING: String (source)","title":" s t a r t i n g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-s-t-a-r-t-i-n-g/#starting","text":"const val STARTING: String (source)","title":"STARTING"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-s-t-o-p-p-i-n-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / BaseConsts / TorState / STOPPING STOPPING \u00b6 const val STOPPING: String (source)","title":" s t o p p i n g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-base-consts/-tor-state/-s-t-o-p-p-i-n-g/#stopping","text":"const val STOPPING: String (source)","title":"STOPPING"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster EventBroadcaster \u00b6 abstract class EventBroadcaster : BaseConsts (source) Service for sending event logs to the system. Both topl-core and topl-service utilize this class to broadcast messages. This allows for easier separation of messages based on the type, process or class. See BaseConsts.BroadcastType s /** * [io.matthewnelson.topl_core.OnionProxyManager] utilizes this customized class for * broadcasting things while it is operating (such as Tor's State, operation errors, * debugging, etc). * * [ServiceEventListener] utilizes this class by sending it what Tor is spitting out * (selectively curated, ofc). * * @param [torService] [BaseService] for context. * */ internal class ServiceEventBroadcaster private constructor ( private val torService : BaseService ): EventBroadcaster () { companion object { @JvmSynthetic fun instantiate ( torService : BaseService ): ServiceEventBroadcaster = ServiceEventBroadcaster ( torService ) } private val scopeMain : CoroutineScope get () = torService . getScopeMain () ///////////////// /// Bandwidth /// ///////////////// @Volatile private var bytesRead = 0L @Volatile private var bytesWritten = 0L override fun broadcastBandwidth ( bytesRead : String , bytesWritten : String ) { val read = try { bytesRead . toLong () } catch ( e : NumberFormatException ) { this . bytesRead } val written = try { bytesWritten . toLong () } catch ( e : NumberFormatException ) { this . bytesWritten } // Only update the notification if proper State is had & we're bootstrapped. if ( torState == TorState . ON && torNetworkState == TorNetworkState . ENABLED && isBootstrappingComplete () ) { if ( read != this . bytesRead || written != this . bytesWritten ) { this . bytesRead = read this . bytesWritten = written updateBandwidth ( read , written ) if ( read == 0L && written == 0L ) torService . updateNotificationIcon ( NotificationImage . ENABLED ) else torService . updateNotificationIcon ( NotificationImage . DATA ) } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastBandwidth ( bytesRead , bytesWritten ) } } } /** * Do a check for if a message is being displayed in the contentText of the * notification, allowing it to remain there unabated until the coroutine * finishes. * */ private fun updateBandwidth ( download : Long , upload : Long ) { if ( noticeMsgToContentTextJob ?. isActive == true ) return torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( download , upload ) ) } ///////////// /// Debug /// ///////////// override fun broadcastDebug ( msg : String ) { TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastDebug ( msg ) } } } ////////////////// /// Exceptions /// ////////////////// override fun broadcastException ( msg : String? , e : Exception ) { if ( ! msg . isNullOrEmpty ()) { if ( msg . contains ( TorService :: class . java . simpleName )) { torService . updateNotificationIcon ( NotificationImage . ERROR ) val msgSplit = msg . split ( \"|\" ) msgSplit . elementAtOrNull ( 2 ) ?. let { torService . updateNotificationContentText ( it ) torService . updateNotificationProgress ( false , null ) } } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastException ( msg , e ) } } } /////////////////// /// LogMessages /// /////////////////// override fun broadcastLogMessage ( logMessage : String? ) { TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastLogMessage ( logMessage ) } } } /////////////// /// Notices /// /////////////// private var noticeMsgToContentTextJob : Job? = null @Volatile private var bootstrapProgress = \"\" private fun isBootstrappingComplete (): Boolean = bootstrapProgress == \"Bootstrapped 100%\" @Volatile private var controlPort : String? = null @Volatile private var dnsPort : String? = null @Volatile private var httpTunnelPort : String? = null @Volatile private var socksPort : String? = null @Volatile private var transPort : String? = null private fun setAllPortsNull () { controlPort = null dnsPort = null httpTunnelPort = null socksPort = null transPort = null } override fun broadcastNotice ( msg : String ) { when { // ServiceActionProcessor msg . contains ( ServiceActionProcessor :: class . java . simpleName ) -> { handleServiceActionProcessorMsg ( msg ) } // WARN|OnionProxyManager|No Network Connectivity. Foregoing enabling of Tor Network. msg . contains ( \"No Network Connectivity. Foregoing enabling of Tor Network.\" ) -> { torService . updateNotificationProgress ( false , null ) torService . updateNotificationContentText ( \"No Network Connectivity. Waiting...\" ) } // BOOTSTRAPPED msg . contains ( \"Bootstrapped\" ) -> { handleBootstrappedMsg ( msg ) } // Control Port // NOTICE|OnionProxyManager|Successfully connected to Control Port: 44201 msg . contains ( \"Successfully connected to Control Port:\" ) -> { controlPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Dns Port // NOTICE|OnionProxyManager|Opened DNS listener on 127.0.0.1:5400 msg . contains ( \"Opened DNS listener \" ) -> { dnsPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Http Tunnel Port // NOTICE|BaseEventListener|Opened HTTP tunnel listener on 127.0.0.1:8118 msg . contains ( \"Opened HTTP tunnel listener \" ) -> { httpTunnelPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Socks Port // NOTICE|BaseEventListener|Opened Socks listener on 127.0.0.1:9050 msg . contains ( \"Opened Socks listener \" ) -> { socksPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Trans Port // NOTICE|BaseEventListener|Opened Transparent pf/netfilter listener on 127.0.0.1:9040 msg . contains ( \"Opened Transparent pf/netfilter listener \" ) -> { transPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // NEWNYM msg . contains ( TorControlCommands . SIGNAL_NEWNYM ) -> { handleNewNymMsg ( msg ) } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastNotice ( msg ) } } } // NOTICE|BaseEventListener|Bootstrapped 5% (conn): Connecting to a relay private fun handleBootstrappedMsg ( msg : String ) { val msgSplit = msg . split ( \" \" ) msgSplit . elementAtOrNull ( 2 ) ?. let { val bootstrapped = \" ${ msgSplit [ 0 ] } ${ msgSplit [ 1 ] } \" . split ( \"|\" ) [ 2 ] if ( bootstrapped != bootstrapProgress ) { torService . updateNotificationContentText ( bootstrapped ) if ( bootstrapped == \"Bootstrapped 100%\" ) { updateAppEventBroadcasterWithPortInfo () torService . updateNotificationIcon ( NotificationImage . ENABLED ) torService . updateNotificationProgress ( true , 100 ) torService . updateNotificationProgress ( false , null ) torService . addNotificationActions () } else { val progress : Int? = try { bootstrapped . split ( \" \" ) [ 1 ] . split ( \"%\" ) [ 0 ] . toInt () } catch ( e : Exception ) { null } progress ?. let { torService . updateNotificationProgress ( true , progress ) } } bootstrapProgress = bootstrapped } } } private fun getPortFromMsg ( msg : String ): String = \"127.0.0.1: ${ msg . split ( \" : \" ) [ 1 ] . trim () } \" private fun handleNewNymMsg ( msg : String ) { val msgToShow : String? = when { msg . contains ( OnionProxyManager . NEWNYM_SUCCESS_MESSAGE ) -> { OnionProxyManager . NEWNYM_SUCCESS_MESSAGE } msg . contains ( OnionProxyManager . NEWNYM_NO_NETWORK ) -> { OnionProxyManager . NEWNYM_NO_NETWORK } else -> { val msgSplit = msg . split ( \"|\" ) msgSplit . elementAtOrNull ( 2 ) } } if ( noticeMsgToContentTextJob ?. isActive == true ) noticeMsgToContentTextJob ?. cancel () msgToShow ?. let { displayMessageToContentText ( it , 3500L ) } } private fun handleServiceActionProcessorMsg ( msg : String ) { val msgSplit = msg . split ( \"|\" ) val msgToShow : String? = msgSplit . elementAtOrNull ( 2 ) ?. let { when ( it ) { ServiceActionName . RESTART_TOR -> { \"Restarting Tor...\" } ServiceActionName . START -> { // Need to check here if Tor is already on, as startTor can be called // anytime which would overwrite the contentText already showing and // then stay there until something else updates it. if ( torState != TorState . ON ) \"Starting Tor...\" else null } ServiceActionName . STOP -> { \"Stopping Service...\" } else -> { null } } } msgToShow ?. let { torService . updateNotificationContentText ( it ) } } private var broadcastPortInfoJob : Job? = null private fun updateAppEventBroadcasterWithPortInfo () { if ( broadcastPortInfoJob ?. isActive == true ) broadcastPortInfoJob ?. cancel () TorServiceController . appEventBroadcaster ?. let { broadcastPortInfoJob = scopeMain . launch { delay ( 100L ) it . broadcastPortInformation ( TorPortInfo ( controlPort , dnsPort , httpTunnelPort , socksPort , transPort ) ) } } } /** * Display a message in the notification's ContentText space for the defined * [delayMilliSeconds], after which (if Tor is connected), publish to the Notification's * ContentText the most recently broadcast bandwidth via [bytesRead] && [bytesWritten]. * */ private fun displayMessageToContentText ( message : String , delayMilliSeconds : Long ) { noticeMsgToContentTextJob = scopeMain . launch { torService . updateNotificationContentText ( message ) delay ( delayMilliSeconds ) // Publish the last bandwidth broadcast to overwrite the message. if ( torNetworkState == TorNetworkState . ENABLED ) { torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( bytesRead , bytesWritten ) ) } else if ( isBootstrappingComplete ()){ torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( 0L , 0L ) ) } } } //////////////// /// TorState /// //////////////// @Volatile private var torState = TorState . OFF @Volatile private var torNetworkState = TorNetworkState . DISABLED override fun broadcastTorState ( @TorState state : String , @TorNetworkState networkState : String ) { if ( torState == TorState . ON && state != torState ) { bootstrapProgress = \"\" setAllPortsNull () updateAppEventBroadcasterWithPortInfo () torService . removeNotificationActions () } if ( state != TorState . ON ) torService . updateNotificationProgress ( true , null ) torService . updateNotificationContentTitle ( state ) torState = state if ( networkState == TorNetworkState . DISABLED ) { if ( isBootstrappingComplete ()) { setAllPortsNull () updateAppEventBroadcasterWithPortInfo () } // Update torNetworkState _before_ setting the icon to `disabled` so bandwidth won't // overwrite the icon with an update torNetworkState = networkState torService . updateNotificationIcon ( NotificationImage . DISABLED ) } else { if ( isBootstrappingComplete ()) torService . updateNotificationIcon ( NotificationImage . ENABLED ) // Update torNetworkState _after_ setting the icon to `enabled` so bandwidth changes // occur afterwards and this won't overwrite ImageState.DATA torNetworkState = networkState } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastTorState ( state , networkState ) } } } } Constructors \u00b6 Name Summary <init> Service for sending event logs to the system. EventBroadcaster() Functions \u00b6 Name Summary broadcastBandwidth bytesRead = bytes downloaded bytesWritten = bytes uploaded abstract fun broadcastBandwidth(bytesRead: String , bytesWritten: String ): Unit broadcastDebug (\u201cDEBUG broadcastException (\u201cEXCEPTION broadcastLogMessage Not yet implemented in either module. abstract fun broadcastLogMessage(logMessage: String ?): Unit broadcastNotice Will be one of: abstract fun broadcastNotice(msg: String ): Unit broadcastTorState See BaseConsts.TorState and BaseConsts.TorNetworkState abstract fun broadcastTorState(state: String , networkState: String ): Unit","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/#eventbroadcaster","text":"abstract class EventBroadcaster : BaseConsts (source) Service for sending event logs to the system. Both topl-core and topl-service utilize this class to broadcast messages. This allows for easier separation of messages based on the type, process or class. See BaseConsts.BroadcastType s /** * [io.matthewnelson.topl_core.OnionProxyManager] utilizes this customized class for * broadcasting things while it is operating (such as Tor's State, operation errors, * debugging, etc). * * [ServiceEventListener] utilizes this class by sending it what Tor is spitting out * (selectively curated, ofc). * * @param [torService] [BaseService] for context. * */ internal class ServiceEventBroadcaster private constructor ( private val torService : BaseService ): EventBroadcaster () { companion object { @JvmSynthetic fun instantiate ( torService : BaseService ): ServiceEventBroadcaster = ServiceEventBroadcaster ( torService ) } private val scopeMain : CoroutineScope get () = torService . getScopeMain () ///////////////// /// Bandwidth /// ///////////////// @Volatile private var bytesRead = 0L @Volatile private var bytesWritten = 0L override fun broadcastBandwidth ( bytesRead : String , bytesWritten : String ) { val read = try { bytesRead . toLong () } catch ( e : NumberFormatException ) { this . bytesRead } val written = try { bytesWritten . toLong () } catch ( e : NumberFormatException ) { this . bytesWritten } // Only update the notification if proper State is had & we're bootstrapped. if ( torState == TorState . ON && torNetworkState == TorNetworkState . ENABLED && isBootstrappingComplete () ) { if ( read != this . bytesRead || written != this . bytesWritten ) { this . bytesRead = read this . bytesWritten = written updateBandwidth ( read , written ) if ( read == 0L && written == 0L ) torService . updateNotificationIcon ( NotificationImage . ENABLED ) else torService . updateNotificationIcon ( NotificationImage . DATA ) } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastBandwidth ( bytesRead , bytesWritten ) } } } /** * Do a check for if a message is being displayed in the contentText of the * notification, allowing it to remain there unabated until the coroutine * finishes. * */ private fun updateBandwidth ( download : Long , upload : Long ) { if ( noticeMsgToContentTextJob ?. isActive == true ) return torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( download , upload ) ) } ///////////// /// Debug /// ///////////// override fun broadcastDebug ( msg : String ) { TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastDebug ( msg ) } } } ////////////////// /// Exceptions /// ////////////////// override fun broadcastException ( msg : String? , e : Exception ) { if ( ! msg . isNullOrEmpty ()) { if ( msg . contains ( TorService :: class . java . simpleName )) { torService . updateNotificationIcon ( NotificationImage . ERROR ) val msgSplit = msg . split ( \"|\" ) msgSplit . elementAtOrNull ( 2 ) ?. let { torService . updateNotificationContentText ( it ) torService . updateNotificationProgress ( false , null ) } } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastException ( msg , e ) } } } /////////////////// /// LogMessages /// /////////////////// override fun broadcastLogMessage ( logMessage : String? ) { TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastLogMessage ( logMessage ) } } } /////////////// /// Notices /// /////////////// private var noticeMsgToContentTextJob : Job? = null @Volatile private var bootstrapProgress = \"\" private fun isBootstrappingComplete (): Boolean = bootstrapProgress == \"Bootstrapped 100%\" @Volatile private var controlPort : String? = null @Volatile private var dnsPort : String? = null @Volatile private var httpTunnelPort : String? = null @Volatile private var socksPort : String? = null @Volatile private var transPort : String? = null private fun setAllPortsNull () { controlPort = null dnsPort = null httpTunnelPort = null socksPort = null transPort = null } override fun broadcastNotice ( msg : String ) { when { // ServiceActionProcessor msg . contains ( ServiceActionProcessor :: class . java . simpleName ) -> { handleServiceActionProcessorMsg ( msg ) } // WARN|OnionProxyManager|No Network Connectivity. Foregoing enabling of Tor Network. msg . contains ( \"No Network Connectivity. Foregoing enabling of Tor Network.\" ) -> { torService . updateNotificationProgress ( false , null ) torService . updateNotificationContentText ( \"No Network Connectivity. Waiting...\" ) } // BOOTSTRAPPED msg . contains ( \"Bootstrapped\" ) -> { handleBootstrappedMsg ( msg ) } // Control Port // NOTICE|OnionProxyManager|Successfully connected to Control Port: 44201 msg . contains ( \"Successfully connected to Control Port:\" ) -> { controlPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Dns Port // NOTICE|OnionProxyManager|Opened DNS listener on 127.0.0.1:5400 msg . contains ( \"Opened DNS listener \" ) -> { dnsPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Http Tunnel Port // NOTICE|BaseEventListener|Opened HTTP tunnel listener on 127.0.0.1:8118 msg . contains ( \"Opened HTTP tunnel listener \" ) -> { httpTunnelPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Socks Port // NOTICE|BaseEventListener|Opened Socks listener on 127.0.0.1:9050 msg . contains ( \"Opened Socks listener \" ) -> { socksPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Trans Port // NOTICE|BaseEventListener|Opened Transparent pf/netfilter listener on 127.0.0.1:9040 msg . contains ( \"Opened Transparent pf/netfilter listener \" ) -> { transPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // NEWNYM msg . contains ( TorControlCommands . SIGNAL_NEWNYM ) -> { handleNewNymMsg ( msg ) } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastNotice ( msg ) } } } // NOTICE|BaseEventListener|Bootstrapped 5% (conn): Connecting to a relay private fun handleBootstrappedMsg ( msg : String ) { val msgSplit = msg . split ( \" \" ) msgSplit . elementAtOrNull ( 2 ) ?. let { val bootstrapped = \" ${ msgSplit [ 0 ] } ${ msgSplit [ 1 ] } \" . split ( \"|\" ) [ 2 ] if ( bootstrapped != bootstrapProgress ) { torService . updateNotificationContentText ( bootstrapped ) if ( bootstrapped == \"Bootstrapped 100%\" ) { updateAppEventBroadcasterWithPortInfo () torService . updateNotificationIcon ( NotificationImage . ENABLED ) torService . updateNotificationProgress ( true , 100 ) torService . updateNotificationProgress ( false , null ) torService . addNotificationActions () } else { val progress : Int? = try { bootstrapped . split ( \" \" ) [ 1 ] . split ( \"%\" ) [ 0 ] . toInt () } catch ( e : Exception ) { null } progress ?. let { torService . updateNotificationProgress ( true , progress ) } } bootstrapProgress = bootstrapped } } } private fun getPortFromMsg ( msg : String ): String = \"127.0.0.1: ${ msg . split ( \" : \" ) [ 1 ] . trim () } \" private fun handleNewNymMsg ( msg : String ) { val msgToShow : String? = when { msg . contains ( OnionProxyManager . NEWNYM_SUCCESS_MESSAGE ) -> { OnionProxyManager . NEWNYM_SUCCESS_MESSAGE } msg . contains ( OnionProxyManager . NEWNYM_NO_NETWORK ) -> { OnionProxyManager . NEWNYM_NO_NETWORK } else -> { val msgSplit = msg . split ( \"|\" ) msgSplit . elementAtOrNull ( 2 ) } } if ( noticeMsgToContentTextJob ?. isActive == true ) noticeMsgToContentTextJob ?. cancel () msgToShow ?. let { displayMessageToContentText ( it , 3500L ) } } private fun handleServiceActionProcessorMsg ( msg : String ) { val msgSplit = msg . split ( \"|\" ) val msgToShow : String? = msgSplit . elementAtOrNull ( 2 ) ?. let { when ( it ) { ServiceActionName . RESTART_TOR -> { \"Restarting Tor...\" } ServiceActionName . START -> { // Need to check here if Tor is already on, as startTor can be called // anytime which would overwrite the contentText already showing and // then stay there until something else updates it. if ( torState != TorState . ON ) \"Starting Tor...\" else null } ServiceActionName . STOP -> { \"Stopping Service...\" } else -> { null } } } msgToShow ?. let { torService . updateNotificationContentText ( it ) } } private var broadcastPortInfoJob : Job? = null private fun updateAppEventBroadcasterWithPortInfo () { if ( broadcastPortInfoJob ?. isActive == true ) broadcastPortInfoJob ?. cancel () TorServiceController . appEventBroadcaster ?. let { broadcastPortInfoJob = scopeMain . launch { delay ( 100L ) it . broadcastPortInformation ( TorPortInfo ( controlPort , dnsPort , httpTunnelPort , socksPort , transPort ) ) } } } /** * Display a message in the notification's ContentText space for the defined * [delayMilliSeconds], after which (if Tor is connected), publish to the Notification's * ContentText the most recently broadcast bandwidth via [bytesRead] && [bytesWritten]. * */ private fun displayMessageToContentText ( message : String , delayMilliSeconds : Long ) { noticeMsgToContentTextJob = scopeMain . launch { torService . updateNotificationContentText ( message ) delay ( delayMilliSeconds ) // Publish the last bandwidth broadcast to overwrite the message. if ( torNetworkState == TorNetworkState . ENABLED ) { torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( bytesRead , bytesWritten ) ) } else if ( isBootstrappingComplete ()){ torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( 0L , 0L ) ) } } } //////////////// /// TorState /// //////////////// @Volatile private var torState = TorState . OFF @Volatile private var torNetworkState = TorNetworkState . DISABLED override fun broadcastTorState ( @TorState state : String , @TorNetworkState networkState : String ) { if ( torState == TorState . ON && state != torState ) { bootstrapProgress = \"\" setAllPortsNull () updateAppEventBroadcasterWithPortInfo () torService . removeNotificationActions () } if ( state != TorState . ON ) torService . updateNotificationProgress ( true , null ) torService . updateNotificationContentTitle ( state ) torState = state if ( networkState == TorNetworkState . DISABLED ) { if ( isBootstrappingComplete ()) { setAllPortsNull () updateAppEventBroadcasterWithPortInfo () } // Update torNetworkState _before_ setting the icon to `disabled` so bandwidth won't // overwrite the icon with an update torNetworkState = networkState torService . updateNotificationIcon ( NotificationImage . DISABLED ) } else { if ( isBootstrappingComplete ()) torService . updateNotificationIcon ( NotificationImage . ENABLED ) // Update torNetworkState _after_ setting the icon to `enabled` so bandwidth changes // occur afterwards and this won't overwrite ImageState.DATA torNetworkState = networkState } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastTorState ( state , networkState ) } } } }","title":"EventBroadcaster"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/#constructors","text":"Name Summary <init> Service for sending event logs to the system. EventBroadcaster()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/#functions","text":"Name Summary broadcastBandwidth bytesRead = bytes downloaded bytesWritten = bytes uploaded abstract fun broadcastBandwidth(bytesRead: String , bytesWritten: String ): Unit broadcastDebug (\u201cDEBUG broadcastException (\u201cEXCEPTION broadcastLogMessage Not yet implemented in either module. abstract fun broadcastLogMessage(logMessage: String ?): Unit broadcastNotice Will be one of: abstract fun broadcastNotice(msg: String ): Unit broadcastTorState See BaseConsts.TorState and BaseConsts.TorNetworkState abstract fun broadcastTorState(state: String , networkState: String ): Unit","title":"Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / <init> <init> \u00b6 EventBroadcaster() Service for sending event logs to the system. Both topl-core and topl-service utilize this class to broadcast messages. This allows for easier separation of messages based on the type, process or class. See BaseConsts.BroadcastType s /** * [io.matthewnelson.topl_core.OnionProxyManager] utilizes this customized class for * broadcasting things while it is operating (such as Tor's State, operation errors, * debugging, etc). * * [ServiceEventListener] utilizes this class by sending it what Tor is spitting out * (selectively curated, ofc). * * @param [torService] [BaseService] for context. * */ internal class ServiceEventBroadcaster private constructor ( private val torService : BaseService ): EventBroadcaster () { companion object { @JvmSynthetic fun instantiate ( torService : BaseService ): ServiceEventBroadcaster = ServiceEventBroadcaster ( torService ) } private val scopeMain : CoroutineScope get () = torService . getScopeMain () ///////////////// /// Bandwidth /// ///////////////// @Volatile private var bytesRead = 0L @Volatile private var bytesWritten = 0L override fun broadcastBandwidth ( bytesRead : String , bytesWritten : String ) { val read = try { bytesRead . toLong () } catch ( e : NumberFormatException ) { this . bytesRead } val written = try { bytesWritten . toLong () } catch ( e : NumberFormatException ) { this . bytesWritten } // Only update the notification if proper State is had & we're bootstrapped. if ( torState == TorState . ON && torNetworkState == TorNetworkState . ENABLED && isBootstrappingComplete () ) { if ( read != this . bytesRead || written != this . bytesWritten ) { this . bytesRead = read this . bytesWritten = written updateBandwidth ( read , written ) if ( read == 0L && written == 0L ) torService . updateNotificationIcon ( NotificationImage . ENABLED ) else torService . updateNotificationIcon ( NotificationImage . DATA ) } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastBandwidth ( bytesRead , bytesWritten ) } } } /** * Do a check for if a message is being displayed in the contentText of the * notification, allowing it to remain there unabated until the coroutine * finishes. * */ private fun updateBandwidth ( download : Long , upload : Long ) { if ( noticeMsgToContentTextJob ?. isActive == true ) return torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( download , upload ) ) } ///////////// /// Debug /// ///////////// override fun broadcastDebug ( msg : String ) { TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastDebug ( msg ) } } } ////////////////// /// Exceptions /// ////////////////// override fun broadcastException ( msg : String? , e : Exception ) { if ( ! msg . isNullOrEmpty ()) { if ( msg . contains ( TorService :: class . java . simpleName )) { torService . updateNotificationIcon ( NotificationImage . ERROR ) val msgSplit = msg . split ( \"|\" ) msgSplit . elementAtOrNull ( 2 ) ?. let { torService . updateNotificationContentText ( it ) torService . updateNotificationProgress ( false , null ) } } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastException ( msg , e ) } } } /////////////////// /// LogMessages /// /////////////////// override fun broadcastLogMessage ( logMessage : String? ) { TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastLogMessage ( logMessage ) } } } /////////////// /// Notices /// /////////////// private var noticeMsgToContentTextJob : Job? = null @Volatile private var bootstrapProgress = \"\" private fun isBootstrappingComplete (): Boolean = bootstrapProgress == \"Bootstrapped 100%\" @Volatile private var controlPort : String? = null @Volatile private var dnsPort : String? = null @Volatile private var httpTunnelPort : String? = null @Volatile private var socksPort : String? = null @Volatile private var transPort : String? = null private fun setAllPortsNull () { controlPort = null dnsPort = null httpTunnelPort = null socksPort = null transPort = null } override fun broadcastNotice ( msg : String ) { when { // ServiceActionProcessor msg . contains ( ServiceActionProcessor :: class . java . simpleName ) -> { handleServiceActionProcessorMsg ( msg ) } // WARN|OnionProxyManager|No Network Connectivity. Foregoing enabling of Tor Network. msg . contains ( \"No Network Connectivity. Foregoing enabling of Tor Network.\" ) -> { torService . updateNotificationProgress ( false , null ) torService . updateNotificationContentText ( \"No Network Connectivity. Waiting...\" ) } // BOOTSTRAPPED msg . contains ( \"Bootstrapped\" ) -> { handleBootstrappedMsg ( msg ) } // Control Port // NOTICE|OnionProxyManager|Successfully connected to Control Port: 44201 msg . contains ( \"Successfully connected to Control Port:\" ) -> { controlPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Dns Port // NOTICE|OnionProxyManager|Opened DNS listener on 127.0.0.1:5400 msg . contains ( \"Opened DNS listener \" ) -> { dnsPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Http Tunnel Port // NOTICE|BaseEventListener|Opened HTTP tunnel listener on 127.0.0.1:8118 msg . contains ( \"Opened HTTP tunnel listener \" ) -> { httpTunnelPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Socks Port // NOTICE|BaseEventListener|Opened Socks listener on 127.0.0.1:9050 msg . contains ( \"Opened Socks listener \" ) -> { socksPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Trans Port // NOTICE|BaseEventListener|Opened Transparent pf/netfilter listener on 127.0.0.1:9040 msg . contains ( \"Opened Transparent pf/netfilter listener \" ) -> { transPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // NEWNYM msg . contains ( TorControlCommands . SIGNAL_NEWNYM ) -> { handleNewNymMsg ( msg ) } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastNotice ( msg ) } } } // NOTICE|BaseEventListener|Bootstrapped 5% (conn): Connecting to a relay private fun handleBootstrappedMsg ( msg : String ) { val msgSplit = msg . split ( \" \" ) msgSplit . elementAtOrNull ( 2 ) ?. let { val bootstrapped = \" ${ msgSplit [ 0 ] } ${ msgSplit [ 1 ] } \" . split ( \"|\" ) [ 2 ] if ( bootstrapped != bootstrapProgress ) { torService . updateNotificationContentText ( bootstrapped ) if ( bootstrapped == \"Bootstrapped 100%\" ) { updateAppEventBroadcasterWithPortInfo () torService . updateNotificationIcon ( NotificationImage . ENABLED ) torService . updateNotificationProgress ( true , 100 ) torService . updateNotificationProgress ( false , null ) torService . addNotificationActions () } else { val progress : Int? = try { bootstrapped . split ( \" \" ) [ 1 ] . split ( \"%\" ) [ 0 ] . toInt () } catch ( e : Exception ) { null } progress ?. let { torService . updateNotificationProgress ( true , progress ) } } bootstrapProgress = bootstrapped } } } private fun getPortFromMsg ( msg : String ): String = \"127.0.0.1: ${ msg . split ( \" : \" ) [ 1 ] . trim () } \" private fun handleNewNymMsg ( msg : String ) { val msgToShow : String? = when { msg . contains ( OnionProxyManager . NEWNYM_SUCCESS_MESSAGE ) -> { OnionProxyManager . NEWNYM_SUCCESS_MESSAGE } msg . contains ( OnionProxyManager . NEWNYM_NO_NETWORK ) -> { OnionProxyManager . NEWNYM_NO_NETWORK } else -> { val msgSplit = msg . split ( \"|\" ) msgSplit . elementAtOrNull ( 2 ) } } if ( noticeMsgToContentTextJob ?. isActive == true ) noticeMsgToContentTextJob ?. cancel () msgToShow ?. let { displayMessageToContentText ( it , 3500L ) } } private fun handleServiceActionProcessorMsg ( msg : String ) { val msgSplit = msg . split ( \"|\" ) val msgToShow : String? = msgSplit . elementAtOrNull ( 2 ) ?. let { when ( it ) { ServiceActionName . RESTART_TOR -> { \"Restarting Tor...\" } ServiceActionName . START -> { // Need to check here if Tor is already on, as startTor can be called // anytime which would overwrite the contentText already showing and // then stay there until something else updates it. if ( torState != TorState . ON ) \"Starting Tor...\" else null } ServiceActionName . STOP -> { \"Stopping Service...\" } else -> { null } } } msgToShow ?. let { torService . updateNotificationContentText ( it ) } } private var broadcastPortInfoJob : Job? = null private fun updateAppEventBroadcasterWithPortInfo () { if ( broadcastPortInfoJob ?. isActive == true ) broadcastPortInfoJob ?. cancel () TorServiceController . appEventBroadcaster ?. let { broadcastPortInfoJob = scopeMain . launch { delay ( 100L ) it . broadcastPortInformation ( TorPortInfo ( controlPort , dnsPort , httpTunnelPort , socksPort , transPort ) ) } } } /** * Display a message in the notification's ContentText space for the defined * [delayMilliSeconds], after which (if Tor is connected), publish to the Notification's * ContentText the most recently broadcast bandwidth via [bytesRead] && [bytesWritten]. * */ private fun displayMessageToContentText ( message : String , delayMilliSeconds : Long ) { noticeMsgToContentTextJob = scopeMain . launch { torService . updateNotificationContentText ( message ) delay ( delayMilliSeconds ) // Publish the last bandwidth broadcast to overwrite the message. if ( torNetworkState == TorNetworkState . ENABLED ) { torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( bytesRead , bytesWritten ) ) } else if ( isBootstrappingComplete ()){ torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( 0L , 0L ) ) } } } //////////////// /// TorState /// //////////////// @Volatile private var torState = TorState . OFF @Volatile private var torNetworkState = TorNetworkState . DISABLED override fun broadcastTorState ( @TorState state : String , @TorNetworkState networkState : String ) { if ( torState == TorState . ON && state != torState ) { bootstrapProgress = \"\" setAllPortsNull () updateAppEventBroadcasterWithPortInfo () torService . removeNotificationActions () } if ( state != TorState . ON ) torService . updateNotificationProgress ( true , null ) torService . updateNotificationContentTitle ( state ) torState = state if ( networkState == TorNetworkState . DISABLED ) { if ( isBootstrappingComplete ()) { setAllPortsNull () updateAppEventBroadcasterWithPortInfo () } // Update torNetworkState _before_ setting the icon to `disabled` so bandwidth won't // overwrite the icon with an update torNetworkState = networkState torService . updateNotificationIcon ( NotificationImage . DISABLED ) } else { if ( isBootstrappingComplete ()) torService . updateNotificationIcon ( NotificationImage . ENABLED ) // Update torNetworkState _after_ setting the icon to `enabled` so bandwidth changes // occur afterwards and this won't overwrite ImageState.DATA torNetworkState = networkState } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastTorState ( state , networkState ) } } } }","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/-init-/#init","text":"EventBroadcaster() Service for sending event logs to the system. Both topl-core and topl-service utilize this class to broadcast messages. This allows for easier separation of messages based on the type, process or class. See BaseConsts.BroadcastType s /** * [io.matthewnelson.topl_core.OnionProxyManager] utilizes this customized class for * broadcasting things while it is operating (such as Tor's State, operation errors, * debugging, etc). * * [ServiceEventListener] utilizes this class by sending it what Tor is spitting out * (selectively curated, ofc). * * @param [torService] [BaseService] for context. * */ internal class ServiceEventBroadcaster private constructor ( private val torService : BaseService ): EventBroadcaster () { companion object { @JvmSynthetic fun instantiate ( torService : BaseService ): ServiceEventBroadcaster = ServiceEventBroadcaster ( torService ) } private val scopeMain : CoroutineScope get () = torService . getScopeMain () ///////////////// /// Bandwidth /// ///////////////// @Volatile private var bytesRead = 0L @Volatile private var bytesWritten = 0L override fun broadcastBandwidth ( bytesRead : String , bytesWritten : String ) { val read = try { bytesRead . toLong () } catch ( e : NumberFormatException ) { this . bytesRead } val written = try { bytesWritten . toLong () } catch ( e : NumberFormatException ) { this . bytesWritten } // Only update the notification if proper State is had & we're bootstrapped. if ( torState == TorState . ON && torNetworkState == TorNetworkState . ENABLED && isBootstrappingComplete () ) { if ( read != this . bytesRead || written != this . bytesWritten ) { this . bytesRead = read this . bytesWritten = written updateBandwidth ( read , written ) if ( read == 0L && written == 0L ) torService . updateNotificationIcon ( NotificationImage . ENABLED ) else torService . updateNotificationIcon ( NotificationImage . DATA ) } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastBandwidth ( bytesRead , bytesWritten ) } } } /** * Do a check for if a message is being displayed in the contentText of the * notification, allowing it to remain there unabated until the coroutine * finishes. * */ private fun updateBandwidth ( download : Long , upload : Long ) { if ( noticeMsgToContentTextJob ?. isActive == true ) return torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( download , upload ) ) } ///////////// /// Debug /// ///////////// override fun broadcastDebug ( msg : String ) { TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastDebug ( msg ) } } } ////////////////// /// Exceptions /// ////////////////// override fun broadcastException ( msg : String? , e : Exception ) { if ( ! msg . isNullOrEmpty ()) { if ( msg . contains ( TorService :: class . java . simpleName )) { torService . updateNotificationIcon ( NotificationImage . ERROR ) val msgSplit = msg . split ( \"|\" ) msgSplit . elementAtOrNull ( 2 ) ?. let { torService . updateNotificationContentText ( it ) torService . updateNotificationProgress ( false , null ) } } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastException ( msg , e ) } } } /////////////////// /// LogMessages /// /////////////////// override fun broadcastLogMessage ( logMessage : String? ) { TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastLogMessage ( logMessage ) } } } /////////////// /// Notices /// /////////////// private var noticeMsgToContentTextJob : Job? = null @Volatile private var bootstrapProgress = \"\" private fun isBootstrappingComplete (): Boolean = bootstrapProgress == \"Bootstrapped 100%\" @Volatile private var controlPort : String? = null @Volatile private var dnsPort : String? = null @Volatile private var httpTunnelPort : String? = null @Volatile private var socksPort : String? = null @Volatile private var transPort : String? = null private fun setAllPortsNull () { controlPort = null dnsPort = null httpTunnelPort = null socksPort = null transPort = null } override fun broadcastNotice ( msg : String ) { when { // ServiceActionProcessor msg . contains ( ServiceActionProcessor :: class . java . simpleName ) -> { handleServiceActionProcessorMsg ( msg ) } // WARN|OnionProxyManager|No Network Connectivity. Foregoing enabling of Tor Network. msg . contains ( \"No Network Connectivity. Foregoing enabling of Tor Network.\" ) -> { torService . updateNotificationProgress ( false , null ) torService . updateNotificationContentText ( \"No Network Connectivity. Waiting...\" ) } // BOOTSTRAPPED msg . contains ( \"Bootstrapped\" ) -> { handleBootstrappedMsg ( msg ) } // Control Port // NOTICE|OnionProxyManager|Successfully connected to Control Port: 44201 msg . contains ( \"Successfully connected to Control Port:\" ) -> { controlPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Dns Port // NOTICE|OnionProxyManager|Opened DNS listener on 127.0.0.1:5400 msg . contains ( \"Opened DNS listener \" ) -> { dnsPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Http Tunnel Port // NOTICE|BaseEventListener|Opened HTTP tunnel listener on 127.0.0.1:8118 msg . contains ( \"Opened HTTP tunnel listener \" ) -> { httpTunnelPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Socks Port // NOTICE|BaseEventListener|Opened Socks listener on 127.0.0.1:9050 msg . contains ( \"Opened Socks listener \" ) -> { socksPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // Trans Port // NOTICE|BaseEventListener|Opened Transparent pf/netfilter listener on 127.0.0.1:9040 msg . contains ( \"Opened Transparent pf/netfilter listener \" ) -> { transPort = getPortFromMsg ( msg ) if ( isBootstrappingComplete ()) updateAppEventBroadcasterWithPortInfo () } // NEWNYM msg . contains ( TorControlCommands . SIGNAL_NEWNYM ) -> { handleNewNymMsg ( msg ) } } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastNotice ( msg ) } } } // NOTICE|BaseEventListener|Bootstrapped 5% (conn): Connecting to a relay private fun handleBootstrappedMsg ( msg : String ) { val msgSplit = msg . split ( \" \" ) msgSplit . elementAtOrNull ( 2 ) ?. let { val bootstrapped = \" ${ msgSplit [ 0 ] } ${ msgSplit [ 1 ] } \" . split ( \"|\" ) [ 2 ] if ( bootstrapped != bootstrapProgress ) { torService . updateNotificationContentText ( bootstrapped ) if ( bootstrapped == \"Bootstrapped 100%\" ) { updateAppEventBroadcasterWithPortInfo () torService . updateNotificationIcon ( NotificationImage . ENABLED ) torService . updateNotificationProgress ( true , 100 ) torService . updateNotificationProgress ( false , null ) torService . addNotificationActions () } else { val progress : Int? = try { bootstrapped . split ( \" \" ) [ 1 ] . split ( \"%\" ) [ 0 ] . toInt () } catch ( e : Exception ) { null } progress ?. let { torService . updateNotificationProgress ( true , progress ) } } bootstrapProgress = bootstrapped } } } private fun getPortFromMsg ( msg : String ): String = \"127.0.0.1: ${ msg . split ( \" : \" ) [ 1 ] . trim () } \" private fun handleNewNymMsg ( msg : String ) { val msgToShow : String? = when { msg . contains ( OnionProxyManager . NEWNYM_SUCCESS_MESSAGE ) -> { OnionProxyManager . NEWNYM_SUCCESS_MESSAGE } msg . contains ( OnionProxyManager . NEWNYM_NO_NETWORK ) -> { OnionProxyManager . NEWNYM_NO_NETWORK } else -> { val msgSplit = msg . split ( \"|\" ) msgSplit . elementAtOrNull ( 2 ) } } if ( noticeMsgToContentTextJob ?. isActive == true ) noticeMsgToContentTextJob ?. cancel () msgToShow ?. let { displayMessageToContentText ( it , 3500L ) } } private fun handleServiceActionProcessorMsg ( msg : String ) { val msgSplit = msg . split ( \"|\" ) val msgToShow : String? = msgSplit . elementAtOrNull ( 2 ) ?. let { when ( it ) { ServiceActionName . RESTART_TOR -> { \"Restarting Tor...\" } ServiceActionName . START -> { // Need to check here if Tor is already on, as startTor can be called // anytime which would overwrite the contentText already showing and // then stay there until something else updates it. if ( torState != TorState . ON ) \"Starting Tor...\" else null } ServiceActionName . STOP -> { \"Stopping Service...\" } else -> { null } } } msgToShow ?. let { torService . updateNotificationContentText ( it ) } } private var broadcastPortInfoJob : Job? = null private fun updateAppEventBroadcasterWithPortInfo () { if ( broadcastPortInfoJob ?. isActive == true ) broadcastPortInfoJob ?. cancel () TorServiceController . appEventBroadcaster ?. let { broadcastPortInfoJob = scopeMain . launch { delay ( 100L ) it . broadcastPortInformation ( TorPortInfo ( controlPort , dnsPort , httpTunnelPort , socksPort , transPort ) ) } } } /** * Display a message in the notification's ContentText space for the defined * [delayMilliSeconds], after which (if Tor is connected), publish to the Notification's * ContentText the most recently broadcast bandwidth via [bytesRead] && [bytesWritten]. * */ private fun displayMessageToContentText ( message : String , delayMilliSeconds : Long ) { noticeMsgToContentTextJob = scopeMain . launch { torService . updateNotificationContentText ( message ) delay ( delayMilliSeconds ) // Publish the last bandwidth broadcast to overwrite the message. if ( torNetworkState == TorNetworkState . ENABLED ) { torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( bytesRead , bytesWritten ) ) } else if ( isBootstrappingComplete ()){ torService . updateNotificationContentText ( ServiceUtilities . getFormattedBandwidthString ( 0L , 0L ) ) } } } //////////////// /// TorState /// //////////////// @Volatile private var torState = TorState . OFF @Volatile private var torNetworkState = TorNetworkState . DISABLED override fun broadcastTorState ( @TorState state : String , @TorNetworkState networkState : String ) { if ( torState == TorState . ON && state != torState ) { bootstrapProgress = \"\" setAllPortsNull () updateAppEventBroadcasterWithPortInfo () torService . removeNotificationActions () } if ( state != TorState . ON ) torService . updateNotificationProgress ( true , null ) torService . updateNotificationContentTitle ( state ) torState = state if ( networkState == TorNetworkState . DISABLED ) { if ( isBootstrappingComplete ()) { setAllPortsNull () updateAppEventBroadcasterWithPortInfo () } // Update torNetworkState _before_ setting the icon to `disabled` so bandwidth won't // overwrite the icon with an update torNetworkState = networkState torService . updateNotificationIcon ( NotificationImage . DISABLED ) } else { if ( isBootstrappingComplete ()) torService . updateNotificationIcon ( NotificationImage . ENABLED ) // Update torNetworkState _after_ setting the icon to `enabled` so bandwidth changes // occur afterwards and this won't overwrite ImageState.DATA torNetworkState = networkState } TorServiceController . appEventBroadcaster ?. let { scopeMain . launch { it . broadcastTorState ( state , networkState ) } } } }","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-bandwidth/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastBandwidth broadcastBandwidth \u00b6 abstract fun broadcastBandwidth(bytesRead: String , bytesWritten: String ): Unit (source) bytesRead = bytes downloaded bytesWritten = bytes uploaded","title":"Broadcast bandwidth"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-bandwidth/#broadcastbandwidth","text":"abstract fun broadcastBandwidth(bytesRead: String , bytesWritten: String ): Unit (source) bytesRead = bytes downloaded bytesWritten = bytes uploaded","title":"broadcastBandwidth"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-debug/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastDebug broadcastDebug \u00b6 abstract fun broadcastDebug(msg: String ): Unit (source) (\u201cDEBUG|ClassName|msg\u201d)","title":"Broadcast debug"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-debug/#broadcastdebug","text":"abstract fun broadcastDebug(msg: String ): Unit (source) (\u201cDEBUG|ClassName|msg\u201d)","title":"broadcastDebug"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-exception/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastException broadcastException \u00b6 abstract fun broadcastException(msg: String ?, e: Exception ): Unit (source) (\u201cEXCEPTION|ClassName|msg\u201d, e)","title":"Broadcast exception"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-exception/#broadcastexception","text":"abstract fun broadcastException(msg: String ?, e: Exception ): Unit (source) (\u201cEXCEPTION|ClassName|msg\u201d, e)","title":"broadcastException"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-log-message/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastLogMessage broadcastLogMessage \u00b6 abstract fun broadcastLogMessage(logMessage: String ?): Unit (source) Not yet implemented in either module.","title":"Broadcast log message"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-log-message/#broadcastlogmessage","text":"abstract fun broadcastLogMessage(logMessage: String ?): Unit (source) Not yet implemented in either module.","title":"broadcastLogMessage"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-notice/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastNotice broadcastNotice \u00b6 abstract fun broadcastNotice(msg: String ): Unit (source) Will be one of: (\u201cERROR|ClassName|msg\u201d) (\u201cNOTICE|ClassName|msg\u201d) (\u201cWARN|ClassName|msg\u201d)","title":"Broadcast notice"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-notice/#broadcastnotice","text":"abstract fun broadcastNotice(msg: String ): Unit (source) Will be one of: (\u201cERROR|ClassName|msg\u201d) (\u201cNOTICE|ClassName|msg\u201d) (\u201cWARN|ClassName|msg\u201d)","title":"broadcastNotice"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-tor-state/","text":"topl-core-base / io.matthewnelson.topl_core_base / EventBroadcaster / broadcastTorState broadcastTorState \u00b6 abstract fun broadcastTorState(state: String , networkState: String ): Unit (source) See BaseConsts.TorState and BaseConsts.TorNetworkState","title":"Broadcast tor state"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-event-broadcaster/broadcast-tor-state/#broadcasttorstate","text":"abstract fun broadcastTorState(state: String , networkState: String ): Unit (source) See BaseConsts.TorState and BaseConsts.TorNetworkState","title":"broadcastTorState"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles TorConfigFiles \u00b6 class TorConfigFiles : BaseConsts (source) Holds Tor configuration information for files and directories that Tor will use. See Companion.createConfig or Builder to instantiate. When modifying/querying Files, ensure you are using synchronized and acquiring the appropriate FileLock object pertaining to that File. This inhibits errors across the library. See extension function readTorConfigFile . Types \u00b6 Name Summary Builder Builder for TorConfig. class Builder Properties \u00b6 Name Summary configDir val configDir: File controlPortFile val controlPortFile: File controlPortFileLock val controlPortFileLock: Object cookieAuthFile Used for cookie authentication with the controller. Location can be overridden by the CookieAuthFile config option. Regenerated on startup. See control-spec.txt in torspec for details. val cookieAuthFile: File cookieAuthFileLock val cookieAuthFileLock: Object dataDir val dataDir: File dataDirLock val dataDirLock: Object fileCreationTimeout When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. val fileCreationTimeout: Int geoIpFile val geoIpFile: File geoIpFileLock val geoIpFileLock: Object geoIpv6File val geoIpv6File: File geoIpv6FileLock val geoIpv6FileLock: Object hiddenServiceDir val hiddenServiceDir: File hostnameFile The <base32-encoded-fingerprint>.onion domain name for this hidden service. If the hidden service is restricted to authorized clients only, this file also contains authorization data for all clients. val hostnameFile: File hostnameFileLock val hostnameFileLock: Object installDir val installDir: File libraryPath val libraryPath: File ? resolvConfFileLock val resolvConfFileLock: Object resolveConf val resolveConf: File torExecutableFile val torExecutableFile: File torrcFile var torrcFile: File torrcFileLock val torrcFileLock: Object v3AuthPrivateDir val v3AuthPrivateDir: File v3AuthPrivateDirLock val v3AuthPrivateDirLock: Object Functions \u00b6 Name Summary resolveTorrcFile Resolves the tor configuration file. If the torrc file hasn\u2019t been set, then this method will attempt to resolve the config file by looking in the root of the $configDir and then in $user.home directory fun resolveTorrcFile(): File toString fun toString(): String Companion Object Functions \u00b6 Name Summary createConfig Convenience method for if you\u2019re including in your App\u2019s jniLibs directory the libTor.so binary, or utilizing those maintained by this project. fun createConfig(context: Context , configDir: File , dataDir: File ? = null): TorConfigFiles Convenience method for setting up all of your files and directories in their default locations. fun createConfig(context: Context ): TorConfigFiles","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#torconfigfiles","text":"class TorConfigFiles : BaseConsts (source) Holds Tor configuration information for files and directories that Tor will use. See Companion.createConfig or Builder to instantiate. When modifying/querying Files, ensure you are using synchronized and acquiring the appropriate FileLock object pertaining to that File. This inhibits errors across the library. See extension function readTorConfigFile .","title":"TorConfigFiles"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#types","text":"Name Summary Builder Builder for TorConfig. class Builder","title":"Types"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#properties","text":"Name Summary configDir val configDir: File controlPortFile val controlPortFile: File controlPortFileLock val controlPortFileLock: Object cookieAuthFile Used for cookie authentication with the controller. Location can be overridden by the CookieAuthFile config option. Regenerated on startup. See control-spec.txt in torspec for details. val cookieAuthFile: File cookieAuthFileLock val cookieAuthFileLock: Object dataDir val dataDir: File dataDirLock val dataDirLock: Object fileCreationTimeout When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. val fileCreationTimeout: Int geoIpFile val geoIpFile: File geoIpFileLock val geoIpFileLock: Object geoIpv6File val geoIpv6File: File geoIpv6FileLock val geoIpv6FileLock: Object hiddenServiceDir val hiddenServiceDir: File hostnameFile The <base32-encoded-fingerprint>.onion domain name for this hidden service. If the hidden service is restricted to authorized clients only, this file also contains authorization data for all clients. val hostnameFile: File hostnameFileLock val hostnameFileLock: Object installDir val installDir: File libraryPath val libraryPath: File ? resolvConfFileLock val resolvConfFileLock: Object resolveConf val resolveConf: File torExecutableFile val torExecutableFile: File torrcFile var torrcFile: File torrcFileLock val torrcFileLock: Object v3AuthPrivateDir val v3AuthPrivateDir: File v3AuthPrivateDirLock val v3AuthPrivateDirLock: Object","title":"Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#functions","text":"Name Summary resolveTorrcFile Resolves the tor configuration file. If the torrc file hasn\u2019t been set, then this method will attempt to resolve the config file by looking in the root of the $configDir and then in $user.home directory fun resolveTorrcFile(): File toString fun toString(): String","title":"Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/#companion-object-functions","text":"Name Summary createConfig Convenience method for if you\u2019re including in your App\u2019s jniLibs directory the libTor.so binary, or utilizing those maintained by this project. fun createConfig(context: Context , configDir: File , dataDir: File ? = null): TorConfigFiles Convenience method for setting up all of your files and directories in their default locations. fun createConfig(context: Context ): TorConfigFiles","title":"Companion Object Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/config-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / configDir configDir \u00b6 val configDir: File (source)","title":"Config dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/config-dir/#configdir","text":"val configDir: File (source)","title":"configDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/control-port-file-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / controlPortFileLock controlPortFileLock \u00b6 val controlPortFileLock: Object (source)","title":"Control port file lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/control-port-file-lock/#controlportfilelock","text":"val controlPortFileLock: Object (source)","title":"controlPortFileLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/control-port-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / controlPortFile controlPortFile \u00b6 val controlPortFile: File (source)","title":"Control port file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/control-port-file/#controlportfile","text":"val controlPortFile: File (source)","title":"controlPortFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/cookie-auth-file-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / cookieAuthFileLock cookieAuthFileLock \u00b6 val cookieAuthFileLock: Object (source)","title":"Cookie auth file lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/cookie-auth-file-lock/#cookieauthfilelock","text":"val cookieAuthFileLock: Object (source)","title":"cookieAuthFileLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/cookie-auth-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / cookieAuthFile cookieAuthFile \u00b6 val cookieAuthFile: File (source) Used for cookie authentication with the controller. Location can be overridden by the CookieAuthFile config option. Regenerated on startup. See control-spec.txt in torspec for details. Only used when cookie authentication is enabled. Return cookieAuthFile","title":"Cookie auth file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/cookie-auth-file/#cookieauthfile","text":"val cookieAuthFile: File (source) Used for cookie authentication with the controller. Location can be overridden by the CookieAuthFile config option. Regenerated on startup. See control-spec.txt in torspec for details. Only used when cookie authentication is enabled. Return cookieAuthFile","title":"cookieAuthFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/create-config/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / createConfig createConfig \u00b6 @JvmOverloads @JvmStatic fun createConfig(context: Context , configDir: File , dataDir: File ? = null): TorConfigFiles (source) Convenience method for if you\u2019re including in your App\u2019s jniLibs directory the libTor.so binary, or utilizing those maintained by this project. Parameters \u00b6 context - Context configDir - context.getDir(\u201cdir_name_here\u201d, Context.MODE_PRIVATE) dataDir - if you wish it in a different location than lib/tor @JvmStatic fun createConfig(context: Context ): TorConfigFiles (source) Convenience method for setting up all of your files and directories in their default locations. Parameters \u00b6 context - Context","title":"Create config"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/create-config/#createconfig","text":"@JvmOverloads @JvmStatic fun createConfig(context: Context , configDir: File , dataDir: File ? = null): TorConfigFiles (source) Convenience method for if you\u2019re including in your App\u2019s jniLibs directory the libTor.so binary, or utilizing those maintained by this project.","title":"createConfig"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/create-config/#parameters","text":"context - Context configDir - context.getDir(\u201cdir_name_here\u201d, Context.MODE_PRIVATE) dataDir - if you wish it in a different location than lib/tor @JvmStatic fun createConfig(context: Context ): TorConfigFiles (source) Convenience method for setting up all of your files and directories in their default locations.","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/create-config/#parameters_1","text":"context - Context","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/data-dir-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / dataDirLock dataDirLock \u00b6 val dataDirLock: Object (source)","title":"Data dir lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/data-dir-lock/#datadirlock","text":"val dataDirLock: Object (source)","title":"dataDirLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/data-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / dataDir dataDir \u00b6 val dataDir: File (source)","title":"Data dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/data-dir/#datadir","text":"val dataDir: File (source)","title":"dataDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/file-creation-timeout/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / fileCreationTimeout fileCreationTimeout \u00b6 val fileCreationTimeout: Int (source) When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. This method returns how much time to wait in seconds until failing the startup.","title":"File creation timeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/file-creation-timeout/#filecreationtimeout","text":"val fileCreationTimeout: Int (source) When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. This method returns how much time to wait in seconds until failing the startup.","title":"fileCreationTimeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ip-file-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / geoIpFileLock geoIpFileLock \u00b6 val geoIpFileLock: Object (source)","title":"Geo ip file lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ip-file-lock/#geoipfilelock","text":"val geoIpFileLock: Object (source)","title":"geoIpFileLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ip-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / geoIpFile geoIpFile \u00b6 val geoIpFile: File (source)","title":"Geo ip file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ip-file/#geoipfile","text":"val geoIpFile: File (source)","title":"geoIpFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ipv6-file-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / geoIpv6FileLock geoIpv6FileLock \u00b6 val geoIpv6FileLock: Object (source)","title":"Geo ipv6 file lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ipv6-file-lock/#geoipv6filelock","text":"val geoIpv6FileLock: Object (source)","title":"geoIpv6FileLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ipv6-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / geoIpv6File geoIpv6File \u00b6 val geoIpv6File: File (source)","title":"Geo ipv6 file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/geo-ipv6-file/#geoipv6file","text":"val geoIpv6File: File (source)","title":"geoIpv6File"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hidden-service-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / hiddenServiceDir hiddenServiceDir \u00b6 val hiddenServiceDir: File (source)","title":"Hidden service dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hidden-service-dir/#hiddenservicedir","text":"val hiddenServiceDir: File (source)","title":"hiddenServiceDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hostname-file-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / hostnameFileLock hostnameFileLock \u00b6 val hostnameFileLock: Object (source)","title":"Hostname file lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hostname-file-lock/#hostnamefilelock","text":"val hostnameFileLock: Object (source)","title":"hostnameFileLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hostname-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / hostnameFile hostnameFile \u00b6 val hostnameFile: File (source) The <base32-encoded-fingerprint>.onion domain name for this hidden service. If the hidden service is restricted to authorized clients only, this file also contains authorization data for all clients. Return hostnameFile </base32-encoded-fingerprint>","title":"Hostname file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/hostname-file/#hostnamefile","text":"val hostnameFile: File (source) The <base32-encoded-fingerprint>.onion domain name for this hidden service. If the hidden service is restricted to authorized clients only, this file also contains authorization data for all clients. Return hostnameFile </base32-encoded-fingerprint>","title":"hostnameFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/install-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / installDir installDir \u00b6 val installDir: File (source)","title":"Install dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/install-dir/#installdir","text":"val installDir: File (source)","title":"installDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/library-path/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / libraryPath libraryPath \u00b6 val libraryPath: File ? (source)","title":"Library path"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/library-path/#librarypath","text":"val libraryPath: File ? (source)","title":"libraryPath"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolv-conf-file-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / resolvConfFileLock resolvConfFileLock \u00b6 val resolvConfFileLock: Object (source)","title":"Resolv conf file lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolv-conf-file-lock/#resolvconffilelock","text":"val resolvConfFileLock: Object (source)","title":"resolvConfFileLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-conf/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / resolveConf resolveConf \u00b6 val resolveConf: File (source)","title":"Resolve conf"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-conf/#resolveconf","text":"val resolveConf: File (source)","title":"resolveConf"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-torrc-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / resolveTorrcFile resolveTorrcFile \u00b6 fun resolveTorrcFile(): File (source) Resolves the tor configuration file. If the torrc file hasn\u2019t been set, then this method will attempt to resolve the config file by looking in the root of the $configDir and then in $user.home directory Exceptions \u00b6 IOException - If torrc file is not resolved. SecurityException - Unauthorized access to file/directory. Return torrcFile","title":"Resolve torrc file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-torrc-file/#resolvetorrcfile","text":"fun resolveTorrcFile(): File (source) Resolves the tor configuration file. If the torrc file hasn\u2019t been set, then this method will attempt to resolve the config file by looking in the root of the $configDir and then in $user.home directory","title":"resolveTorrcFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/resolve-torrc-file/#exceptions","text":"IOException - If torrc file is not resolved. SecurityException - Unauthorized access to file/directory. Return torrcFile","title":"Exceptions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/to-string/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / toString toString \u00b6 fun toString(): String (source)","title":"To string"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/to-string/#tostring","text":"fun toString(): String (source)","title":"toString"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/tor-executable-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / torExecutableFile torExecutableFile \u00b6 val torExecutableFile: File (source)","title":"Tor executable file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/tor-executable-file/#torexecutablefile","text":"val torExecutableFile: File (source)","title":"torExecutableFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/torrc-file-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / torrcFileLock torrcFileLock \u00b6 val torrcFileLock: Object (source)","title":"Torrc file lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/torrc-file-lock/#torrcfilelock","text":"val torrcFileLock: Object (source)","title":"torrcFileLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/torrc-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / torrcFile torrcFile \u00b6 var torrcFile: File (source)","title":"Torrc file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/torrc-file/#torrcfile","text":"var torrcFile: File (source)","title":"torrcFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/v3-auth-private-dir-lock/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / v3AuthPrivateDirLock v3AuthPrivateDirLock \u00b6 val v3AuthPrivateDirLock: Object (source)","title":"V3 auth private dir lock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/v3-auth-private-dir-lock/#v3authprivatedirlock","text":"val v3AuthPrivateDirLock: Object (source)","title":"v3AuthPrivateDirLock"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/v3-auth-private-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / v3AuthPrivateDir v3AuthPrivateDir \u00b6 val v3AuthPrivateDir: File (source)","title":"V3 auth private dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/v3-auth-private-dir/#v3authprivatedir","text":"val v3AuthPrivateDir: File (source)","title":"v3AuthPrivateDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder Builder \u00b6 class Builder (source) Builder for TorConfig. See also Companion.createConfig for convenience methods. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your module's src/main/jniLibs directory. If you are getting your // executable files via a dependency be sure to consult that Library's documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // } Parameters \u00b6 installDir - directory where the tor binaries are installed. configDir - directory where the filesystem will be setup for tor. Constructors \u00b6 Name Summary <init> Builder for TorConfig. Builder(installDir: File , configDir: File ) Functions \u00b6 Name Summary build Builds torConfig and sets default values if not explicitly configured through builder. fun build(): TorConfigFiles cookieAuthFile fun cookieAuthFile(file: File ): Builder dataDir Store working data in DIR. Can not be changed while tor is running. fun dataDir(directory: File ): Builder fileCreationTimeout When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. fun fileCreationTimeout(timeoutSeconds: Int ): Builder geoip A filename containing IPv4 GeoIP data, for use with by-country statistics. fun geoip(file: File ): Builder geoipv6 A filename containing IPv6 GeoIP data, for use with by-country statistics. fun geoipv6(file: File ): Builder hiddenServiceDir Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate directory. You may use this option multiple times to specify multiple services. If DIRECTORY does not exist, Tor will create it. (Note: in current versions of Tor, if DIRECTORY is a relative path, it will be relative to the current working directory of Tor instance, not to its DataDirectory. Do not rely on this behavior; it is not guaranteed to remain the same in future versions.) fun hiddenServiceDir(directory: File ): Builder hostnameFile fun hostnameFile(file: File ): Builder libraryPath fun libraryPath(directory: File ): Builder resolveConf fun resolveConf(resolveConf: File ): Builder torExecutable fun torExecutable(file: File ): Builder torrc The configuration file, which contains \u201coption value\u201d pairs. fun torrc(file: File ): Builder v3AuthPrivateDir fun v3AuthPrivateDir(directory: File ): Builder","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/#builder","text":"class Builder (source) Builder for TorConfig. See also Companion.createConfig for convenience methods. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your module's src/main/jniLibs directory. If you are getting your // executable files via a dependency be sure to consult that Library's documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // }","title":"Builder"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/#parameters","text":"installDir - directory where the tor binaries are installed. configDir - directory where the filesystem will be setup for tor.","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/#constructors","text":"Name Summary <init> Builder for TorConfig. Builder(installDir: File , configDir: File )","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/#functions","text":"Name Summary build Builds torConfig and sets default values if not explicitly configured through builder. fun build(): TorConfigFiles cookieAuthFile fun cookieAuthFile(file: File ): Builder dataDir Store working data in DIR. Can not be changed while tor is running. fun dataDir(directory: File ): Builder fileCreationTimeout When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. fun fileCreationTimeout(timeoutSeconds: Int ): Builder geoip A filename containing IPv4 GeoIP data, for use with by-country statistics. fun geoip(file: File ): Builder geoipv6 A filename containing IPv6 GeoIP data, for use with by-country statistics. fun geoipv6(file: File ): Builder hiddenServiceDir Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate directory. You may use this option multiple times to specify multiple services. If DIRECTORY does not exist, Tor will create it. (Note: in current versions of Tor, if DIRECTORY is a relative path, it will be relative to the current working directory of Tor instance, not to its DataDirectory. Do not rely on this behavior; it is not guaranteed to remain the same in future versions.) fun hiddenServiceDir(directory: File ): Builder hostnameFile fun hostnameFile(file: File ): Builder libraryPath fun libraryPath(directory: File ): Builder resolveConf fun resolveConf(resolveConf: File ): Builder torExecutable fun torExecutable(file: File ): Builder torrc The configuration file, which contains \u201coption value\u201d pairs. fun torrc(file: File ): Builder v3AuthPrivateDir fun v3AuthPrivateDir(directory: File ): Builder","title":"Functions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / <init> <init> \u00b6 Builder(installDir: File , configDir: File ) Builder for TorConfig. See also Companion.createConfig for convenience methods. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your module's src/main/jniLibs directory. If you are getting your // executable files via a dependency be sure to consult that Library's documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // } Parameters \u00b6 installDir - directory where the tor binaries are installed. configDir - directory where the filesystem will be setup for tor.","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/-init-/#init","text":"Builder(installDir: File , configDir: File ) Builder for TorConfig. See also Companion.createConfig for convenience methods. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your module's src/main/jniLibs directory. If you are getting your // executable files via a dependency be sure to consult that Library's documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // }","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/-init-/#parameters","text":"installDir - directory where the tor binaries are installed. configDir - directory where the filesystem will be setup for tor.","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/build/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / build build \u00b6 fun build(): TorConfigFiles (source) Builds torConfig and sets default values if not explicitly configured through builder. Return TorConfigFiles","title":"Build"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/build/#build","text":"fun build(): TorConfigFiles (source) Builds torConfig and sets default values if not explicitly configured through builder. Return TorConfigFiles","title":"build"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/cookie-auth-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / cookieAuthFile cookieAuthFile \u00b6 fun cookieAuthFile(file: File ): Builder (source)","title":"Cookie auth file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/cookie-auth-file/#cookieauthfile","text":"fun cookieAuthFile(file: File ): Builder (source)","title":"cookieAuthFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/data-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / dataDir dataDir \u00b6 fun dataDir(directory: File ): Builder (source) Store working data in DIR. Can not be changed while tor is running. Default value: $configDir/lib/tor Parameters \u00b6 directory - directory where tor runtime data is stored Return Builder","title":"Data dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/data-dir/#datadir","text":"fun dataDir(directory: File ): Builder (source) Store working data in DIR. Can not be changed while tor is running. Default value: $configDir/lib/tor","title":"dataDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/data-dir/#parameters","text":"directory - directory where tor runtime data is stored Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/file-creation-timeout/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / fileCreationTimeout fileCreationTimeout \u00b6 fun fileCreationTimeout(timeoutSeconds: Int ): Builder (source) When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. This method specifies how much time to wait until failing the startup. Default value is 15 seconds Parameters \u00b6 timeoutSeconds - Int Return Builder","title":"File creation timeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/file-creation-timeout/#filecreationtimeout","text":"fun fileCreationTimeout(timeoutSeconds: Int ): Builder (source) When tor starts it waits for the control port and cookie auth files to be created before it proceeds to the next step in startup. If these files are not created after a certain amount of time, then the startup has failed. This method specifies how much time to wait until failing the startup. Default value is 15 seconds","title":"fileCreationTimeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/file-creation-timeout/#parameters","text":"timeoutSeconds - Int Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoip/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / geoip geoip \u00b6 fun geoip(file: File ): Builder (source) A filename containing IPv4 GeoIP data, for use with by-country statistics. Default value: $configDir/geoip Parameters \u00b6 file - geoip file Return Builder","title":"Geoip"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoip/#geoip","text":"fun geoip(file: File ): Builder (source) A filename containing IPv4 GeoIP data, for use with by-country statistics. Default value: $configDir/geoip","title":"geoip"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoip/#parameters","text":"file - geoip file Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoipv6/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / geoipv6 geoipv6 \u00b6 fun geoipv6(file: File ): Builder (source) A filename containing IPv6 GeoIP data, for use with by-country statistics. Default value: $configDir/geoip6 Parameters \u00b6 file - geoip6 file Return Builder","title":"Geoipv6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoipv6/#geoipv6","text":"fun geoipv6(file: File ): Builder (source) A filename containing IPv6 GeoIP data, for use with by-country statistics. Default value: $configDir/geoip6","title":"geoipv6"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/geoipv6/#parameters","text":"file - geoip6 file Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hidden-service-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / hiddenServiceDir hiddenServiceDir \u00b6 fun hiddenServiceDir(directory: File ): Builder (source) Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate directory. You may use this option multiple times to specify multiple services. If DIRECTORY does not exist, Tor will create it. (Note: in current versions of Tor, if DIRECTORY is a relative path, it will be relative to the current working directory of Tor instance, not to its DataDirectory. Do not rely on this behavior; it is not guaranteed to remain the same in future versions.) Default value: $configDir/hiddenservices Parameters \u00b6 directory - hidden services directory Return Builder","title":"Hidden service dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hidden-service-dir/#hiddenservicedir","text":"fun hiddenServiceDir(directory: File ): Builder (source) Store data files for a hidden service in DIRECTORY. Every hidden service must have a separate directory. You may use this option multiple times to specify multiple services. If DIRECTORY does not exist, Tor will create it. (Note: in current versions of Tor, if DIRECTORY is a relative path, it will be relative to the current working directory of Tor instance, not to its DataDirectory. Do not rely on this behavior; it is not guaranteed to remain the same in future versions.) Default value: $configDir/hiddenservices","title":"hiddenServiceDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hidden-service-dir/#parameters","text":"directory - hidden services directory Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hostname-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / hostnameFile hostnameFile \u00b6 fun hostnameFile(file: File ): Builder (source)","title":"Hostname file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/hostname-file/#hostnamefile","text":"fun hostnameFile(file: File ): Builder (source)","title":"hostnameFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/library-path/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / libraryPath libraryPath \u00b6 fun libraryPath(directory: File ): Builder (source)","title":"Library path"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/library-path/#librarypath","text":"fun libraryPath(directory: File ): Builder (source)","title":"libraryPath"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/resolve-conf/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / resolveConf resolveConf \u00b6 fun resolveConf(resolveConf: File ): Builder (source)","title":"Resolve conf"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/resolve-conf/#resolveconf","text":"fun resolveConf(resolveConf: File ): Builder (source)","title":"resolveConf"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/tor-executable/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / torExecutable torExecutable \u00b6 fun torExecutable(file: File ): Builder (source)","title":"Tor executable"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/tor-executable/#torexecutable","text":"fun torExecutable(file: File ): Builder (source)","title":"torExecutable"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/torrc/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / torrc torrc \u00b6 fun torrc(file: File ): Builder (source) The configuration file, which contains \u201coption value\u201d pairs. Default value: $configDir/torrc Parameters \u00b6 file - your torrc file Return Builder","title":"Torrc"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/torrc/#torrc","text":"fun torrc(file: File ): Builder (source) The configuration file, which contains \u201coption value\u201d pairs. Default value: $configDir/torrc","title":"torrc"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/torrc/#parameters","text":"file - your torrc file Return Builder","title":"Parameters"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/v3-auth-private-dir/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorConfigFiles / Builder / v3AuthPrivateDir v3AuthPrivateDir \u00b6 fun v3AuthPrivateDir(directory: File ): Builder (source)","title":"V3 auth private dir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-config-files/-builder/v3-auth-private-dir/#v3authprivatedir","text":"fun v3AuthPrivateDir(directory: File ): Builder (source)","title":"v3AuthPrivateDir"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings TorSettings \u00b6 abstract class TorSettings : BaseConsts (source) This class is for defining default values for your torrc file. Extend this class and define your own settings. Keep in mind that Orbot and TorBrowser are the 2 most widely used applications using Tor, and to use settings that won\u2019t conflict (those settings are documented as such, and contain further details). TorSettings.Companion contains pretty standard default values which\u2019ll get you a Socks5 proxy running, nothing more. Would highly recommend reading up on what\u2019s what in the manual: https://2019.www.torproject.org/docs/tor-manual.html.en Constructors \u00b6 Name Summary <init> This class is for defining default values for your torrc file. Extend this class and define your own settings. TorSettings() Properties \u00b6 Name Summary connectionPadding Adds to the torrc file \u201cConnectionPadding <0, 1, or auto>\u201c abstract val connectionPadding: String customTorrc If not null/not empty, will add the string value to the torrc file abstract val customTorrc: String ? disableNetwork OnionProxyManager will enable this on startup using the TorControlConnection based off of the device\u2019s network state. Setting this to true is highly recommended. abstract val disableNetwork: Boolean dnsPort TorBrowser and Orbot use \u201c5400\u201d by default. It may be wise to pick something that won\u2019t conflict. abstract val dnsPort: String dnsPortIsolationFlags Express isolation flags to be added when enabling the dnsPort abstract val dnsPortIsolationFlags: List < String >? dormantClientTimeout Adds to the torrc file \u201cDormantClientTimeout minutes\u201d abstract val dormantClientTimeout: Int ? entryNodes Set with a comma separated list of Entry Nodes. abstract val entryNodes: String ? excludeNodes Set with a comma separated list of Exit Nodes to be excluded. abstract val excludeNodes: String ? exitNodes Set with a comma separated list of Exit Nodes to use. abstract val exitNodes: String ? hasBridges If true , adds to the torrc file \u201cUseBridges 1\u201d and will proc the adding of bridges. abstract val hasBridges: Boolean hasCookieAuthentication Highly recommended to be set to true for securing the ControlPort abstract val hasCookieAuthentication: Boolean hasDebugLogs Adds to the torrc file: abstract val hasDebugLogs: Boolean hasDormantCanceledByStartup Highly recommended to be set to true for Android applications. abstract val hasDormantCanceledByStartup: Boolean hasOpenProxyOnAllInterfaces If true, adds to the torrc file \u201cSocksListenAddress 0.0.0.0\u201d abstract val hasOpenProxyOnAllInterfaces: Boolean hasReachableAddress If true, adds to the torrc file \u201cReachableAddresses < reachableAddressPorts >\u201c abstract val hasReachableAddress: Boolean hasReducedConnectionPadding If true, adds to the torrc file \u201cReducedConnectionPadding 1\u201d abstract val hasReducedConnectionPadding: Boolean hasSafeSocks If true, adds to the torrc file \u201cSafeSocks 1\u201d abstract val hasSafeSocks: Boolean hasStrictNodes If true, adds to the torrc file \u201cStrictNodes 1\u201d abstract val hasStrictNodes: Boolean hasTestSocks If true, adds to the torrc file \u201cTestSocks 1\u201d abstract val hasTestSocks: Boolean httpTunnelPort Could be \u201cauto\u201d or a specific port, such as \u201c8288\u201d. abstract val httpTunnelPort: String httpTunnelPortIsolationFlags Express isolation flags to be added when enabling the httpTunnelPort abstract val httpTunnelPortIsolationFlags: List < String >? isAutoMapHostsOnResolve See DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE abstract val isAutoMapHostsOnResolve: Boolean isRelay See DEFAULT__IS_RELAY abstract val isRelay: Boolean listOfSupportedBridges Must have the transport binaries for obfs4 and/or snowflake, depending on if you wish to include them in your bridges file to use. abstract val listOfSupportedBridges: List < String > proxyHost See DEFAULT__PROXY_HOST abstract val proxyHost: String ? proxyPassword See DEFAULT__PROXY_PASSWORD abstract val proxyPassword: String ? proxyPort Default = java.null abstract val proxyPort: Int ? proxySocks5Host Adds to the torrc file \u201cSocks5Proxy proxySocks5Host : proxySocks5ServerPort \u201c abstract val proxySocks5Host: String ? proxySocks5ServerPort Adds to the torrc file \u201cSocks5Proxy proxySocks5Host : proxySocks5ServerPort \u201c abstract val proxySocks5ServerPort: Int ? proxyType Depending on the BaseConsts.ProxyType , will add authenticated Socks5 or HTTPS proxy, if other settings are configured properly. abstract val proxyType: String proxyUser See DEFAULT__PROXY_USER abstract val proxyUser: String ? reachableAddressPorts Adds to the torrc file \u201cReachableAddresses < reachableAddressPorts >\u201c abstract val reachableAddressPorts: String relayNickname See DEFAULT__RELAY_NICKNAME abstract val relayNickname: String ? relayPort TorBrowser and Orbot use 9001 by default. It may be wise to pick something that won\u2019t conflict. abstract val relayPort: String runAsDaemon If true , adds to the torrc file \u201cRunAsDaemon 1\u201d See DEFAULT__RUN_AS_DAEMON abstract val runAsDaemon: Boolean socksPort Could be \u201cauto\u201d or a specific port, such as \u201c9051\u201d. abstract val socksPort: String socksPortIsolationFlags Express isolation flags to be added when enabling the socksPort abstract val socksPortIsolationFlags: List < String >? transPort Can be \u201cauto\u201d, or a specified port such as \u201c9141\u201d abstract val transPort: String transPortIsolationFlags Express isolation flags to be added when enabling the transPort abstract val transPortIsolationFlags: List < String >? useSocks5 See DEFAULT__USE_SOCKS5 abstract val useSocks5: Boolean virtualAddressNetwork TorBrowser and Orbot use \u201c10.192.0.1/10\u201d, it may be wise to pick something that won\u2019t conflict if you are using this setting. abstract val virtualAddressNetwork: String ? Companion Object Properties \u00b6 Name Summary DEFAULT__DISABLE_NETWORK const val DEFAULT__DISABLE_NETWORK: Boolean DEFAULT__DORMANT_CLIENT_TIMEOUT const val DEFAULT__DORMANT_CLIENT_TIMEOUT: Int DEFAULT__ENTRY_NODES const val DEFAULT__ENTRY_NODES: String DEFAULT__EXCLUDED_NODES const val DEFAULT__EXCLUDED_NODES: String DEFAULT__EXIT_NODES const val DEFAULT__EXIT_NODES: String DEFAULT__HAS_BRIDGES const val DEFAULT__HAS_BRIDGES: Boolean DEFAULT__HAS_COOKIE_AUTHENTICATION const val DEFAULT__HAS_COOKIE_AUTHENTICATION: Boolean DEFAULT__HAS_DEBUG_LOGS const val DEFAULT__HAS_DEBUG_LOGS: Boolean DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP const val DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP: Boolean DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES const val DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES: Boolean DEFAULT__HAS_REACHABLE_ADDRESS const val DEFAULT__HAS_REACHABLE_ADDRESS: Boolean DEFAULT__HAS_REDUCED_CONNECTION_PADDING const val DEFAULT__HAS_REDUCED_CONNECTION_PADDING: Boolean DEFAULT__HAS_SAFE_SOCKS const val DEFAULT__HAS_SAFE_SOCKS: Boolean DEFAULT__HAS_STRICT_NODES const val DEFAULT__HAS_STRICT_NODES: Boolean DEFAULT__HAS_TEST_SOCKS const val DEFAULT__HAS_TEST_SOCKS: Boolean DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE const val DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE: Boolean DEFAULT__IS_RELAY const val DEFAULT__IS_RELAY: Boolean DEFAULT__PROXY_HOST const val DEFAULT__PROXY_HOST: String DEFAULT__PROXY_PASSWORD const val DEFAULT__PROXY_PASSWORD: String DEFAULT__PROXY_SOCKS5_HOST const val DEFAULT__PROXY_SOCKS5_HOST: String DEFAULT__PROXY_USER const val DEFAULT__PROXY_USER: String DEFAULT__REACHABLE_ADDRESS_PORTS const val DEFAULT__REACHABLE_ADDRESS_PORTS: String DEFAULT__RELAY_NICKNAME const val DEFAULT__RELAY_NICKNAME: String DEFAULT__RUN_AS_DAEMON const val DEFAULT__RUN_AS_DAEMON: Boolean DEFAULT__USE_SOCKS5 const val DEFAULT__USE_SOCKS5: Boolean","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/#torsettings","text":"abstract class TorSettings : BaseConsts (source) This class is for defining default values for your torrc file. Extend this class and define your own settings. Keep in mind that Orbot and TorBrowser are the 2 most widely used applications using Tor, and to use settings that won\u2019t conflict (those settings are documented as such, and contain further details). TorSettings.Companion contains pretty standard default values which\u2019ll get you a Socks5 proxy running, nothing more. Would highly recommend reading up on what\u2019s what in the manual: https://2019.www.torproject.org/docs/tor-manual.html.en","title":"TorSettings"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/#constructors","text":"Name Summary <init> This class is for defining default values for your torrc file. Extend this class and define your own settings. TorSettings()","title":"Constructors"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/#properties","text":"Name Summary connectionPadding Adds to the torrc file \u201cConnectionPadding <0, 1, or auto>\u201c abstract val connectionPadding: String customTorrc If not null/not empty, will add the string value to the torrc file abstract val customTorrc: String ? disableNetwork OnionProxyManager will enable this on startup using the TorControlConnection based off of the device\u2019s network state. Setting this to true is highly recommended. abstract val disableNetwork: Boolean dnsPort TorBrowser and Orbot use \u201c5400\u201d by default. It may be wise to pick something that won\u2019t conflict. abstract val dnsPort: String dnsPortIsolationFlags Express isolation flags to be added when enabling the dnsPort abstract val dnsPortIsolationFlags: List < String >? dormantClientTimeout Adds to the torrc file \u201cDormantClientTimeout minutes\u201d abstract val dormantClientTimeout: Int ? entryNodes Set with a comma separated list of Entry Nodes. abstract val entryNodes: String ? excludeNodes Set with a comma separated list of Exit Nodes to be excluded. abstract val excludeNodes: String ? exitNodes Set with a comma separated list of Exit Nodes to use. abstract val exitNodes: String ? hasBridges If true , adds to the torrc file \u201cUseBridges 1\u201d and will proc the adding of bridges. abstract val hasBridges: Boolean hasCookieAuthentication Highly recommended to be set to true for securing the ControlPort abstract val hasCookieAuthentication: Boolean hasDebugLogs Adds to the torrc file: abstract val hasDebugLogs: Boolean hasDormantCanceledByStartup Highly recommended to be set to true for Android applications. abstract val hasDormantCanceledByStartup: Boolean hasOpenProxyOnAllInterfaces If true, adds to the torrc file \u201cSocksListenAddress 0.0.0.0\u201d abstract val hasOpenProxyOnAllInterfaces: Boolean hasReachableAddress If true, adds to the torrc file \u201cReachableAddresses < reachableAddressPorts >\u201c abstract val hasReachableAddress: Boolean hasReducedConnectionPadding If true, adds to the torrc file \u201cReducedConnectionPadding 1\u201d abstract val hasReducedConnectionPadding: Boolean hasSafeSocks If true, adds to the torrc file \u201cSafeSocks 1\u201d abstract val hasSafeSocks: Boolean hasStrictNodes If true, adds to the torrc file \u201cStrictNodes 1\u201d abstract val hasStrictNodes: Boolean hasTestSocks If true, adds to the torrc file \u201cTestSocks 1\u201d abstract val hasTestSocks: Boolean httpTunnelPort Could be \u201cauto\u201d or a specific port, such as \u201c8288\u201d. abstract val httpTunnelPort: String httpTunnelPortIsolationFlags Express isolation flags to be added when enabling the httpTunnelPort abstract val httpTunnelPortIsolationFlags: List < String >? isAutoMapHostsOnResolve See DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE abstract val isAutoMapHostsOnResolve: Boolean isRelay See DEFAULT__IS_RELAY abstract val isRelay: Boolean listOfSupportedBridges Must have the transport binaries for obfs4 and/or snowflake, depending on if you wish to include them in your bridges file to use. abstract val listOfSupportedBridges: List < String > proxyHost See DEFAULT__PROXY_HOST abstract val proxyHost: String ? proxyPassword See DEFAULT__PROXY_PASSWORD abstract val proxyPassword: String ? proxyPort Default = java.null abstract val proxyPort: Int ? proxySocks5Host Adds to the torrc file \u201cSocks5Proxy proxySocks5Host : proxySocks5ServerPort \u201c abstract val proxySocks5Host: String ? proxySocks5ServerPort Adds to the torrc file \u201cSocks5Proxy proxySocks5Host : proxySocks5ServerPort \u201c abstract val proxySocks5ServerPort: Int ? proxyType Depending on the BaseConsts.ProxyType , will add authenticated Socks5 or HTTPS proxy, if other settings are configured properly. abstract val proxyType: String proxyUser See DEFAULT__PROXY_USER abstract val proxyUser: String ? reachableAddressPorts Adds to the torrc file \u201cReachableAddresses < reachableAddressPorts >\u201c abstract val reachableAddressPorts: String relayNickname See DEFAULT__RELAY_NICKNAME abstract val relayNickname: String ? relayPort TorBrowser and Orbot use 9001 by default. It may be wise to pick something that won\u2019t conflict. abstract val relayPort: String runAsDaemon If true , adds to the torrc file \u201cRunAsDaemon 1\u201d See DEFAULT__RUN_AS_DAEMON abstract val runAsDaemon: Boolean socksPort Could be \u201cauto\u201d or a specific port, such as \u201c9051\u201d. abstract val socksPort: String socksPortIsolationFlags Express isolation flags to be added when enabling the socksPort abstract val socksPortIsolationFlags: List < String >? transPort Can be \u201cauto\u201d, or a specified port such as \u201c9141\u201d abstract val transPort: String transPortIsolationFlags Express isolation flags to be added when enabling the transPort abstract val transPortIsolationFlags: List < String >? useSocks5 See DEFAULT__USE_SOCKS5 abstract val useSocks5: Boolean virtualAddressNetwork TorBrowser and Orbot use \u201c10.192.0.1/10\u201d, it may be wise to pick something that won\u2019t conflict if you are using this setting. abstract val virtualAddressNetwork: String ?","title":"Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/#companion-object-properties","text":"Name Summary DEFAULT__DISABLE_NETWORK const val DEFAULT__DISABLE_NETWORK: Boolean DEFAULT__DORMANT_CLIENT_TIMEOUT const val DEFAULT__DORMANT_CLIENT_TIMEOUT: Int DEFAULT__ENTRY_NODES const val DEFAULT__ENTRY_NODES: String DEFAULT__EXCLUDED_NODES const val DEFAULT__EXCLUDED_NODES: String DEFAULT__EXIT_NODES const val DEFAULT__EXIT_NODES: String DEFAULT__HAS_BRIDGES const val DEFAULT__HAS_BRIDGES: Boolean DEFAULT__HAS_COOKIE_AUTHENTICATION const val DEFAULT__HAS_COOKIE_AUTHENTICATION: Boolean DEFAULT__HAS_DEBUG_LOGS const val DEFAULT__HAS_DEBUG_LOGS: Boolean DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP const val DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP: Boolean DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES const val DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES: Boolean DEFAULT__HAS_REACHABLE_ADDRESS const val DEFAULT__HAS_REACHABLE_ADDRESS: Boolean DEFAULT__HAS_REDUCED_CONNECTION_PADDING const val DEFAULT__HAS_REDUCED_CONNECTION_PADDING: Boolean DEFAULT__HAS_SAFE_SOCKS const val DEFAULT__HAS_SAFE_SOCKS: Boolean DEFAULT__HAS_STRICT_NODES const val DEFAULT__HAS_STRICT_NODES: Boolean DEFAULT__HAS_TEST_SOCKS const val DEFAULT__HAS_TEST_SOCKS: Boolean DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE const val DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE: Boolean DEFAULT__IS_RELAY const val DEFAULT__IS_RELAY: Boolean DEFAULT__PROXY_HOST const val DEFAULT__PROXY_HOST: String DEFAULT__PROXY_PASSWORD const val DEFAULT__PROXY_PASSWORD: String DEFAULT__PROXY_SOCKS5_HOST const val DEFAULT__PROXY_SOCKS5_HOST: String DEFAULT__PROXY_USER const val DEFAULT__PROXY_USER: String DEFAULT__REACHABLE_ADDRESS_PORTS const val DEFAULT__REACHABLE_ADDRESS_PORTS: String DEFAULT__RELAY_NICKNAME const val DEFAULT__RELAY_NICKNAME: String DEFAULT__RUN_AS_DAEMON const val DEFAULT__RUN_AS_DAEMON: Boolean DEFAULT__USE_SOCKS5 const val DEFAULT__USE_SOCKS5: Boolean","title":"Companion Object Properties"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__DISABLE_NETWORK DEFAULT__DISABLE_NETWORK \u00b6 const val DEFAULT__DISABLE_NETWORK: Boolean (source)","title":" d e f a u l t   d i s a b l e  n e t w o r k"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/#default__disable_network","text":"const val DEFAULT__DISABLE_NETWORK: Boolean (source)","title":"DEFAULT__DISABLE_NETWORK"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-d-o-r-m-a-n-t_-c-l-i-e-n-t_-t-i-m-e-o-u-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__DORMANT_CLIENT_TIMEOUT DEFAULT__DORMANT_CLIENT_TIMEOUT \u00b6 const val DEFAULT__DORMANT_CLIENT_TIMEOUT: Int (source)","title":" d e f a u l t   d o r m a n t  c l i e n t  t i m e o u t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-d-o-r-m-a-n-t_-c-l-i-e-n-t_-t-i-m-e-o-u-t/#default__dormant_client_timeout","text":"const val DEFAULT__DORMANT_CLIENT_TIMEOUT: Int (source)","title":"DEFAULT__DORMANT_CLIENT_TIMEOUT"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-n-t-r-y_-n-o-d-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__ENTRY_NODES DEFAULT__ENTRY_NODES \u00b6 const val DEFAULT__ENTRY_NODES: String (source)","title":" d e f a u l t   e n t r y  n o d e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-n-t-r-y_-n-o-d-e-s/#default__entry_nodes","text":"const val DEFAULT__ENTRY_NODES: String (source)","title":"DEFAULT__ENTRY_NODES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-x-c-l-u-d-e-d_-n-o-d-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__EXCLUDED_NODES DEFAULT__EXCLUDED_NODES \u00b6 const val DEFAULT__EXCLUDED_NODES: String (source)","title":" d e f a u l t   e x c l u d e d  n o d e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-x-c-l-u-d-e-d_-n-o-d-e-s/#default__excluded_nodes","text":"const val DEFAULT__EXCLUDED_NODES: String (source)","title":"DEFAULT__EXCLUDED_NODES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-x-i-t_-n-o-d-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__EXIT_NODES DEFAULT__EXIT_NODES \u00b6 const val DEFAULT__EXIT_NODES: String (source)","title":" d e f a u l t   e x i t  n o d e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-e-x-i-t_-n-o-d-e-s/#default__exit_nodes","text":"const val DEFAULT__EXIT_NODES: String (source)","title":"DEFAULT__EXIT_NODES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-b-r-i-d-g-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_BRIDGES DEFAULT__HAS_BRIDGES \u00b6 const val DEFAULT__HAS_BRIDGES: Boolean (source)","title":" d e f a u l t   h a s  b r i d g e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-b-r-i-d-g-e-s/#default__has_bridges","text":"const val DEFAULT__HAS_BRIDGES: Boolean (source)","title":"DEFAULT__HAS_BRIDGES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-c-o-o-k-i-e_-a-u-t-h-e-n-t-i-c-a-t-i-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_COOKIE_AUTHENTICATION DEFAULT__HAS_COOKIE_AUTHENTICATION \u00b6 const val DEFAULT__HAS_COOKIE_AUTHENTICATION: Boolean (source)","title":" d e f a u l t   h a s  c o o k i e  a u t h e n t i c a t i o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-c-o-o-k-i-e_-a-u-t-h-e-n-t-i-c-a-t-i-o-n/#default__has_cookie_authentication","text":"const val DEFAULT__HAS_COOKIE_AUTHENTICATION: Boolean (source)","title":"DEFAULT__HAS_COOKIE_AUTHENTICATION"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-d-e-b-u-g_-l-o-g-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_DEBUG_LOGS DEFAULT__HAS_DEBUG_LOGS \u00b6 const val DEFAULT__HAS_DEBUG_LOGS: Boolean (source)","title":" d e f a u l t   h a s  d e b u g  l o g s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-d-e-b-u-g_-l-o-g-s/#default__has_debug_logs","text":"const val DEFAULT__HAS_DEBUG_LOGS: Boolean (source)","title":"DEFAULT__HAS_DEBUG_LOGS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-d-o-r-m-a-n-t_-c-a-n-c-e-l-e-d_-b-y_-s-t-a-r-t-u-p/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP \u00b6 const val DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP: Boolean (source)","title":" d e f a u l t   h a s  d o r m a n t  c a n c e l e d  b y  s t a r t u p"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-d-o-r-m-a-n-t_-c-a-n-c-e-l-e-d_-b-y_-s-t-a-r-t-u-p/#default__has_dormant_canceled_by_startup","text":"const val DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP: Boolean (source)","title":"DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-o-p-e-n_-p-r-o-x-y_-o-n_-a-l-l_-i-n-t-e-r-f-a-c-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES \u00b6 const val DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES: Boolean (source)","title":" d e f a u l t   h a s  o p e n  p r o x y  o n  a l l  i n t e r f a c e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-o-p-e-n_-p-r-o-x-y_-o-n_-a-l-l_-i-n-t-e-r-f-a-c-e-s/#default__has_open_proxy_on_all_interfaces","text":"const val DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES: Boolean (source)","title":"DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_REACHABLE_ADDRESS DEFAULT__HAS_REACHABLE_ADDRESS \u00b6 const val DEFAULT__HAS_REACHABLE_ADDRESS: Boolean (source)","title":" d e f a u l t   h a s  r e a c h a b l e  a d d r e s s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s/#default__has_reachable_address","text":"const val DEFAULT__HAS_REACHABLE_ADDRESS: Boolean (source)","title":"DEFAULT__HAS_REACHABLE_ADDRESS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-r-e-d-u-c-e-d_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_REDUCED_CONNECTION_PADDING DEFAULT__HAS_REDUCED_CONNECTION_PADDING \u00b6 const val DEFAULT__HAS_REDUCED_CONNECTION_PADDING: Boolean (source)","title":" d e f a u l t   h a s  r e d u c e d  c o n n e c t i o n  p a d d i n g"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-r-e-d-u-c-e-d_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/#default__has_reduced_connection_padding","text":"const val DEFAULT__HAS_REDUCED_CONNECTION_PADDING: Boolean (source)","title":"DEFAULT__HAS_REDUCED_CONNECTION_PADDING"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-s-a-f-e_-s-o-c-k-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_SAFE_SOCKS DEFAULT__HAS_SAFE_SOCKS \u00b6 const val DEFAULT__HAS_SAFE_SOCKS: Boolean (source)","title":" d e f a u l t   h a s  s a f e  s o c k s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-s-a-f-e_-s-o-c-k-s/#default__has_safe_socks","text":"const val DEFAULT__HAS_SAFE_SOCKS: Boolean (source)","title":"DEFAULT__HAS_SAFE_SOCKS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-s-t-r-i-c-t_-n-o-d-e-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_STRICT_NODES DEFAULT__HAS_STRICT_NODES \u00b6 const val DEFAULT__HAS_STRICT_NODES: Boolean (source)","title":" d e f a u l t   h a s  s t r i c t  n o d e s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-s-t-r-i-c-t_-n-o-d-e-s/#default__has_strict_nodes","text":"const val DEFAULT__HAS_STRICT_NODES: Boolean (source)","title":"DEFAULT__HAS_STRICT_NODES"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-t-e-s-t_-s-o-c-k-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__HAS_TEST_SOCKS DEFAULT__HAS_TEST_SOCKS \u00b6 const val DEFAULT__HAS_TEST_SOCKS: Boolean (source)","title":" d e f a u l t   h a s  t e s t  s o c k s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-h-a-s_-t-e-s-t_-s-o-c-k-s/#default__has_test_socks","text":"const val DEFAULT__HAS_TEST_SOCKS: Boolean (source)","title":"DEFAULT__HAS_TEST_SOCKS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-i-s_-a-u-t-o_-m-a-p_-h-o-s-t-s_-o-n_-r-e-s-o-l-v-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE \u00b6 const val DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE: Boolean (source)","title":" d e f a u l t   i s  a u t o  m a p  h o s t s  o n  r e s o l v e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-i-s_-a-u-t-o_-m-a-p_-h-o-s-t-s_-o-n_-r-e-s-o-l-v-e/#default__is_auto_map_hosts_on_resolve","text":"const val DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE: Boolean (source)","title":"DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-i-s_-r-e-l-a-y/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__IS_RELAY DEFAULT__IS_RELAY \u00b6 const val DEFAULT__IS_RELAY: Boolean (source)","title":" d e f a u l t   i s  r e l a y"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-i-s_-r-e-l-a-y/#default__is_relay","text":"const val DEFAULT__IS_RELAY: Boolean (source)","title":"DEFAULT__IS_RELAY"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-h-o-s-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_HOST DEFAULT__PROXY_HOST \u00b6 const val DEFAULT__PROXY_HOST: String (source)","title":" d e f a u l t   p r o x y  h o s t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-h-o-s-t/#default__proxy_host","text":"const val DEFAULT__PROXY_HOST: String (source)","title":"DEFAULT__PROXY_HOST"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-p-a-s-s-w-o-r-d/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_PASSWORD DEFAULT__PROXY_PASSWORD \u00b6 const val DEFAULT__PROXY_PASSWORD: String (source)","title":" d e f a u l t   p r o x y  p a s s w o r d"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-p-a-s-s-w-o-r-d/#default__proxy_password","text":"const val DEFAULT__PROXY_PASSWORD: String (source)","title":"DEFAULT__PROXY_PASSWORD"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-s-o-c-k-s5_-h-o-s-t/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_SOCKS5_HOST DEFAULT__PROXY_SOCKS5_HOST \u00b6 const val DEFAULT__PROXY_SOCKS5_HOST: String (source)","title":" d e f a u l t   p r o x y  s o c k s5  h o s t"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-s-o-c-k-s5_-h-o-s-t/#default__proxy_socks5_host","text":"const val DEFAULT__PROXY_SOCKS5_HOST: String (source)","title":"DEFAULT__PROXY_SOCKS5_HOST"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-u-s-e-r/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__PROXY_USER DEFAULT__PROXY_USER \u00b6 const val DEFAULT__PROXY_USER: String (source)","title":" d e f a u l t   p r o x y  u s e r"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-p-r-o-x-y_-u-s-e-r/#default__proxy_user","text":"const val DEFAULT__PROXY_USER: String (source)","title":"DEFAULT__PROXY_USER"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s_-p-o-r-t-s/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__REACHABLE_ADDRESS_PORTS DEFAULT__REACHABLE_ADDRESS_PORTS \u00b6 const val DEFAULT__REACHABLE_ADDRESS_PORTS: String (source)","title":" d e f a u l t   r e a c h a b l e  a d d r e s s  p o r t s"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s_-p-o-r-t-s/#default__reachable_address_ports","text":"const val DEFAULT__REACHABLE_ADDRESS_PORTS: String (source)","title":"DEFAULT__REACHABLE_ADDRESS_PORTS"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-e-l-a-y_-n-i-c-k-n-a-m-e/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__RELAY_NICKNAME DEFAULT__RELAY_NICKNAME \u00b6 const val DEFAULT__RELAY_NICKNAME: String (source)","title":" d e f a u l t   r e l a y  n i c k n a m e"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-e-l-a-y_-n-i-c-k-n-a-m-e/#default__relay_nickname","text":"const val DEFAULT__RELAY_NICKNAME: String (source)","title":"DEFAULT__RELAY_NICKNAME"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-u-n_-a-s_-d-a-e-m-o-n/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__RUN_AS_DAEMON DEFAULT__RUN_AS_DAEMON \u00b6 const val DEFAULT__RUN_AS_DAEMON: Boolean (source)","title":" d e f a u l t   r u n  a s  d a e m o n"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-r-u-n_-a-s_-d-a-e-m-o-n/#default__run_as_daemon","text":"const val DEFAULT__RUN_AS_DAEMON: Boolean (source)","title":"DEFAULT__RUN_AS_DAEMON"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-u-s-e_-s-o-c-k-s5/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / DEFAULT__USE_SOCKS5 DEFAULT__USE_SOCKS5 \u00b6 const val DEFAULT__USE_SOCKS5: Boolean (source)","title":" d e f a u l t   u s e  s o c k s5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-d-e-f-a-u-l-t__-u-s-e_-s-o-c-k-s5/#default__use_socks5","text":"const val DEFAULT__USE_SOCKS5: Boolean (source)","title":"DEFAULT__USE_SOCKS5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-init-/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / <init> <init> \u00b6 TorSettings() This class is for defining default values for your torrc file. Extend this class and define your own settings. Keep in mind that Orbot and TorBrowser are the 2 most widely used applications using Tor, and to use settings that won\u2019t conflict (those settings are documented as such, and contain further details). TorSettings.Companion contains pretty standard default values which\u2019ll get you a Socks5 proxy running, nothing more. Would highly recommend reading up on what\u2019s what in the manual: https://2019.www.torproject.org/docs/tor-manual.html.en","title":" init "},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/-init-/#init","text":"TorSettings() This class is for defining default values for your torrc file. Extend this class and define your own settings. Keep in mind that Orbot and TorBrowser are the 2 most widely used applications using Tor, and to use settings that won\u2019t conflict (those settings are documented as such, and contain further details). TorSettings.Companion contains pretty standard default values which\u2019ll get you a Socks5 proxy running, nothing more. Would highly recommend reading up on what\u2019s what in the manual: https://2019.www.torproject.org/docs/tor-manual.html.en","title":"&lt;init&gt;"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/connection-padding/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / connectionPadding connectionPadding \u00b6 abstract val connectionPadding: String (source) Adds to the torrc file \u201cConnectionPadding <0, 1, or auto>\u201c See BaseConsts.ConnectionPadding.OFF","title":"Connection padding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/connection-padding/#connectionpadding","text":"abstract val connectionPadding: String (source) Adds to the torrc file \u201cConnectionPadding <0, 1, or auto>\u201c See BaseConsts.ConnectionPadding.OFF","title":"connectionPadding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/custom-torrc/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / customTorrc customTorrc \u00b6 abstract val customTorrc: String ? (source) If not null/not empty, will add the string value to the torrc file Default java.null","title":"Custom torrc"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/custom-torrc/#customtorrc","text":"abstract val customTorrc: String ? (source) If not null/not empty, will add the string value to the torrc file Default java.null","title":"customTorrc"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/disable-network/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / disableNetwork disableNetwork \u00b6 abstract val disableNetwork: Boolean (source) OnionProxyManager will enable this on startup using the TorControlConnection based off of the device\u2019s network state. Setting this to true is highly recommended. Adds to the torrc file \u201cDisableNetwork <1 or 0>\u201c See DEFAULT__DISABLE_NETWORK","title":"Disable network"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/disable-network/#disablenetwork","text":"abstract val disableNetwork: Boolean (source) OnionProxyManager will enable this on startup using the TorControlConnection based off of the device\u2019s network state. Setting this to true is highly recommended. Adds to the torrc file \u201cDisableNetwork <1 or 0>\u201c See DEFAULT__DISABLE_NETWORK","title":"disableNetwork"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/dns-port-isolation-flags/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / dnsPortIsolationFlags dnsPortIsolationFlags \u00b6 abstract val dnsPortIsolationFlags: List < String >? (source) Express isolation flags to be added when enabling the dnsPort See BaseConsts.IsolationFlag for available options Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SocksPort","title":"Dns port isolation flags"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/dns-port-isolation-flags/#dnsportisolationflags","text":"abstract val dnsPortIsolationFlags: List < String >? (source) Express isolation flags to be added when enabling the dnsPort See BaseConsts.IsolationFlag for available options Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SocksPort","title":"dnsPortIsolationFlags"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/dns-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / dnsPort dnsPort \u00b6 abstract val dnsPort: String (source) TorBrowser and Orbot use \u201c5400\u201d by default. It may be wise to pick something that won\u2019t conflict. Disabled by default by Tor. Set to \u201cO\u201d to disable. Can also be \u201cauto\u201d, or a specific port between \u201c1024\u201d and \u201c65535\u201d Adds to the torrc file \u201cDNSPort < dnsPortIsolationFlags >\u201c See BaseConsts.PortOption.DISABLED","title":"Dns port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/dns-port/#dnsport","text":"abstract val dnsPort: String (source) TorBrowser and Orbot use \u201c5400\u201d by default. It may be wise to pick something that won\u2019t conflict. Disabled by default by Tor. Set to \u201cO\u201d to disable. Can also be \u201cauto\u201d, or a specific port between \u201c1024\u201d and \u201c65535\u201d Adds to the torrc file \u201cDNSPort < dnsPortIsolationFlags >\u201c See BaseConsts.PortOption.DISABLED","title":"dnsPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/dormant-client-timeout/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / dormantClientTimeout dormantClientTimeout \u00b6 abstract val dormantClientTimeout: Int ? (source) Adds to the torrc file \u201cDormantClientTimeout minutes\u201d Minimum value 10. Any value less than or equal to 9 will fall back to using the value of 10 when writing the config to the torrc file. Set null to disable See DEFAULT__DORMANT_CLIENT_TIMEOUT","title":"Dormant client timeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/dormant-client-timeout/#dormantclienttimeout","text":"abstract val dormantClientTimeout: Int ? (source) Adds to the torrc file \u201cDormantClientTimeout minutes\u201d Minimum value 10. Any value less than or equal to 9 will fall back to using the value of 10 when writing the config to the torrc file. Set null to disable See DEFAULT__DORMANT_CLIENT_TIMEOUT","title":"dormantClientTimeout"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/entry-nodes/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / entryNodes entryNodes \u00b6 abstract val entryNodes: String ? (source) Set with a comma separated list of Entry Nodes. Adds to the torrc file \u201cEntryNodes <node,node,node,\u2026>\u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#EntryNodes See DEFAULT__ENTRY_NODES","title":"Entry nodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/entry-nodes/#entrynodes","text":"abstract val entryNodes: String ? (source) Set with a comma separated list of Entry Nodes. Adds to the torrc file \u201cEntryNodes <node,node,node,\u2026>\u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#EntryNodes See DEFAULT__ENTRY_NODES","title":"entryNodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/exclude-nodes/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / excludeNodes excludeNodes \u00b6 abstract val excludeNodes: String ? (source) Set with a comma separated list of Exit Nodes to be excluded. Adds to the torrc file \u201cExcludeExitNodes <node,node,node,\u2026>\u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ExcludeExitNodes See DEFAULT__EXCLUDED_NODES","title":"Exclude nodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/exclude-nodes/#excludenodes","text":"abstract val excludeNodes: String ? (source) Set with a comma separated list of Exit Nodes to be excluded. Adds to the torrc file \u201cExcludeExitNodes <node,node,node,\u2026>\u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ExcludeExitNodes See DEFAULT__EXCLUDED_NODES","title":"excludeNodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/exit-nodes/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / exitNodes exitNodes \u00b6 abstract val exitNodes: String ? (source) Set with a comma separated list of Exit Nodes to use. Adds to the torrc file \u201cExitNodes <node,node,node,\u2026>\u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ExitNodes See DEFAULT__EXIT_NODES","title":"Exit nodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/exit-nodes/#exitnodes","text":"abstract val exitNodes: String ? (source) Set with a comma separated list of Exit Nodes to use. Adds to the torrc file \u201cExitNodes <node,node,node,\u2026>\u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ExitNodes See DEFAULT__EXIT_NODES","title":"exitNodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-bridges/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasBridges hasBridges \u00b6 abstract val hasBridges: Boolean (source) If true , adds to the torrc file \u201cUseBridges 1\u201d and will proc the adding of bridges. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#UseBridges See DEFAULT__HAS_BRIDGES","title":"Has bridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-bridges/#hasbridges","text":"abstract val hasBridges: Boolean (source) If true , adds to the torrc file \u201cUseBridges 1\u201d and will proc the adding of bridges. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#UseBridges See DEFAULT__HAS_BRIDGES","title":"hasBridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-cookie-authentication/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasCookieAuthentication hasCookieAuthentication \u00b6 abstract val hasCookieAuthentication: Boolean (source) Highly recommended to be set to true for securing the ControlPort Adds to the torrc file: \u201cCookieAuthentication 1\u201d \u201cCookieAuthFile < TorConfigFiles.cookieAuthFile path> Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#CookieAuthentication Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#CookieAuthFile See DEFAULT__HAS_COOKIE_AUTHENTICATION","title":"Has cookie authentication"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-cookie-authentication/#hascookieauthentication","text":"abstract val hasCookieAuthentication: Boolean (source) Highly recommended to be set to true for securing the ControlPort Adds to the torrc file: \u201cCookieAuthentication 1\u201d \u201cCookieAuthFile < TorConfigFiles.cookieAuthFile path> Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#CookieAuthentication Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#CookieAuthFile See DEFAULT__HAS_COOKIE_AUTHENTICATION","title":"hasCookieAuthentication"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-debug-logs/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasDebugLogs hasDebugLogs \u00b6 abstract val hasDebugLogs: Boolean (source) Adds to the torrc file: \u201cLog debug syslog\u201d \u201cLog info syslog\u201d See DEFAULT__HAS_DEBUG_LOGS","title":"Has debug logs"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-debug-logs/#hasdebuglogs","text":"abstract val hasDebugLogs: Boolean (source) Adds to the torrc file: \u201cLog debug syslog\u201d \u201cLog info syslog\u201d See DEFAULT__HAS_DEBUG_LOGS","title":"hasDebugLogs"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-dormant-canceled-by-startup/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasDormantCanceledByStartup hasDormantCanceledByStartup \u00b6 abstract val hasDormantCanceledByStartup: Boolean (source) Highly recommended to be set to true for Android applications. If true, adds to the torrc file \u201cDormantCanceledByStartup 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#DormantCanceledByStartup See DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP","title":"Has dormant canceled by startup"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-dormant-canceled-by-startup/#hasdormantcanceledbystartup","text":"abstract val hasDormantCanceledByStartup: Boolean (source) Highly recommended to be set to true for Android applications. If true, adds to the torrc file \u201cDormantCanceledByStartup 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#DormantCanceledByStartup See DEFAULT__HAS_DORMANT_CANCELED_BY_STARTUP","title":"hasDormantCanceledByStartup"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-open-proxy-on-all-interfaces/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasOpenProxyOnAllInterfaces hasOpenProxyOnAllInterfaces \u00b6 abstract val hasOpenProxyOnAllInterfaces: Boolean (source) If true, adds to the torrc file \u201cSocksListenAddress 0.0.0.0\u201d See DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES","title":"Has open proxy on all interfaces"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-open-proxy-on-all-interfaces/#hasopenproxyonallinterfaces","text":"abstract val hasOpenProxyOnAllInterfaces: Boolean (source) If true, adds to the torrc file \u201cSocksListenAddress 0.0.0.0\u201d See DEFAULT__HAS_OPEN_PROXY_ON_ALL_INTERFACES","title":"hasOpenProxyOnAllInterfaces"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-reachable-address/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasReachableAddress hasReachableAddress \u00b6 abstract val hasReachableAddress: Boolean (source) If true, adds to the torrc file \u201cReachableAddresses < reachableAddressPorts >\u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ReachableAddresses See DEFAULT__HAS_REACHABLE_ADDRESS","title":"Has reachable address"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-reachable-address/#hasreachableaddress","text":"abstract val hasReachableAddress: Boolean (source) If true, adds to the torrc file \u201cReachableAddresses < reachableAddressPorts >\u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ReachableAddresses See DEFAULT__HAS_REACHABLE_ADDRESS","title":"hasReachableAddress"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-reduced-connection-padding/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasReducedConnectionPadding hasReducedConnectionPadding \u00b6 abstract val hasReducedConnectionPadding: Boolean (source) If true, adds to the torrc file \u201cReducedConnectionPadding 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ReducedConnectionPadding See DEFAULT__HAS_REDUCED_CONNECTION_PADDING","title":"Has reduced connection padding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-reduced-connection-padding/#hasreducedconnectionpadding","text":"abstract val hasReducedConnectionPadding: Boolean (source) If true, adds to the torrc file \u201cReducedConnectionPadding 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ReducedConnectionPadding See DEFAULT__HAS_REDUCED_CONNECTION_PADDING","title":"hasReducedConnectionPadding"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-safe-socks/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasSafeSocks hasSafeSocks \u00b6 abstract val hasSafeSocks: Boolean (source) If true, adds to the torrc file \u201cSafeSocks 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SafeSocks See DEFAULT__HAS_SAFE_SOCKS","title":"Has safe socks"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-safe-socks/#hassafesocks","text":"abstract val hasSafeSocks: Boolean (source) If true, adds to the torrc file \u201cSafeSocks 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SafeSocks See DEFAULT__HAS_SAFE_SOCKS","title":"hasSafeSocks"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-strict-nodes/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasStrictNodes hasStrictNodes \u00b6 abstract val hasStrictNodes: Boolean (source) If true, adds to the torrc file \u201cStrictNodes 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#StrictNodes See DEFAULT__HAS_STRICT_NODES","title":"Has strict nodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-strict-nodes/#hasstrictnodes","text":"abstract val hasStrictNodes: Boolean (source) If true, adds to the torrc file \u201cStrictNodes 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#StrictNodes See DEFAULT__HAS_STRICT_NODES","title":"hasStrictNodes"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-test-socks/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / hasTestSocks hasTestSocks \u00b6 abstract val hasTestSocks: Boolean (source) If true, adds to the torrc file \u201cTestSocks 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#TestSocks See DEFAULT__HAS_TEST_SOCKS","title":"Has test socks"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/has-test-socks/#hastestsocks","text":"abstract val hasTestSocks: Boolean (source) If true, adds to the torrc file \u201cTestSocks 1\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#TestSocks See DEFAULT__HAS_TEST_SOCKS","title":"hasTestSocks"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/http-tunnel-port-isolation-flags/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / httpTunnelPortIsolationFlags httpTunnelPortIsolationFlags \u00b6 abstract val httpTunnelPortIsolationFlags: List < String >? (source) Express isolation flags to be added when enabling the httpTunnelPort Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SocksPort See BaseConsts.IsolationFlag for available options","title":"Http tunnel port isolation flags"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/http-tunnel-port-isolation-flags/#httptunnelportisolationflags","text":"abstract val httpTunnelPortIsolationFlags: List < String >? (source) Express isolation flags to be added when enabling the httpTunnelPort Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SocksPort See BaseConsts.IsolationFlag for available options","title":"httpTunnelPortIsolationFlags"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/http-tunnel-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / httpTunnelPort httpTunnelPort \u00b6 abstract val httpTunnelPort: String (source) Could be \u201cauto\u201d or a specific port, such as \u201c8288\u201d. TorBrowser and Orbot use \u201c8218\u201d and \u201c8118\u201d, respectively, by default. It may be wise to pick something that won\u2019t conflict if you\u2019re using this setting. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#HTTPTunnelPort See BaseConsts.PortOption.DISABLED","title":"Http tunnel port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/http-tunnel-port/#httptunnelport","text":"abstract val httpTunnelPort: String (source) Could be \u201cauto\u201d or a specific port, such as \u201c8288\u201d. TorBrowser and Orbot use \u201c8218\u201d and \u201c8118\u201d, respectively, by default. It may be wise to pick something that won\u2019t conflict if you\u2019re using this setting. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#HTTPTunnelPort See BaseConsts.PortOption.DISABLED","title":"httpTunnelPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/is-auto-map-hosts-on-resolve/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / isAutoMapHostsOnResolve isAutoMapHostsOnResolve \u00b6 abstract val isAutoMapHostsOnResolve: Boolean (source) See DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#AutomapHostsOnResolve","title":"Is auto map hosts on resolve"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/is-auto-map-hosts-on-resolve/#isautomaphostsonresolve","text":"abstract val isAutoMapHostsOnResolve: Boolean (source) See DEFAULT__IS_AUTO_MAP_HOSTS_ON_RESOLVE Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#AutomapHostsOnResolve","title":"isAutoMapHostsOnResolve"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/is-relay/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / isRelay isRelay \u00b6 abstract val isRelay: Boolean (source) See DEFAULT__IS_RELAY If setting this to true, see relayPort documentation.","title":"Is relay"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/is-relay/#isrelay","text":"abstract val isRelay: Boolean (source) See DEFAULT__IS_RELAY If setting this to true, see relayPort documentation.","title":"isRelay"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/list-of-supported-bridges/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / listOfSupportedBridges listOfSupportedBridges \u00b6 abstract val listOfSupportedBridges: List < String > (source) Must have the transport binaries for obfs4 and/or snowflake, depending on if you wish to include them in your bridges file to use. See BaseConsts.SupportedBridgeType for options","title":"List of supported bridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/list-of-supported-bridges/#listofsupportedbridges","text":"abstract val listOfSupportedBridges: List < String > (source) Must have the transport binaries for obfs4 and/or snowflake, depending on if you wish to include them in your bridges file to use. See BaseConsts.SupportedBridgeType for options","title":"listOfSupportedBridges"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-host/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyHost proxyHost \u00b6 abstract val proxyHost: String ? (source) See DEFAULT__PROXY_HOST","title":"Proxy host"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-host/#proxyhost","text":"abstract val proxyHost: String ? (source) See DEFAULT__PROXY_HOST","title":"proxyHost"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-password/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyPassword proxyPassword \u00b6 abstract val proxyPassword: String ? (source) See DEFAULT__PROXY_PASSWORD","title":"Proxy password"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-password/#proxypassword","text":"abstract val proxyPassword: String ? (source) See DEFAULT__PROXY_PASSWORD","title":"proxyPassword"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyPort proxyPort \u00b6 abstract val proxyPort: Int ? (source) Default = java.null","title":"Proxy port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-port/#proxyport","text":"abstract val proxyPort: Int ? (source) Default = java.null","title":"proxyPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-socks5-host/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxySocks5Host proxySocks5Host \u00b6 abstract val proxySocks5Host: String ? (source) Adds to the torrc file \u201cSocks5Proxy proxySocks5Host : proxySocks5ServerPort \u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#Socks5Proxy See DEFAULT__PROXY_SOCKS5_HOST","title":"Proxy socks5 host"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-socks5-host/#proxysocks5host","text":"abstract val proxySocks5Host: String ? (source) Adds to the torrc file \u201cSocks5Proxy proxySocks5Host : proxySocks5ServerPort \u201c Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#Socks5Proxy See DEFAULT__PROXY_SOCKS5_HOST","title":"proxySocks5Host"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-socks5-server-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxySocks5ServerPort proxySocks5ServerPort \u00b6 abstract val proxySocks5ServerPort: Int ? (source) Adds to the torrc file \u201cSocks5Proxy proxySocks5Host : proxySocks5ServerPort \u201c Default = java.null Try ((Math.random() * 1000) + 10000).toInt()","title":"Proxy socks5 server port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-socks5-server-port/#proxysocks5serverport","text":"abstract val proxySocks5ServerPort: Int ? (source) Adds to the torrc file \u201cSocks5Proxy proxySocks5Host : proxySocks5ServerPort \u201c Default = java.null Try ((Math.random() * 1000) + 10000).toInt()","title":"proxySocks5ServerPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-type/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyType proxyType \u00b6 abstract val proxyType: String (source) Depending on the BaseConsts.ProxyType , will add authenticated Socks5 or HTTPS proxy, if other settings are configured properly. This only gets used if you declare the following settings set as: useSocks5 is set to false hasBridges is set to false proxyType is BaseConsts.ProxyType.SOCKS_5 or BaseConsts.ProxyType.HTTPS is set (eg. 127.0.0.1) proxyPort is null , or a port between 1024 and 65535 proxyUser is set proxyPassword is set See BaseConsts.ProxyType.DISABLED","title":"Proxy type"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-type/#proxytype","text":"abstract val proxyType: String (source) Depending on the BaseConsts.ProxyType , will add authenticated Socks5 or HTTPS proxy, if other settings are configured properly. This only gets used if you declare the following settings set as: useSocks5 is set to false hasBridges is set to false proxyType is BaseConsts.ProxyType.SOCKS_5 or BaseConsts.ProxyType.HTTPS is set (eg. 127.0.0.1) proxyPort is null , or a port between 1024 and 65535 proxyUser is set proxyPassword is set See BaseConsts.ProxyType.DISABLED","title":"proxyType"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-user/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / proxyUser proxyUser \u00b6 abstract val proxyUser: String ? (source) See DEFAULT__PROXY_USER","title":"Proxy user"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/proxy-user/#proxyuser","text":"abstract val proxyUser: String ? (source) See DEFAULT__PROXY_USER","title":"proxyUser"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/reachable-address-ports/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / reachableAddressPorts reachableAddressPorts \u00b6 abstract val reachableAddressPorts: String (source) Adds to the torrc file \u201cReachableAddresses < reachableAddressPorts >\u201c See DEFAULT__REACHABLE_ADDRESS_PORTS","title":"Reachable address ports"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/reachable-address-ports/#reachableaddressports","text":"abstract val reachableAddressPorts: String (source) Adds to the torrc file \u201cReachableAddresses < reachableAddressPorts >\u201c See DEFAULT__REACHABLE_ADDRESS_PORTS","title":"reachableAddressPorts"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/relay-nickname/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / relayNickname relayNickname \u00b6 abstract val relayNickname: String ? (source) See DEFAULT__RELAY_NICKNAME See relayPort documentation.","title":"Relay nickname"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/relay-nickname/#relaynickname","text":"abstract val relayNickname: String ? (source) See DEFAULT__RELAY_NICKNAME See relayPort documentation.","title":"relayNickname"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/relay-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / relayPort relayPort \u00b6 abstract val relayPort: String (source) TorBrowser and Orbot use 9001 by default. It may be wise to pick something that won\u2019t conflict. Adds to the torrc file \u201cORPort < relayPort >\u201c This only gets used if you declare the following settings set as: hasReachableAddress false hasBridges false isRelay true relayNickname \u201cyour nickname\u201d relayPort \u201cauto\u201d, or a port between \u201c1024\u201d and \u201c65535\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ORPort See BaseConsts.PortOption.DISABLED","title":"Relay port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/relay-port/#relayport","text":"abstract val relayPort: String (source) TorBrowser and Orbot use 9001 by default. It may be wise to pick something that won\u2019t conflict. Adds to the torrc file \u201cORPort < relayPort >\u201c This only gets used if you declare the following settings set as: hasReachableAddress false hasBridges false isRelay true relayNickname \u201cyour nickname\u201d relayPort \u201cauto\u201d, or a port between \u201c1024\u201d and \u201c65535\u201d Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#ORPort See BaseConsts.PortOption.DISABLED","title":"relayPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/run-as-daemon/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / runAsDaemon runAsDaemon \u00b6 abstract val runAsDaemon: Boolean (source) If true , adds to the torrc file \u201cRunAsDaemon 1\u201d See DEFAULT__RUN_AS_DAEMON","title":"Run as daemon"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/run-as-daemon/#runasdaemon","text":"abstract val runAsDaemon: Boolean (source) If true , adds to the torrc file \u201cRunAsDaemon 1\u201d See DEFAULT__RUN_AS_DAEMON","title":"runAsDaemon"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/socks-port-isolation-flags/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / socksPortIsolationFlags socksPortIsolationFlags \u00b6 abstract val socksPortIsolationFlags: List < String >? (source) Express isolation flags to be added when enabling the socksPort Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SocksPort See BaseConsts.IsolationFlag for available options","title":"Socks port isolation flags"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/socks-port-isolation-flags/#socksportisolationflags","text":"abstract val socksPortIsolationFlags: List < String >? (source) Express isolation flags to be added when enabling the socksPort Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SocksPort See BaseConsts.IsolationFlag for available options","title":"socksPortIsolationFlags"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/socks-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / socksPort socksPort \u00b6 abstract val socksPort: String (source) Could be \u201cauto\u201d or a specific port, such as \u201c9051\u201d. TorBrowser uses \u201c9150\u201d, and Orbot uses \u201c9050\u201d by default. It may be wise to pick something that won\u2019t conflict. See BaseConsts.PortOption","title":"Socks port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/socks-port/#socksport","text":"abstract val socksPort: String (source) Could be \u201cauto\u201d or a specific port, such as \u201c9051\u201d. TorBrowser uses \u201c9150\u201d, and Orbot uses \u201c9050\u201d by default. It may be wise to pick something that won\u2019t conflict. See BaseConsts.PortOption","title":"socksPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/trans-port-isolation-flags/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / transPortIsolationFlags transPortIsolationFlags \u00b6 abstract val transPortIsolationFlags: List < String >? (source) Express isolation flags to be added when enabling the transPort Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SocksPort See BaseConsts.IsolationFlag for available options","title":"Trans port isolation flags"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/trans-port-isolation-flags/#transportisolationflags","text":"abstract val transPortIsolationFlags: List < String >? (source) Express isolation flags to be added when enabling the transPort Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#SocksPort See BaseConsts.IsolationFlag for available options","title":"transPortIsolationFlags"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/trans-port/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / transPort transPort \u00b6 abstract val transPort: String (source) Can be \u201cauto\u201d, or a specified port such as \u201c9141\u201d See listOfSupportedBridges documentation. Orbot and TorBrowser default to \u201c9140\u201d and \u201c9040\u201d respectively. It may be wise to pick something that won\u2019t conflict. See BaseConsts.PortOption.DISABLED","title":"Trans port"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/trans-port/#transport","text":"abstract val transPort: String (source) Can be \u201cauto\u201d, or a specified port such as \u201c9141\u201d See listOfSupportedBridges documentation. Orbot and TorBrowser default to \u201c9140\u201d and \u201c9040\u201d respectively. It may be wise to pick something that won\u2019t conflict. See BaseConsts.PortOption.DISABLED","title":"transPort"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/use-socks5/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / useSocks5 useSocks5 \u00b6 abstract val useSocks5: Boolean (source) See DEFAULT__USE_SOCKS5","title":"Use socks5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/use-socks5/#usesocks5","text":"abstract val useSocks5: Boolean (source) See DEFAULT__USE_SOCKS5","title":"useSocks5"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/virtual-address-network/","text":"topl-core-base / io.matthewnelson.topl_core_base / TorSettings / virtualAddressNetwork virtualAddressNetwork \u00b6 abstract val virtualAddressNetwork: String ? (source) TorBrowser and Orbot use \u201c10.192.0.1/10\u201d, it may be wise to pick something that won\u2019t conflict if you are using this setting. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#VirtualAddrNetworkIPv6","title":"Virtual address network"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/-tor-settings/virtual-address-network/#virtualaddressnetwork","text":"abstract val virtualAddressNetwork: String ? (source) TorBrowser and Orbot use \u201c10.192.0.1/10\u201d, it may be wise to pick something that won\u2019t conflict if you are using this setting. Docs: https://2019.www.torproject.org/docs/tor-manual.html.en#VirtualAddrNetworkIPv6","title":"virtualAddressNetwork"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/java.io.-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / java.io.File Extensions for java.io.File \u00b6 Name Summary createNewFileIfDoesNotExist Creates the file and the necessary parent directories if it does not exist. Be sure to acquire the proper lock from io.matthewnelson.topl_core_base.TorConfigFiles when utilizing this method. fun File .createNewFileIfDoesNotExist(): Boolean ? readTorConfigFile Reads a File fun File .readTorConfigFile(): ByteArray","title":"Index"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/java.io.-file/#extensions-for-javaiofile","text":"Name Summary createNewFileIfDoesNotExist Creates the file and the necessary parent directories if it does not exist. Be sure to acquire the proper lock from io.matthewnelson.topl_core_base.TorConfigFiles when utilizing this method. fun File .createNewFileIfDoesNotExist(): Boolean ? readTorConfigFile Reads a File fun File .readTorConfigFile(): ByteArray","title":"Extensions for java.io.File"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/java.io.-file/create-new-file-if-does-not-exist/","text":"topl-core-base / io.matthewnelson.topl_core_base / java.io.File / createNewFileIfDoesNotExist createNewFileIfDoesNotExist \u00b6 fun File .createNewFileIfDoesNotExist(): Boolean ? (source) Creates the file and the necessary parent directories if it does not exist. Be sure to acquire the proper lock from io.matthewnelson.topl_core_base.TorConfigFiles when utilizing this method. Exceptions \u00b6 SecurityException - Unauthorized access to file/directory Return null if the parent directories of that File could not be created, false if the File was not able to be created, true if the file exists/was created.","title":"Create new file if does not exist"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/java.io.-file/create-new-file-if-does-not-exist/#createnewfileifdoesnotexist","text":"fun File .createNewFileIfDoesNotExist(): Boolean ? (source) Creates the file and the necessary parent directories if it does not exist. Be sure to acquire the proper lock from io.matthewnelson.topl_core_base.TorConfigFiles when utilizing this method.","title":"createNewFileIfDoesNotExist"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/java.io.-file/create-new-file-if-does-not-exist/#exceptions","text":"SecurityException - Unauthorized access to file/directory Return null if the parent directories of that File could not be created, false if the File was not able to be created, true if the file exists/was created.","title":"Exceptions"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/java.io.-file/read-tor-config-file/","text":"topl-core-base / io.matthewnelson.topl_core_base / java.io.File / readTorConfigFile readTorConfigFile \u00b6 fun File .readTorConfigFile(): ByteArray (source) Reads a File Exceptions \u00b6 IOException - File errors EOFException - File errors SecurityException - Unauthorized access to file/directory Return a ByteArray of the contents of the File","title":"Read tor config file"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/java.io.-file/read-tor-config-file/#readtorconfigfile","text":"fun File .readTorConfigFile(): ByteArray (source) Reads a File","title":"readTorConfigFile"},{"location":"topl-core-base/io.matthewnelson.topl_core_base/java.io.-file/read-tor-config-file/#exceptions","text":"IOException - File errors EOFException - File errors SecurityException - Unauthorized access to file/directory Return a ByteArray of the contents of the File","title":"Exceptions"},{"location":"topl-service/","text":"topl-service Packages \u00b6 Name Summary io.matthewnelson.topl_service io.matthewnelson.topl_service.lifecycle io.matthewnelson.topl_service.notification io.matthewnelson.topl_service.util Index \u00b6 All Types","title":"Index"},{"location":"topl-service/#packages","text":"Name Summary io.matthewnelson.topl_service io.matthewnelson.topl_service.lifecycle io.matthewnelson.topl_service.notification io.matthewnelson.topl_service.util","title":"Packages"},{"location":"topl-service/#index","text":"All Types","title":"Index"},{"location":"topl-service/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.topl_service.lifecycle.BackgroundManager \u00b6 When your application is sent to the background (the Recent App\u2019s tray or lock screen), the chosen BackgroundManager.Builder.Policy will be triggered. | io.matthewnelson.topl_service.util.ServiceConsts \u00b6 | io.matthewnelson.topl_service.notification.ServiceNotification \u00b6 Everything to do with TorService \u2018s notification. | io.matthewnelson.topl_service.TorServiceController \u00b6","title":"Index"},{"location":"topl-service/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"topl-service/alltypes/#iomatthewnelsontopl_servicelifecyclebackgroundmanager","text":"When your application is sent to the background (the Recent App\u2019s tray or lock screen), the chosen BackgroundManager.Builder.Policy will be triggered. |","title":"io.matthewnelson.topl_service.lifecycle.BackgroundManager"},{"location":"topl-service/alltypes/#iomatthewnelsontopl_serviceutilserviceconsts","text":"|","title":"io.matthewnelson.topl_service.util.ServiceConsts"},{"location":"topl-service/alltypes/#iomatthewnelsontopl_servicenotificationservicenotification","text":"Everything to do with TorService \u2018s notification. |","title":"io.matthewnelson.topl_service.notification.ServiceNotification"},{"location":"topl-service/alltypes/#iomatthewnelsontopl_servicetorservicecontroller","text":"","title":"io.matthewnelson.topl_service.TorServiceController"},{"location":"topl-service/io.matthewnelson.topl_service/","text":"topl-service / io.matthewnelson.topl_service Package io.matthewnelson.topl_service \u00b6 Types \u00b6 Name Summary TorServiceController class TorServiceController : ServiceConsts","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service/#package-iomatthewnelsontopl_service","text":"","title":"Package io.matthewnelson.topl_service"},{"location":"topl-service/io.matthewnelson.topl_service/#types","text":"Name Summary TorServiceController class TorServiceController : ServiceConsts","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController TorServiceController \u00b6 class TorServiceController : ServiceConsts (source) Types \u00b6 Name Summary Builder The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. class Builder Companion Object Properties \u00b6 Name Summary appEventBroadcaster var appEventBroadcaster: TorServiceEventBroadcaster ? serviceExecutionHooks var serviceExecutionHooks: ServiceExecutionHooks ? Companion Object Functions \u00b6 Name Summary getDefaultTorSettings This method will never throw the RuntimeException if you call it after Builder.build . fun getDefaultTorSettings(): ApplicationDefaultTorSettings getServiceTorSettings This method will never throw the RuntimeException if you call it after Builder.build . fun getServiceTorSettings(): BaseServiceTorSettings getTorConfigFiles Get the TorConfigFiles that have been set after calling Builder.build fun getTorConfigFiles(): TorConfigFiles getV3ClientAuthManager This method will never throw the RuntimeException if you call it after Builder.build . fun getV3ClientAuthManager(): BaseV3ClientAuthManager newIdentity Changes identities. fun newIdentity(): Unit restartTor Restarts Tor. fun restartTor(): Unit startTor This method will never throw the RuntimeException if you call it after Builder.build . fun startTor(): Unit stopTor Stops TorService . fun stopTor(): Unit","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/#torservicecontroller","text":"class TorServiceController : ServiceConsts (source)","title":"TorServiceController"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/#types","text":"Name Summary Builder The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. class Builder","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/#companion-object-properties","text":"Name Summary appEventBroadcaster var appEventBroadcaster: TorServiceEventBroadcaster ? serviceExecutionHooks var serviceExecutionHooks: ServiceExecutionHooks ?","title":"Companion Object Properties"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/#companion-object-functions","text":"Name Summary getDefaultTorSettings This method will never throw the RuntimeException if you call it after Builder.build . fun getDefaultTorSettings(): ApplicationDefaultTorSettings getServiceTorSettings This method will never throw the RuntimeException if you call it after Builder.build . fun getServiceTorSettings(): BaseServiceTorSettings getTorConfigFiles Get the TorConfigFiles that have been set after calling Builder.build fun getTorConfigFiles(): TorConfigFiles getV3ClientAuthManager This method will never throw the RuntimeException if you call it after Builder.build . fun getV3ClientAuthManager(): BaseV3ClientAuthManager newIdentity Changes identities. fun newIdentity(): Unit restartTor Restarts Tor. fun restartTor(): Unit startTor This method will never throw the RuntimeException if you call it after Builder.build . fun startTor(): Unit stopTor Stops TorService . fun stopTor(): Unit","title":"Companion Object Functions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/app-event-broadcaster/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / appEventBroadcaster appEventBroadcaster \u00b6 @JvmStatic var appEventBroadcaster: TorServiceEventBroadcaster ? (source)","title":"App event broadcaster"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/app-event-broadcaster/#appeventbroadcaster","text":"@JvmStatic var appEventBroadcaster: TorServiceEventBroadcaster ? (source)","title":"appEventBroadcaster"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-default-tor-settings/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / getDefaultTorSettings getDefaultTorSettings \u00b6 @JvmStatic fun getDefaultTorSettings(): ApplicationDefaultTorSettings (source) This method will never throw the RuntimeException if you call it after Builder.build . Exceptions \u00b6 RuntimeException - if called before Builder.build Return Instance of ApplicationDefaultTorSettings that were used to instantiate TorServiceController.Builder with","title":"Get default tor settings"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-default-tor-settings/#getdefaulttorsettings","text":"@JvmStatic fun getDefaultTorSettings(): ApplicationDefaultTorSettings (source) This method will never throw the RuntimeException if you call it after Builder.build .","title":"getDefaultTorSettings"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-default-tor-settings/#exceptions","text":"RuntimeException - if called before Builder.build Return Instance of ApplicationDefaultTorSettings that were used to instantiate TorServiceController.Builder with","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-service-tor-settings/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / getServiceTorSettings getServiceTorSettings \u00b6 @JvmStatic fun getServiceTorSettings(): BaseServiceTorSettings (source) This method will never throw the RuntimeException if you call it after Builder.build . Exceptions \u00b6 RuntimeException - if called before Builder.build Return BaseServiceTorSettings","title":"Get service tor settings"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-service-tor-settings/#getservicetorsettings","text":"@JvmStatic fun getServiceTorSettings(): BaseServiceTorSettings (source) This method will never throw the RuntimeException if you call it after Builder.build .","title":"getServiceTorSettings"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-service-tor-settings/#exceptions","text":"RuntimeException - if called before Builder.build Return BaseServiceTorSettings","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-tor-config-files/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / getTorConfigFiles getTorConfigFiles \u00b6 @JvmStatic fun getTorConfigFiles(): TorConfigFiles (source) Get the TorConfigFiles that have been set after calling Builder.build This method will never throw the RuntimeException if you call it after Builder.build . Exceptions \u00b6 RuntimeException - if called before Builder.build Return Instance of TorConfigFiles that are being used throughout TOPL-Android","title":"Get tor config files"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-tor-config-files/#gettorconfigfiles","text":"@JvmStatic fun getTorConfigFiles(): TorConfigFiles (source) Get the TorConfigFiles that have been set after calling Builder.build This method will never throw the RuntimeException if you call it after Builder.build .","title":"getTorConfigFiles"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-tor-config-files/#exceptions","text":"RuntimeException - if called before Builder.build Return Instance of TorConfigFiles that are being used throughout TOPL-Android","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-v3-client-auth-manager/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / getV3ClientAuthManager getV3ClientAuthManager \u00b6 @JvmStatic fun getV3ClientAuthManager(): BaseV3ClientAuthManager (source) This method will never throw the RuntimeException if you call it after Builder.build . Exceptions \u00b6 RuntimeException - if called before Builder.build Return The implemented BaseV3ClientAuthManager for adding, querying, and removing v3 Client Authorization private key files","title":"Get v3 client auth manager"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-v3-client-auth-manager/#getv3clientauthmanager","text":"@JvmStatic fun getV3ClientAuthManager(): BaseV3ClientAuthManager (source) This method will never throw the RuntimeException if you call it after Builder.build .","title":"getV3ClientAuthManager"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/get-v3-client-auth-manager/#exceptions","text":"RuntimeException - if called before Builder.build Return The implemented BaseV3ClientAuthManager for adding, querying, and removing v3 Client Authorization private key files","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/new-identity/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / newIdentity newIdentity \u00b6 @JvmStatic fun newIdentity(): Unit (source) Changes identities.","title":"New identity"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/new-identity/#newidentity","text":"@JvmStatic fun newIdentity(): Unit (source) Changes identities.","title":"newIdentity"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/restart-tor/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / restartTor restartTor \u00b6 @JvmStatic fun restartTor(): Unit (source) Restarts Tor.","title":"Restart tor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/restart-tor/#restarttor","text":"@JvmStatic fun restartTor(): Unit (source) Restarts Tor.","title":"restartTor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/service-execution-hooks/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / serviceExecutionHooks serviceExecutionHooks \u00b6 @JvmStatic var serviceExecutionHooks: ServiceExecutionHooks ? (source)","title":"Service execution hooks"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/service-execution-hooks/#serviceexecutionhooks","text":"@JvmStatic var serviceExecutionHooks: ServiceExecutionHooks ? (source)","title":"serviceExecutionHooks"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/start-tor/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / startTor startTor \u00b6 @JvmStatic fun startTor(): Unit (source) This method will never throw the RuntimeException if you call it after Builder.build . Starts TorService and then Tor. You can call this as much as you want. If the Tor Process is already running, it will do nothing. Exceptions \u00b6 RuntimeException - if called before Builder.build","title":"Start tor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/start-tor/#starttor","text":"@JvmStatic fun startTor(): Unit (source) This method will never throw the RuntimeException if you call it after Builder.build . Starts TorService and then Tor. You can call this as much as you want. If the Tor Process is already running, it will do nothing.","title":"startTor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/start-tor/#exceptions","text":"RuntimeException - if called before Builder.build","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/stop-tor/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / stopTor stopTor \u00b6 @JvmStatic fun stopTor(): Unit (source) Stops TorService .","title":"Stop tor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/stop-tor/#stoptor","text":"@JvmStatic fun stopTor(): Unit (source) Stops TorService .","title":"stopTor"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder Builder \u00b6 class Builder (source) The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. // private fun generateTorServiceNotificationBuilder(context: Context): ServiceNotification.Builder { return ServiceNotification . Builder ( channelName = \"TOPL-Android Demo\" , channelDescription = \"TorOnionProxyLibrary-Android Demo\" , channelID = \"TOPL-Android Demo\" , notificationID = 615 ) . setImageTorNetworkingEnabled ( drawableRes = R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( drawableRes = R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( drawableRes = R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( drawableRes = R . drawable . tor_stat_notifyerr ) . setVisibility ( visibility = NotificationCompat . VISIBILITY_PRIVATE ) . setCustomColor ( colorRes = R . color . primaryColor ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) . showNotification ( show = true ) // Set the notification's contentIntent for when the user clicks the notification . also { builder -> context . applicationContext . packageManager ?. getLaunchIntentForPackage ( context . applicationContext . packageName ) ?. let { intent -> // Set in your manifest for the launch activity so the intent won't launch // a new activity over top of your already created activity if the app is // open when the user clicks the notification: // // android:launchMode=\"singleInstance\" // // For more info on launchMode and Activity Intent flags, see: // // https://medium.com/swlh/truly-understand-tasks-and-back-stack-intent-flags-of-activity-2a137c401eca builder . setContentIntent ( PendingIntent . getActivity ( context . applicationContext , 0 , // Your desired request code intent , 0 // flags // can also include a bundle if desired ) ) } } // } // private fun generateBackgroundManagerPolicy(): BackgroundManager.Builder.Policy { return BackgroundManager . Builder () // All available options present. Only 1 is able to be chosen. . respectResourcesWhileInBackground ( secondsFrom5To45 = 20 ) //.runServiceInForeground(killAppIfTaskIsRemoved = true) // } // private fun setupTorServices(application: Application, torConfigFiles: TorConfigFiles ) { TorServiceController . Builder ( application = application , torServiceNotificationBuilder = generateTorServiceNotificationBuilder ( application ), backgroundManagerPolicy = generateBackgroundManagerPolicy (), buildConfigVersionCode = BuildConfig . VERSION_CODE , // Can instantiate directly here then access it from // TorServiceController.Companion.getTorSettings() and cast what's returned // as MyTorSettings defaultTorSettings = MyTorSettings (), // These should live somewhere in your module's assets directory, // ex: my-project/my-application-module/src/main/assets/common/geoip // ex: my-project/my-application-module/src/main/assets/common/geoip6 geoipAssetPath = \"common/geoip\" , geoip6AssetPath = \"common/geoip6\" ) . addTimeToDisableNetworkDelay ( milliseconds = 1 _000L ) . addTimeToRestartTorDelay ( milliseconds = 100L ) . addTimeToStopServiceDelay ( milliseconds = 100L ) . disableStopServiceOnTaskRemoved ( disable = false ) . setBuildConfigDebug ( buildConfigDebug = BuildConfig . DEBUG ) // Can instantiate directly here then access it from // TorServiceController.Companion?.appEventBroadcaster and cast what's returned // as MyEventBroadcaster . setEventBroadcaster ( eventBroadcaster = MyEventBroadcaster ()) . setServiceExecutionHooks ( executionHooks = MyServiceExecutionHooks ()) // Only needed if you wish to customize the directories/files used by Tor if // the defaults aren't to your liking. . useCustomTorConfigFiles ( torConfigFiles = torConfigFiles ) . build () // } Parameters \u00b6 application - Application , for obtaining context torServiceNotificationBuilder - The ServiceNotification.Builder for customizing TorService \u2018s notification backgroundManagerPolicy - The BackgroundManager.Builder.Policy to be executed while your application is in the background (the Recent App\u2019s tray). buildConfigVersionCode - send BuildConfig.VERSION_CODE . Mitigates copying of geoip files to app updates only defaultTorSettings - ApplicationDefaultTorSettings used to create your torrc file on start of Tor geoipAssetPath - The path to where you have your geoip file located (ex: in assets/common directory, send this variable \u201ccommon/geoip\u201d) geoip6AssetPath - The path to where you have your geoip6 file located (ex: in assets/common directory, send this variable \u201ccommon/geoip6\u201d) Constructors \u00b6 Name Summary <init> The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. Builder(application: Application , torServiceNotificationBuilder: Builder, backgroundManagerPolicy: Policy, buildConfigVersionCode: Int , defaultTorSettings: ApplicationDefaultTorSettings , geoipAssetPath: String , geoip6AssetPath: String ) Functions \u00b6 Name Summary addTimeToDisableNetworkDelay Default is set to 6_000ms, (what this method adds time to). fun addTimeToDisableNetworkDelay(milliseconds: Long ): Builder addTimeToRestartTorDelay Default is set to 500ms, (what this method adds time to). fun addTimeToRestartTorDelay(milliseconds: Long ): Builder addTimeToStopServiceDelay Default is set to 100ms (what this method adds time to). fun addTimeToStopServiceDelay(milliseconds: Long ): Builder build Initializes TorService setup and enables the ability to call methods from the Companion object w/o throwing exceptions. fun build(): Unit disableStopServiceOnTaskRemoved When your task is removed from the Recent App\u2019s tray, TorService.onTaskRemoved is triggered. Default behaviour is to stop Tor, and then TorService . Electing this option will inhibit the default behaviour from being carried out. fun disableStopServiceOnTaskRemoved(disable: Boolean = true): Builder setBuildConfigDebug This makes it such that on your Application\u2019s Debug builds, the topl-core and topl-service modules will provide you with Logcat messages (when TorSettings.hasDebugLogs is enabled). fun setBuildConfigDebug(buildConfigDebug: Boolean ): Builder setEventBroadcaster Get broadcasts piped to your Application to do with them what you desire. What you send this will live at Companion.appEventBroadcaster for the remainder of your application\u2019s lifecycle to refer to elsewhere in your App. fun setEventBroadcaster(eventBroadcaster: TorServiceEventBroadcaster ): Builder setServiceExecutionHooks Implement and set hooks to be executed in TorService.onCreate , and ServiceActionProcessor.processServiceAction prior to starting of Tor, and post stopping of Tor. fun setServiceExecutionHooks(executionHooks: ServiceExecutionHooks ): Builder useCustomTorConfigFiles If you wish to customize the file structure of how Tor is installed in your app, you can do so by instantiating your own TorConfigFiles and customizing it via the TorConfigFiles.Builder , or overridden method TorConfigFiles.createConfig . fun useCustomTorConfigFiles(torConfigFiles: TorConfigFiles ): Builder","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#builder","text":"class Builder (source) The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. // private fun generateTorServiceNotificationBuilder(context: Context): ServiceNotification.Builder { return ServiceNotification . Builder ( channelName = \"TOPL-Android Demo\" , channelDescription = \"TorOnionProxyLibrary-Android Demo\" , channelID = \"TOPL-Android Demo\" , notificationID = 615 ) . setImageTorNetworkingEnabled ( drawableRes = R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( drawableRes = R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( drawableRes = R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( drawableRes = R . drawable . tor_stat_notifyerr ) . setVisibility ( visibility = NotificationCompat . VISIBILITY_PRIVATE ) . setCustomColor ( colorRes = R . color . primaryColor ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) . showNotification ( show = true ) // Set the notification's contentIntent for when the user clicks the notification . also { builder -> context . applicationContext . packageManager ?. getLaunchIntentForPackage ( context . applicationContext . packageName ) ?. let { intent -> // Set in your manifest for the launch activity so the intent won't launch // a new activity over top of your already created activity if the app is // open when the user clicks the notification: // // android:launchMode=\"singleInstance\" // // For more info on launchMode and Activity Intent flags, see: // // https://medium.com/swlh/truly-understand-tasks-and-back-stack-intent-flags-of-activity-2a137c401eca builder . setContentIntent ( PendingIntent . getActivity ( context . applicationContext , 0 , // Your desired request code intent , 0 // flags // can also include a bundle if desired ) ) } } // } // private fun generateBackgroundManagerPolicy(): BackgroundManager.Builder.Policy { return BackgroundManager . Builder () // All available options present. Only 1 is able to be chosen. . respectResourcesWhileInBackground ( secondsFrom5To45 = 20 ) //.runServiceInForeground(killAppIfTaskIsRemoved = true) // } // private fun setupTorServices(application: Application, torConfigFiles: TorConfigFiles ) { TorServiceController . Builder ( application = application , torServiceNotificationBuilder = generateTorServiceNotificationBuilder ( application ), backgroundManagerPolicy = generateBackgroundManagerPolicy (), buildConfigVersionCode = BuildConfig . VERSION_CODE , // Can instantiate directly here then access it from // TorServiceController.Companion.getTorSettings() and cast what's returned // as MyTorSettings defaultTorSettings = MyTorSettings (), // These should live somewhere in your module's assets directory, // ex: my-project/my-application-module/src/main/assets/common/geoip // ex: my-project/my-application-module/src/main/assets/common/geoip6 geoipAssetPath = \"common/geoip\" , geoip6AssetPath = \"common/geoip6\" ) . addTimeToDisableNetworkDelay ( milliseconds = 1 _000L ) . addTimeToRestartTorDelay ( milliseconds = 100L ) . addTimeToStopServiceDelay ( milliseconds = 100L ) . disableStopServiceOnTaskRemoved ( disable = false ) . setBuildConfigDebug ( buildConfigDebug = BuildConfig . DEBUG ) // Can instantiate directly here then access it from // TorServiceController.Companion?.appEventBroadcaster and cast what's returned // as MyEventBroadcaster . setEventBroadcaster ( eventBroadcaster = MyEventBroadcaster ()) . setServiceExecutionHooks ( executionHooks = MyServiceExecutionHooks ()) // Only needed if you wish to customize the directories/files used by Tor if // the defaults aren't to your liking. . useCustomTorConfigFiles ( torConfigFiles = torConfigFiles ) . build () // }","title":"Builder"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#parameters","text":"application - Application , for obtaining context torServiceNotificationBuilder - The ServiceNotification.Builder for customizing TorService \u2018s notification backgroundManagerPolicy - The BackgroundManager.Builder.Policy to be executed while your application is in the background (the Recent App\u2019s tray). buildConfigVersionCode - send BuildConfig.VERSION_CODE . Mitigates copying of geoip files to app updates only defaultTorSettings - ApplicationDefaultTorSettings used to create your torrc file on start of Tor geoipAssetPath - The path to where you have your geoip file located (ex: in assets/common directory, send this variable \u201ccommon/geoip\u201d) geoip6AssetPath - The path to where you have your geoip6 file located (ex: in assets/common directory, send this variable \u201ccommon/geoip6\u201d)","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#constructors","text":"Name Summary <init> The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. Builder(application: Application , torServiceNotificationBuilder: Builder, backgroundManagerPolicy: Policy, buildConfigVersionCode: Int , defaultTorSettings: ApplicationDefaultTorSettings , geoipAssetPath: String , geoip6AssetPath: String )","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/#functions","text":"Name Summary addTimeToDisableNetworkDelay Default is set to 6_000ms, (what this method adds time to). fun addTimeToDisableNetworkDelay(milliseconds: Long ): Builder addTimeToRestartTorDelay Default is set to 500ms, (what this method adds time to). fun addTimeToRestartTorDelay(milliseconds: Long ): Builder addTimeToStopServiceDelay Default is set to 100ms (what this method adds time to). fun addTimeToStopServiceDelay(milliseconds: Long ): Builder build Initializes TorService setup and enables the ability to call methods from the Companion object w/o throwing exceptions. fun build(): Unit disableStopServiceOnTaskRemoved When your task is removed from the Recent App\u2019s tray, TorService.onTaskRemoved is triggered. Default behaviour is to stop Tor, and then TorService . Electing this option will inhibit the default behaviour from being carried out. fun disableStopServiceOnTaskRemoved(disable: Boolean = true): Builder setBuildConfigDebug This makes it such that on your Application\u2019s Debug builds, the topl-core and topl-service modules will provide you with Logcat messages (when TorSettings.hasDebugLogs is enabled). fun setBuildConfigDebug(buildConfigDebug: Boolean ): Builder setEventBroadcaster Get broadcasts piped to your Application to do with them what you desire. What you send this will live at Companion.appEventBroadcaster for the remainder of your application\u2019s lifecycle to refer to elsewhere in your App. fun setEventBroadcaster(eventBroadcaster: TorServiceEventBroadcaster ): Builder setServiceExecutionHooks Implement and set hooks to be executed in TorService.onCreate , and ServiceActionProcessor.processServiceAction prior to starting of Tor, and post stopping of Tor. fun setServiceExecutionHooks(executionHooks: ServiceExecutionHooks ): Builder useCustomTorConfigFiles If you wish to customize the file structure of how Tor is installed in your app, you can do so by instantiating your own TorConfigFiles and customizing it via the TorConfigFiles.Builder , or overridden method TorConfigFiles.createConfig . fun useCustomTorConfigFiles(torConfigFiles: TorConfigFiles ): Builder","title":"Functions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-init-/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / <init> <init> \u00b6 Builder(application: Application , torServiceNotificationBuilder: Builder, backgroundManagerPolicy: Policy, buildConfigVersionCode: Int , defaultTorSettings: ApplicationDefaultTorSettings , geoipAssetPath: String , geoip6AssetPath: String ) The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. // private fun generateTorServiceNotificationBuilder(context: Context): ServiceNotification.Builder { return ServiceNotification . Builder ( channelName = \"TOPL-Android Demo\" , channelDescription = \"TorOnionProxyLibrary-Android Demo\" , channelID = \"TOPL-Android Demo\" , notificationID = 615 ) . setImageTorNetworkingEnabled ( drawableRes = R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( drawableRes = R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( drawableRes = R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( drawableRes = R . drawable . tor_stat_notifyerr ) . setVisibility ( visibility = NotificationCompat . VISIBILITY_PRIVATE ) . setCustomColor ( colorRes = R . color . primaryColor ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) . showNotification ( show = true ) // Set the notification's contentIntent for when the user clicks the notification . also { builder -> context . applicationContext . packageManager ?. getLaunchIntentForPackage ( context . applicationContext . packageName ) ?. let { intent -> // Set in your manifest for the launch activity so the intent won't launch // a new activity over top of your already created activity if the app is // open when the user clicks the notification: // // android:launchMode=\"singleInstance\" // // For more info on launchMode and Activity Intent flags, see: // // https://medium.com/swlh/truly-understand-tasks-and-back-stack-intent-flags-of-activity-2a137c401eca builder . setContentIntent ( PendingIntent . getActivity ( context . applicationContext , 0 , // Your desired request code intent , 0 // flags // can also include a bundle if desired ) ) } } // } // private fun generateBackgroundManagerPolicy(): BackgroundManager.Builder.Policy { return BackgroundManager . Builder () // All available options present. Only 1 is able to be chosen. . respectResourcesWhileInBackground ( secondsFrom5To45 = 20 ) //.runServiceInForeground(killAppIfTaskIsRemoved = true) // } // private fun setupTorServices(application: Application, torConfigFiles: TorConfigFiles ) { TorServiceController . Builder ( application = application , torServiceNotificationBuilder = generateTorServiceNotificationBuilder ( application ), backgroundManagerPolicy = generateBackgroundManagerPolicy (), buildConfigVersionCode = BuildConfig . VERSION_CODE , // Can instantiate directly here then access it from // TorServiceController.Companion.getTorSettings() and cast what's returned // as MyTorSettings defaultTorSettings = MyTorSettings (), // These should live somewhere in your module's assets directory, // ex: my-project/my-application-module/src/main/assets/common/geoip // ex: my-project/my-application-module/src/main/assets/common/geoip6 geoipAssetPath = \"common/geoip\" , geoip6AssetPath = \"common/geoip6\" ) . addTimeToDisableNetworkDelay ( milliseconds = 1 _000L ) . addTimeToRestartTorDelay ( milliseconds = 100L ) . addTimeToStopServiceDelay ( milliseconds = 100L ) . disableStopServiceOnTaskRemoved ( disable = false ) . setBuildConfigDebug ( buildConfigDebug = BuildConfig . DEBUG ) // Can instantiate directly here then access it from // TorServiceController.Companion?.appEventBroadcaster and cast what's returned // as MyEventBroadcaster . setEventBroadcaster ( eventBroadcaster = MyEventBroadcaster ()) . setServiceExecutionHooks ( executionHooks = MyServiceExecutionHooks ()) // Only needed if you wish to customize the directories/files used by Tor if // the defaults aren't to your liking. . useCustomTorConfigFiles ( torConfigFiles = torConfigFiles ) . build () // } Parameters \u00b6 application - Application , for obtaining context torServiceNotificationBuilder - The ServiceNotification.Builder for customizing TorService \u2018s notification backgroundManagerPolicy - The BackgroundManager.Builder.Policy to be executed while your application is in the background (the Recent App\u2019s tray). buildConfigVersionCode - send BuildConfig.VERSION_CODE . Mitigates copying of geoip files to app updates only defaultTorSettings - ApplicationDefaultTorSettings used to create your torrc file on start of Tor geoipAssetPath - The path to where you have your geoip file located (ex: in assets/common directory, send this variable \u201ccommon/geoip\u201d) geoip6AssetPath - The path to where you have your geoip6 file located (ex: in assets/common directory, send this variable \u201ccommon/geoip6\u201d)","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-init-/#init","text":"Builder(application: Application , torServiceNotificationBuilder: Builder, backgroundManagerPolicy: Policy, buildConfigVersionCode: Int , defaultTorSettings: ApplicationDefaultTorSettings , geoipAssetPath: String , geoip6AssetPath: String ) The TorServiceController.Builder is where you get to customize how TorService works for your application. Call it in Application.onCreate and follow along. // private fun generateTorServiceNotificationBuilder(context: Context): ServiceNotification.Builder { return ServiceNotification . Builder ( channelName = \"TOPL-Android Demo\" , channelDescription = \"TorOnionProxyLibrary-Android Demo\" , channelID = \"TOPL-Android Demo\" , notificationID = 615 ) . setImageTorNetworkingEnabled ( drawableRes = R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( drawableRes = R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( drawableRes = R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( drawableRes = R . drawable . tor_stat_notifyerr ) . setVisibility ( visibility = NotificationCompat . VISIBILITY_PRIVATE ) . setCustomColor ( colorRes = R . color . primaryColor ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) . showNotification ( show = true ) // Set the notification's contentIntent for when the user clicks the notification . also { builder -> context . applicationContext . packageManager ?. getLaunchIntentForPackage ( context . applicationContext . packageName ) ?. let { intent -> // Set in your manifest for the launch activity so the intent won't launch // a new activity over top of your already created activity if the app is // open when the user clicks the notification: // // android:launchMode=\"singleInstance\" // // For more info on launchMode and Activity Intent flags, see: // // https://medium.com/swlh/truly-understand-tasks-and-back-stack-intent-flags-of-activity-2a137c401eca builder . setContentIntent ( PendingIntent . getActivity ( context . applicationContext , 0 , // Your desired request code intent , 0 // flags // can also include a bundle if desired ) ) } } // } // private fun generateBackgroundManagerPolicy(): BackgroundManager.Builder.Policy { return BackgroundManager . Builder () // All available options present. Only 1 is able to be chosen. . respectResourcesWhileInBackground ( secondsFrom5To45 = 20 ) //.runServiceInForeground(killAppIfTaskIsRemoved = true) // } // private fun setupTorServices(application: Application, torConfigFiles: TorConfigFiles ) { TorServiceController . Builder ( application = application , torServiceNotificationBuilder = generateTorServiceNotificationBuilder ( application ), backgroundManagerPolicy = generateBackgroundManagerPolicy (), buildConfigVersionCode = BuildConfig . VERSION_CODE , // Can instantiate directly here then access it from // TorServiceController.Companion.getTorSettings() and cast what's returned // as MyTorSettings defaultTorSettings = MyTorSettings (), // These should live somewhere in your module's assets directory, // ex: my-project/my-application-module/src/main/assets/common/geoip // ex: my-project/my-application-module/src/main/assets/common/geoip6 geoipAssetPath = \"common/geoip\" , geoip6AssetPath = \"common/geoip6\" ) . addTimeToDisableNetworkDelay ( milliseconds = 1 _000L ) . addTimeToRestartTorDelay ( milliseconds = 100L ) . addTimeToStopServiceDelay ( milliseconds = 100L ) . disableStopServiceOnTaskRemoved ( disable = false ) . setBuildConfigDebug ( buildConfigDebug = BuildConfig . DEBUG ) // Can instantiate directly here then access it from // TorServiceController.Companion?.appEventBroadcaster and cast what's returned // as MyEventBroadcaster . setEventBroadcaster ( eventBroadcaster = MyEventBroadcaster ()) . setServiceExecutionHooks ( executionHooks = MyServiceExecutionHooks ()) // Only needed if you wish to customize the directories/files used by Tor if // the defaults aren't to your liking. . useCustomTorConfigFiles ( torConfigFiles = torConfigFiles ) . build () // }","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/-init-/#parameters","text":"application - Application , for obtaining context torServiceNotificationBuilder - The ServiceNotification.Builder for customizing TorService \u2018s notification backgroundManagerPolicy - The BackgroundManager.Builder.Policy to be executed while your application is in the background (the Recent App\u2019s tray). buildConfigVersionCode - send BuildConfig.VERSION_CODE . Mitigates copying of geoip files to app updates only defaultTorSettings - ApplicationDefaultTorSettings used to create your torrc file on start of Tor geoipAssetPath - The path to where you have your geoip file located (ex: in assets/common directory, send this variable \u201ccommon/geoip\u201d) geoip6AssetPath - The path to where you have your geoip6 file located (ex: in assets/common directory, send this variable \u201ccommon/geoip6\u201d)","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-disable-network-delay/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / addTimeToDisableNetworkDelay addTimeToDisableNetworkDelay \u00b6 fun addTimeToDisableNetworkDelay(milliseconds: Long ): Builder (source) Default is set to 6_000ms, (what this method adds time to). When network connectivity is lost a delay is had before setting Tor\u2019s config \u201cDisableNetwork\u201d to true, in case connectivity is re-gained within the delay period. Tor is not stopped on connectivity change, but the network setting will be disabled to inhibit continual launching and building of circuits (which drains the battery). This delay is particularly useful when setting ports to \u201cauto\u201d because disabling Tor\u2019s network and then re-enabling it (when connectivity is regained) will set up listeners on different ports. The delay also helps in stabilizing longer running network calls amidst areas where the User may have bad service. The calls will simply continue if connectivity is regained within the delay period and ports will not be cycled (if using \u201cauto\u201d). Parameters \u00b6 milliseconds - A value greater than 0 See Also io.matthewnelson.topl_service.service.components.actions.ServiceAction.SetDisableNetwork io.matthewnelson.topl_service.service.components.actions.ServiceActionProcessor.processServiceAction","title":"Add time to disable network delay"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-disable-network-delay/#addtimetodisablenetworkdelay","text":"fun addTimeToDisableNetworkDelay(milliseconds: Long ): Builder (source) Default is set to 6_000ms, (what this method adds time to). When network connectivity is lost a delay is had before setting Tor\u2019s config \u201cDisableNetwork\u201d to true, in case connectivity is re-gained within the delay period. Tor is not stopped on connectivity change, but the network setting will be disabled to inhibit continual launching and building of circuits (which drains the battery). This delay is particularly useful when setting ports to \u201cauto\u201d because disabling Tor\u2019s network and then re-enabling it (when connectivity is regained) will set up listeners on different ports. The delay also helps in stabilizing longer running network calls amidst areas where the User may have bad service. The calls will simply continue if connectivity is regained within the delay period and ports will not be cycled (if using \u201cauto\u201d).","title":"addTimeToDisableNetworkDelay"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-disable-network-delay/#parameters","text":"milliseconds - A value greater than 0 See Also io.matthewnelson.topl_service.service.components.actions.ServiceAction.SetDisableNetwork io.matthewnelson.topl_service.service.components.actions.ServiceActionProcessor.processServiceAction","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-restart-tor-delay/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / addTimeToRestartTorDelay addTimeToRestartTorDelay \u00b6 fun addTimeToRestartTorDelay(milliseconds: Long ): Builder (source) Default is set to 500ms, (what this method adds time to). A slight delay is required when starting and stopping Tor to allow the Process for which it is running in to settle. This method adds time to the cautionary delay between execution of stopTor and startTor, which are the individual calls executed when using the restartTor method. The call to restartTor executes individual commands to: stop tor + delay (300ms) delay (500ms) <---------------------- what this method will add to start tor + delay (300ms) Parameters \u00b6 milliseconds - A value greater than 0 See Also io.matthewnelson.topl_service.service.components.actions.ServiceAction.RestartTor io.matthewnelson.topl_service.service.components.actions.ServiceActionProcessor.processServiceAction","title":"Add time to restart tor delay"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-restart-tor-delay/#addtimetorestarttordelay","text":"fun addTimeToRestartTorDelay(milliseconds: Long ): Builder (source) Default is set to 500ms, (what this method adds time to). A slight delay is required when starting and stopping Tor to allow the Process for which it is running in to settle. This method adds time to the cautionary delay between execution of stopTor and startTor, which are the individual calls executed when using the restartTor method. The call to restartTor executes individual commands to: stop tor + delay (300ms) delay (500ms) <---------------------- what this method will add to start tor + delay (300ms)","title":"addTimeToRestartTorDelay"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-restart-tor-delay/#parameters","text":"milliseconds - A value greater than 0 See Also io.matthewnelson.topl_service.service.components.actions.ServiceAction.RestartTor io.matthewnelson.topl_service.service.components.actions.ServiceActionProcessor.processServiceAction","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-stop-service-delay/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / addTimeToStopServiceDelay addTimeToStopServiceDelay \u00b6 fun addTimeToStopServiceDelay(milliseconds: Long ): Builder (source) Default is set to 100ms (what this method adds time to). A slight delay is required when starting and stopping Tor to allow the Process for which it is running in to settle. This method adds time to the cautionary delay between execution of stopping Tor and stopping TorService . The call to stopTor executes individual commands to: stop tor + delay (300ms) delay (100ms) <---------------------- what this method will add to stop service Parameters \u00b6 milliseconds - A value greater than 0 See Also io.matthewnelson.topl_service.service.components.actions.ServiceAction.Stop io.matthewnelson.topl_service.service.components.actions.ServiceActionProcessor.processServiceAction","title":"Add time to stop service delay"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-stop-service-delay/#addtimetostopservicedelay","text":"fun addTimeToStopServiceDelay(milliseconds: Long ): Builder (source) Default is set to 100ms (what this method adds time to). A slight delay is required when starting and stopping Tor to allow the Process for which it is running in to settle. This method adds time to the cautionary delay between execution of stopping Tor and stopping TorService . The call to stopTor executes individual commands to: stop tor + delay (300ms) delay (100ms) <---------------------- what this method will add to stop service","title":"addTimeToStopServiceDelay"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/add-time-to-stop-service-delay/#parameters","text":"milliseconds - A value greater than 0 See Also io.matthewnelson.topl_service.service.components.actions.ServiceAction.Stop io.matthewnelson.topl_service.service.components.actions.ServiceActionProcessor.processServiceAction","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/build/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / build build \u00b6 fun build(): Unit (source) Initializes TorService setup and enables the ability to call methods from the Companion object w/o throwing exceptions. See Builder for code samples. Exceptions \u00b6 IllegalArgumentException - If disableStopServiceOnTaskRemoved was elected and your selected BackgroundManager.Builder.Policy is not io.matthewnelson.topl_service_base.BaseServiceConsts.BackgroundPolicy.RUN_IN_FOREGROUND and/or BackgroundManager.Builder.killAppIfTaskIsRemoved is not true","title":"Build"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/build/#build","text":"fun build(): Unit (source) Initializes TorService setup and enables the ability to call methods from the Companion object w/o throwing exceptions. See Builder for code samples.","title":"build"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/build/#exceptions","text":"IllegalArgumentException - If disableStopServiceOnTaskRemoved was elected and your selected BackgroundManager.Builder.Policy is not io.matthewnelson.topl_service_base.BaseServiceConsts.BackgroundPolicy.RUN_IN_FOREGROUND and/or BackgroundManager.Builder.killAppIfTaskIsRemoved is not true","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/disable-stop-service-on-task-removed/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / disableStopServiceOnTaskRemoved disableStopServiceOnTaskRemoved \u00b6 @JvmOverloads fun disableStopServiceOnTaskRemoved(disable: Boolean = true): Builder (source) When your task is removed from the Recent App\u2019s tray, TorService.onTaskRemoved is triggered. Default behaviour is to stop Tor, and then TorService . Electing this option will inhibit the default behaviour from being carried out.","title":"Disable stop service on task removed"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/disable-stop-service-on-task-removed/#disablestopserviceontaskremoved","text":"@JvmOverloads fun disableStopServiceOnTaskRemoved(disable: Boolean = true): Builder (source) When your task is removed from the Recent App\u2019s tray, TorService.onTaskRemoved is triggered. Default behaviour is to stop Tor, and then TorService . Electing this option will inhibit the default behaviour from being carried out.","title":"disableStopServiceOnTaskRemoved"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-build-config-debug/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / setBuildConfigDebug setBuildConfigDebug \u00b6 fun setBuildConfigDebug(buildConfigDebug: Boolean ): Builder (source) This makes it such that on your Application\u2019s Debug builds, the topl-core and topl-service modules will provide you with Logcat messages (when TorSettings.hasDebugLogs is enabled). For your Release builds no Logcat messaging will be provided, but you will still get the same messages sent to your EventBroadcaster if you set it via Builder.setEventBroadcaster . Parameters \u00b6 buildConfigDebug - Send BuildConfig.DEBUG See Also io.matthewnelson.topl_core.broadcaster.BroadcastLogger","title":"Set build config debug"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-build-config-debug/#setbuildconfigdebug","text":"fun setBuildConfigDebug(buildConfigDebug: Boolean ): Builder (source) This makes it such that on your Application\u2019s Debug builds, the topl-core and topl-service modules will provide you with Logcat messages (when TorSettings.hasDebugLogs is enabled). For your Release builds no Logcat messaging will be provided, but you will still get the same messages sent to your EventBroadcaster if you set it via Builder.setEventBroadcaster .","title":"setBuildConfigDebug"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-build-config-debug/#parameters","text":"buildConfigDebug - Send BuildConfig.DEBUG See Also io.matthewnelson.topl_core.broadcaster.BroadcastLogger","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-event-broadcaster/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / setEventBroadcaster setEventBroadcaster \u00b6 fun setEventBroadcaster(eventBroadcaster: TorServiceEventBroadcaster ): Builder (source) Get broadcasts piped to your Application to do with them what you desire. What you send this will live at Companion.appEventBroadcaster for the remainder of your application\u2019s lifecycle to refer to elsewhere in your App. NOTE: You will, ofc, have to cast Companion.appEventBroadcaster as whatever your class actually is.","title":"Set event broadcaster"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-event-broadcaster/#seteventbroadcaster","text":"fun setEventBroadcaster(eventBroadcaster: TorServiceEventBroadcaster ): Builder (source) Get broadcasts piped to your Application to do with them what you desire. What you send this will live at Companion.appEventBroadcaster for the remainder of your application\u2019s lifecycle to refer to elsewhere in your App. NOTE: You will, ofc, have to cast Companion.appEventBroadcaster as whatever your class actually is.","title":"setEventBroadcaster"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-service-execution-hooks/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / setServiceExecutionHooks setServiceExecutionHooks \u00b6 fun setServiceExecutionHooks(executionHooks: ServiceExecutionHooks ): Builder (source) Implement and set hooks to be executed in TorService.onCreate , and ServiceActionProcessor.processServiceAction prior to starting of Tor, and post stopping of Tor.","title":"Set service execution hooks"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/set-service-execution-hooks/#setserviceexecutionhooks","text":"fun setServiceExecutionHooks(executionHooks: ServiceExecutionHooks ): Builder (source) Implement and set hooks to be executed in TorService.onCreate , and ServiceActionProcessor.processServiceAction prior to starting of Tor, and post stopping of Tor.","title":"setServiceExecutionHooks"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/use-custom-tor-config-files/","text":"topl-service / io.matthewnelson.topl_service / TorServiceController / Builder / useCustomTorConfigFiles useCustomTorConfigFiles \u00b6 fun useCustomTorConfigFiles(torConfigFiles: TorConfigFiles ): Builder (source) If you wish to customize the file structure of how Tor is installed in your app, you can do so by instantiating your own TorConfigFiles and customizing it via the TorConfigFiles.Builder , or overridden method TorConfigFiles.createConfig . By default, TorService will call TorConfigFiles.createConfig using your Context.getApplicationContext to set up a standard directory hierarchy for Tor to operate with. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your module's src/main/jniLibs directory. If you are getting your // executable files via a dependency be sure to consult that Library's documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // } Return Builder See Also Builder.build","title":"Use custom tor config files"},{"location":"topl-service/io.matthewnelson.topl_service/-tor-service-controller/-builder/use-custom-tor-config-files/#usecustomtorconfigfiles","text":"fun useCustomTorConfigFiles(torConfigFiles: TorConfigFiles ): Builder (source) If you wish to customize the file structure of how Tor is installed in your app, you can do so by instantiating your own TorConfigFiles and customizing it via the TorConfigFiles.Builder , or overridden method TorConfigFiles.createConfig . By default, TorService will call TorConfigFiles.createConfig using your Context.getApplicationContext to set up a standard directory hierarchy for Tor to operate with. // fun customTorConfigFilesSetup(context: Context): TorConfigFiles { // This is modifying the directory hierarchy from TorService's // default setup. For example, if you are using binaries for Tor that // are named differently that that expressed in TorConfigFiles.createConfig() // Post Android API 28 requires that executable files be contained in your // application's data/app directory, as they can no longer execute from data/data. val installDir = File ( context . applicationInfo . nativeLibraryDir ) // Will create a directory within your application's data/data dir val configDir = context . getDir ( \"torservice\" , Context . MODE_PRIVATE ) val builder = TorConfigFiles . Builder ( installDir , configDir ) // Customize the tor executable file name. Requires that the executable file // be in your module's src/main/jniLibs directory. If you are getting your // executable files via a dependency be sure to consult that Library's documentation. builder . torExecutable ( File ( installDir , \"libtor.so\" )) // customize further via the builder methods... return builder . build () // } Return Builder See Also Builder.build","title":"useCustomTorConfigFiles"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/","text":"topl-service / io.matthewnelson.topl_service.lifecycle Package io.matthewnelson.topl_service.lifecycle \u00b6 Types \u00b6 Name Summary BackgroundManager When your application is sent to the background (the Recent App\u2019s tray or lock screen), the chosen BackgroundManager.Builder.Policy will be triggered. class BackgroundManager : ServiceConsts , LifecycleObserver","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/#package-iomatthewnelsontopl_servicelifecycle","text":"","title":"Package io.matthewnelson.topl_service.lifecycle"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/#types","text":"Name Summary BackgroundManager When your application is sent to the background (the Recent App\u2019s tray or lock screen), the chosen BackgroundManager.Builder.Policy will be triggered. class BackgroundManager : ServiceConsts , LifecycleObserver","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/","text":"topl-service / io.matthewnelson.topl_service.lifecycle / BackgroundManager BackgroundManager \u00b6 class BackgroundManager : ServiceConsts , LifecycleObserver (source) When your application is sent to the background (the Recent App\u2019s tray or lock screen), the chosen BackgroundManager.Builder.Policy will be triggered. Additionally, there are 2 values for you to query if needed to give you context surrounding your application\u2019s background state; taskIsInForeground and taskIsRemovedFromRecentApps . If brought back into the foreground by the user: Before Policy execution : Execution is canceled. If BaseService.lastAcceptedServiceAction was not ServiceActionName.STOP , a startService call is made to ensure it\u2019s started. After Policy execution : If BaseService.lastAcceptedServiceAction was not ServiceActionName.STOP , a startService call is made to ensure it\u2019s started. See io.matthewnelson.topl_service.service.components.binding.BaseServiceBinder , BaseService.updateLastAcceptedServiceAction , and TorService.onTaskRemoved for more information. While your application is in the foreground the only way to stop the service is by calling io.matthewnelson.topl_service.TorServiceController.stopTor , or via the io.matthewnelson.topl_service.notification.ServiceNotification Action (if enabled); The OS will not kill a service started using Context.startService & Context.bindService (how TorService is started) while in the foreground. When the user sends your application to the Recent App\u2019s tray though, to recoup resources the OS will kill your app after being idle for a period of time (random AF\u2026 typically 0.75m to 1.25m if the device\u2019s memory is being used heavily) if the service is not moved to the Foreground to inhibit this. This is not an issue if the user removes the task before the OS kills the app, as Tor will be able to shutdown properly and the service will stop. This is where Services get sketchy (especially when trying to implement an always running service for networking), and is the purpose of the BackgroundManager class. This class starts your chosen BackgroundManager.Builder.Policy as soon as your application is sent to the background. It facilitates a more declarative, flexible operation to fit Library users\u2019 needs. See the BackgroundManager.Builder for more detail. Parameters \u00b6 policy - The chosen BackgroundPolicy to be executed. executionDelay - Length of time before the policy gets executed after the application is sent to the background. serviceClass - The Service class being managed bindServiceFlag - The flag to be used when binding to the service See Also io.matthewnelson.topl_service.service.components.binding.BaseServiceBinder.executeBackgroundPolicyJob io.matthewnelson.topl_service.service.components.binding.BaseServiceBinder.cancelExecuteBackgroundPolicyJob Types \u00b6 Name Summary Builder This BackgroundManager.Builder sets how you want the service to operate while your app is in the background (the Recent App\u2019s tray or lock screen), such that things run reliably based off of your application\u2019s needs. class Builder Companion Object Properties \u00b6 Name Summary taskIsInForeground var taskIsInForeground: Boolean taskIsRemovedFromRecentApps var taskIsRemovedFromRecentApps: Boolean","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/#backgroundmanager","text":"class BackgroundManager : ServiceConsts , LifecycleObserver (source) When your application is sent to the background (the Recent App\u2019s tray or lock screen), the chosen BackgroundManager.Builder.Policy will be triggered. Additionally, there are 2 values for you to query if needed to give you context surrounding your application\u2019s background state; taskIsInForeground and taskIsRemovedFromRecentApps . If brought back into the foreground by the user: Before Policy execution : Execution is canceled. If BaseService.lastAcceptedServiceAction was not ServiceActionName.STOP , a startService call is made to ensure it\u2019s started. After Policy execution : If BaseService.lastAcceptedServiceAction was not ServiceActionName.STOP , a startService call is made to ensure it\u2019s started. See io.matthewnelson.topl_service.service.components.binding.BaseServiceBinder , BaseService.updateLastAcceptedServiceAction , and TorService.onTaskRemoved for more information. While your application is in the foreground the only way to stop the service is by calling io.matthewnelson.topl_service.TorServiceController.stopTor , or via the io.matthewnelson.topl_service.notification.ServiceNotification Action (if enabled); The OS will not kill a service started using Context.startService & Context.bindService (how TorService is started) while in the foreground. When the user sends your application to the Recent App\u2019s tray though, to recoup resources the OS will kill your app after being idle for a period of time (random AF\u2026 typically 0.75m to 1.25m if the device\u2019s memory is being used heavily) if the service is not moved to the Foreground to inhibit this. This is not an issue if the user removes the task before the OS kills the app, as Tor will be able to shutdown properly and the service will stop. This is where Services get sketchy (especially when trying to implement an always running service for networking), and is the purpose of the BackgroundManager class. This class starts your chosen BackgroundManager.Builder.Policy as soon as your application is sent to the background. It facilitates a more declarative, flexible operation to fit Library users\u2019 needs. See the BackgroundManager.Builder for more detail.","title":"BackgroundManager"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/#parameters","text":"policy - The chosen BackgroundPolicy to be executed. executionDelay - Length of time before the policy gets executed after the application is sent to the background. serviceClass - The Service class being managed bindServiceFlag - The flag to be used when binding to the service See Also io.matthewnelson.topl_service.service.components.binding.BaseServiceBinder.executeBackgroundPolicyJob io.matthewnelson.topl_service.service.components.binding.BaseServiceBinder.cancelExecuteBackgroundPolicyJob","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/#types","text":"Name Summary Builder This BackgroundManager.Builder sets how you want the service to operate while your app is in the background (the Recent App\u2019s tray or lock screen), such that things run reliably based off of your application\u2019s needs. class Builder","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/#companion-object-properties","text":"Name Summary taskIsInForeground var taskIsInForeground: Boolean taskIsRemovedFromRecentApps var taskIsRemovedFromRecentApps: Boolean","title":"Companion Object Properties"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/task-is-in-foreground/","text":"topl-service / io.matthewnelson.topl_service.lifecycle / BackgroundManager / taskIsInForeground taskIsInForeground \u00b6 @JvmStatic var taskIsInForeground: Boolean (source)","title":"Task is in foreground"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/task-is-in-foreground/#taskisinforeground","text":"@JvmStatic var taskIsInForeground: Boolean (source)","title":"taskIsInForeground"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/task-is-removed-from-recent-apps/","text":"topl-service / io.matthewnelson.topl_service.lifecycle / BackgroundManager / taskIsRemovedFromRecentApps taskIsRemovedFromRecentApps \u00b6 @JvmStatic var taskIsRemovedFromRecentApps: Boolean (source)","title":"Task is removed from recent apps"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/task-is-removed-from-recent-apps/#taskisremovedfromrecentapps","text":"@JvmStatic var taskIsRemovedFromRecentApps: Boolean (source)","title":"taskIsRemovedFromRecentApps"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/","text":"topl-service / io.matthewnelson.topl_service.lifecycle / BackgroundManager / Builder Builder \u00b6 class Builder (source) This BackgroundManager.Builder sets how you want the service to operate while your app is in the background (the Recent App\u2019s tray or lock screen), such that things run reliably based off of your application\u2019s needs. When your application is brought back into the foreground your Policy is canceled and, if BaseService.lastAcceptedServiceAction was not to Stop the service, a startup command is issued to bring it back to the started state no matter if it is still running or not. // private fun generateBackgroundManagerPolicy(): BackgroundManager.Builder.Policy { return BackgroundManager . Builder () // All available options present. Only 1 is able to be chosen. . respectResourcesWhileInBackground ( secondsFrom5To45 = 20 ) //.runServiceInForeground(killAppIfTaskIsRemoved = true) // } Types \u00b6 Name Summary Policy Holds the chosen policy to be built in io.matthewnelson.topl_service.TorServiceController.Builder.build . class Policy Constructors \u00b6 Name Summary <init> This BackgroundManager.Builder sets how you want the service to operate while your app is in the background (the Recent App\u2019s tray or lock screen), such that things run reliably based off of your application\u2019s needs. Builder() Functions \u00b6 Name Summary respectResourcesWhileInBackground Stops TorService after being in the background for the declared secondsFrom5To45 . fun respectResourcesWhileInBackground(secondsFrom5To45: Int ? = null): Policy runServiceInForeground Electing this option will, when your application is sent to the background, immediately move TorService to the Foreground. If the user returns to your application, TorService will then be backgrounded. fun runServiceInForeground(killAppIfTaskIsRemoved: Boolean = false): Policy","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/#builder","text":"class Builder (source) This BackgroundManager.Builder sets how you want the service to operate while your app is in the background (the Recent App\u2019s tray or lock screen), such that things run reliably based off of your application\u2019s needs. When your application is brought back into the foreground your Policy is canceled and, if BaseService.lastAcceptedServiceAction was not to Stop the service, a startup command is issued to bring it back to the started state no matter if it is still running or not. // private fun generateBackgroundManagerPolicy(): BackgroundManager.Builder.Policy { return BackgroundManager . Builder () // All available options present. Only 1 is able to be chosen. . respectResourcesWhileInBackground ( secondsFrom5To45 = 20 ) //.runServiceInForeground(killAppIfTaskIsRemoved = true) // }","title":"Builder"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/#types","text":"Name Summary Policy Holds the chosen policy to be built in io.matthewnelson.topl_service.TorServiceController.Builder.build . class Policy","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/#constructors","text":"Name Summary <init> This BackgroundManager.Builder sets how you want the service to operate while your app is in the background (the Recent App\u2019s tray or lock screen), such that things run reliably based off of your application\u2019s needs. Builder()","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/#functions","text":"Name Summary respectResourcesWhileInBackground Stops TorService after being in the background for the declared secondsFrom5To45 . fun respectResourcesWhileInBackground(secondsFrom5To45: Int ? = null): Policy runServiceInForeground Electing this option will, when your application is sent to the background, immediately move TorService to the Foreground. If the user returns to your application, TorService will then be backgrounded. fun runServiceInForeground(killAppIfTaskIsRemoved: Boolean = false): Policy","title":"Functions"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/-init-/","text":"topl-service / io.matthewnelson.topl_service.lifecycle / BackgroundManager / Builder / <init> <init> \u00b6 Builder() This BackgroundManager.Builder sets how you want the service to operate while your app is in the background (the Recent App\u2019s tray or lock screen), such that things run reliably based off of your application\u2019s needs. When your application is brought back into the foreground your Policy is canceled and, if BaseService.lastAcceptedServiceAction was not to Stop the service, a startup command is issued to bring it back to the started state no matter if it is still running or not. // private fun generateBackgroundManagerPolicy(): BackgroundManager.Builder.Policy { return BackgroundManager . Builder () // All available options present. Only 1 is able to be chosen. . respectResourcesWhileInBackground ( secondsFrom5To45 = 20 ) //.runServiceInForeground(killAppIfTaskIsRemoved = true) // }","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/-init-/#init","text":"Builder() This BackgroundManager.Builder sets how you want the service to operate while your app is in the background (the Recent App\u2019s tray or lock screen), such that things run reliably based off of your application\u2019s needs. When your application is brought back into the foreground your Policy is canceled and, if BaseService.lastAcceptedServiceAction was not to Stop the service, a startup command is issued to bring it back to the started state no matter if it is still running or not. // private fun generateBackgroundManagerPolicy(): BackgroundManager.Builder.Policy { return BackgroundManager . Builder () // All available options present. Only 1 is able to be chosen. . respectResourcesWhileInBackground ( secondsFrom5To45 = 20 ) //.runServiceInForeground(killAppIfTaskIsRemoved = true) // }","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/-policy/","text":"topl-service / io.matthewnelson.topl_service.lifecycle / BackgroundManager / Builder / Policy Policy \u00b6 class Policy (source) Holds the chosen policy to be built in io.matthewnelson.topl_service.TorServiceController.Builder.build . Parameters \u00b6 policyBuilder - The BackgroundManager.Builder to be built during initialization","title":" policy"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/-policy/#policy","text":"class Policy (source) Holds the chosen policy to be built in io.matthewnelson.topl_service.TorServiceController.Builder.build .","title":"Policy"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/-policy/#parameters","text":"policyBuilder - The BackgroundManager.Builder to be built during initialization","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/respect-resources-while-in-background/","text":"topl-service / io.matthewnelson.topl_service.lifecycle / BackgroundManager / Builder / respectResourcesWhileInBackground respectResourcesWhileInBackground \u00b6 @JvmOverloads fun respectResourcesWhileInBackground(secondsFrom5To45: Int ? = null): Policy (source) Stops TorService after being in the background for the declared secondsFrom5To45 . Your application won\u2019t go through it\u2019s normal Application.onCreate process unless it was killed, but TorService may have been stopped when the policy gets executed. Electing this option ensures TorService gets restarted in a more reliable manner then returning Context.START_STICKY in TorService.onStartCommand . It also allows for a proper shutdown of Tor prior to the service being stopped instead of it being killed along with your application (which causes problems sometimes). If killed by the OS then this gets garbage collected such that in the event the user brings your application back into the foreground (after it had been killed), this will be re-instantiated when going through Application.onCreate again, and TorService started by however you have it implemented. Parameters \u00b6 secondsFrom5To45 - ? Seconds before the Policy is executed after the Application goes to the background. Sending null will use the default (30s) Return BackgroundManager.Builder.Policy To use when initializing io.matthewnelson.topl_service.TorServiceController.Builder","title":"Respect resources while in background"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/respect-resources-while-in-background/#respectresourceswhileinbackground","text":"@JvmOverloads fun respectResourcesWhileInBackground(secondsFrom5To45: Int ? = null): Policy (source) Stops TorService after being in the background for the declared secondsFrom5To45 . Your application won\u2019t go through it\u2019s normal Application.onCreate process unless it was killed, but TorService may have been stopped when the policy gets executed. Electing this option ensures TorService gets restarted in a more reliable manner then returning Context.START_STICKY in TorService.onStartCommand . It also allows for a proper shutdown of Tor prior to the service being stopped instead of it being killed along with your application (which causes problems sometimes). If killed by the OS then this gets garbage collected such that in the event the user brings your application back into the foreground (after it had been killed), this will be re-instantiated when going through Application.onCreate again, and TorService started by however you have it implemented.","title":"respectResourcesWhileInBackground"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/respect-resources-while-in-background/#parameters","text":"secondsFrom5To45 - ? Seconds before the Policy is executed after the Application goes to the background. Sending null will use the default (30s) Return BackgroundManager.Builder.Policy To use when initializing io.matthewnelson.topl_service.TorServiceController.Builder","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/run-service-in-foreground/","text":"topl-service / io.matthewnelson.topl_service.lifecycle / BackgroundManager / Builder / runServiceInForeground runServiceInForeground \u00b6 @JvmOverloads fun runServiceInForeground(killAppIfTaskIsRemoved: Boolean = false): Policy (source) Electing this option will, when your application is sent to the background, immediately move TorService to the Foreground. If the user returns to your application, TorService will then be backgrounded. Some things to note about your application\u2019s behaviour with this option: If the user sends your app to the recent App\u2019s tray and then swipes it away, TorService.onTaskRemoved will stop Tor, and then TorService . Because of how shitty the Service APIs are, your application will not be killed like one would expect, thus not going through Application.onCreate if the user re-launches your application. In the event of being re-launched in the aforementioned state, applicationMovedToForeground is called and Tor will be started again to match the Service\u2019s State for which it was left, prior to \u201cterminating\u201d your application. Even while the Service has been properly stopped and everything cleaned up, your application will continue running and not be killed (Again, Service APIs\u2026). If TorService is stopped, and then your application is cleared from the recent apps tray, your application will be killed. Parameters \u00b6 killAppIfTaskIsRemoved - If set to true , your Application\u2019s Process will be killed in TorService.onDestroy if the user removed the task from the recent app\u2019s tray and has not returned to the application before killAppProcess is called.","title":"Run service in foreground"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/run-service-in-foreground/#runserviceinforeground","text":"@JvmOverloads fun runServiceInForeground(killAppIfTaskIsRemoved: Boolean = false): Policy (source) Electing this option will, when your application is sent to the background, immediately move TorService to the Foreground. If the user returns to your application, TorService will then be backgrounded. Some things to note about your application\u2019s behaviour with this option: If the user sends your app to the recent App\u2019s tray and then swipes it away, TorService.onTaskRemoved will stop Tor, and then TorService . Because of how shitty the Service APIs are, your application will not be killed like one would expect, thus not going through Application.onCreate if the user re-launches your application. In the event of being re-launched in the aforementioned state, applicationMovedToForeground is called and Tor will be started again to match the Service\u2019s State for which it was left, prior to \u201cterminating\u201d your application. Even while the Service has been properly stopped and everything cleaned up, your application will continue running and not be killed (Again, Service APIs\u2026). If TorService is stopped, and then your application is cleared from the recent apps tray, your application will be killed.","title":"runServiceInForeground"},{"location":"topl-service/io.matthewnelson.topl_service.lifecycle/-background-manager/-builder/run-service-in-foreground/#parameters","text":"killAppIfTaskIsRemoved - If set to true , your Application\u2019s Process will be killed in TorService.onDestroy if the user removed the task from the recent app\u2019s tray and has not returned to the application before killAppProcess is called.","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/","text":"topl-service / io.matthewnelson.topl_service.notification Package io.matthewnelson.topl_service.notification \u00b6 Types \u00b6 Name Summary ServiceNotification Everything to do with TorService \u2018s notification. class ServiceNotification : ServiceConsts","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.notification/#package-iomatthewnelsontopl_servicenotification","text":"","title":"Package io.matthewnelson.topl_service.notification"},{"location":"topl-service/io.matthewnelson.topl_service.notification/#types","text":"Name Summary ServiceNotification Everything to do with TorService \u2018s notification. class ServiceNotification : ServiceConsts","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification ServiceNotification \u00b6 class ServiceNotification : ServiceConsts (source) Everything to do with TorService \u2018s notification. See Also Builder Types \u00b6 Name Summary Builder Where you get to customize how your notification will look and function. class Builder Properties \u00b6 Name Summary activityIntentBundle var activityIntentBundle: Bundle ? activityIntentExtras var activityIntentExtras: String ? activityIntentKey var activityIntentKey: String ? activityIntentRequestCode var activityIntentRequestCode: Int activityWhenTapped var activityWhenTapped: Class <*>? colorWhenConnected var colorWhenConnected: Int contentPendingIntent var contentPendingIntent: PendingIntent ? enableRestartButton var enableRestartButton: Boolean enableStopButton var enableStopButton: Boolean imageDataTransfer var imageDataTransfer: Int imageError var imageError: Int imageNetworkDisabled var imageNetworkDisabled: Int imageNetworkEnabled var imageNetworkEnabled: Int showNotification var showNotification: Boolean visibility var visibility: Int","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/#servicenotification","text":"class ServiceNotification : ServiceConsts (source) Everything to do with TorService \u2018s notification. See Also Builder","title":"ServiceNotification"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/#types","text":"Name Summary Builder Where you get to customize how your notification will look and function. class Builder","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/#properties","text":"Name Summary activityIntentBundle var activityIntentBundle: Bundle ? activityIntentExtras var activityIntentExtras: String ? activityIntentKey var activityIntentKey: String ? activityIntentRequestCode var activityIntentRequestCode: Int activityWhenTapped var activityWhenTapped: Class <*>? colorWhenConnected var colorWhenConnected: Int contentPendingIntent var contentPendingIntent: PendingIntent ? enableRestartButton var enableRestartButton: Boolean enableStopButton var enableStopButton: Boolean imageDataTransfer var imageDataTransfer: Int imageError var imageError: Int imageNetworkDisabled var imageNetworkDisabled: Int imageNetworkEnabled var imageNetworkEnabled: Int showNotification var showNotification: Boolean visibility var visibility: Int","title":"Properties"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-intent-bundle/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / activityIntentBundle activityIntentBundle \u00b6 var activityIntentBundle: Bundle ? (source)","title":"Activity intent bundle"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-intent-bundle/#activityintentbundle","text":"var activityIntentBundle: Bundle ? (source)","title":"activityIntentBundle"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-intent-extras/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / activityIntentExtras activityIntentExtras \u00b6 var activityIntentExtras: String ? (source)","title":"Activity intent extras"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-intent-extras/#activityintentextras","text":"var activityIntentExtras: String ? (source)","title":"activityIntentExtras"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-intent-key/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / activityIntentKey activityIntentKey \u00b6 var activityIntentKey: String ? (source)","title":"Activity intent key"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-intent-key/#activityintentkey","text":"var activityIntentKey: String ? (source)","title":"activityIntentKey"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-intent-request-code/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / activityIntentRequestCode activityIntentRequestCode \u00b6 var activityIntentRequestCode: Int (source)","title":"Activity intent request code"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-intent-request-code/#activityintentrequestcode","text":"var activityIntentRequestCode: Int (source)","title":"activityIntentRequestCode"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-when-tapped/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / activityWhenTapped activityWhenTapped \u00b6 var activityWhenTapped: Class <*>? (source)","title":"Activity when tapped"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/activity-when-tapped/#activitywhentapped","text":"var activityWhenTapped: Class <*>? (source)","title":"activityWhenTapped"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/color-when-connected/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / colorWhenConnected colorWhenConnected \u00b6 var colorWhenConnected: Int (source)","title":"Color when connected"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/color-when-connected/#colorwhenconnected","text":"var colorWhenConnected: Int (source)","title":"colorWhenConnected"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/content-pending-intent/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / contentPendingIntent contentPendingIntent \u00b6 var contentPendingIntent: PendingIntent ? (source)","title":"Content pending intent"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/content-pending-intent/#contentpendingintent","text":"var contentPendingIntent: PendingIntent ? (source)","title":"contentPendingIntent"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/enable-restart-button/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / enableRestartButton enableRestartButton \u00b6 var enableRestartButton: Boolean (source)","title":"Enable restart button"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/enable-restart-button/#enablerestartbutton","text":"var enableRestartButton: Boolean (source)","title":"enableRestartButton"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/enable-stop-button/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / enableStopButton enableStopButton \u00b6 var enableStopButton: Boolean (source)","title":"Enable stop button"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/enable-stop-button/#enablestopbutton","text":"var enableStopButton: Boolean (source)","title":"enableStopButton"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/image-data-transfer/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / imageDataTransfer imageDataTransfer \u00b6 var imageDataTransfer: Int (source)","title":"Image data transfer"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/image-data-transfer/#imagedatatransfer","text":"var imageDataTransfer: Int (source)","title":"imageDataTransfer"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/image-error/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / imageError imageError \u00b6 var imageError: Int (source)","title":"Image error"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/image-error/#imageerror","text":"var imageError: Int (source)","title":"imageError"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/image-network-disabled/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / imageNetworkDisabled imageNetworkDisabled \u00b6 var imageNetworkDisabled: Int (source)","title":"Image network disabled"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/image-network-disabled/#imagenetworkdisabled","text":"var imageNetworkDisabled: Int (source)","title":"imageNetworkDisabled"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/image-network-enabled/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / imageNetworkEnabled imageNetworkEnabled \u00b6 var imageNetworkEnabled: Int (source)","title":"Image network enabled"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/image-network-enabled/#imagenetworkenabled","text":"var imageNetworkEnabled: Int (source)","title":"imageNetworkEnabled"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/show-notification/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / showNotification showNotification \u00b6 var showNotification: Boolean (source)","title":"Show notification"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/show-notification/#shownotification","text":"var showNotification: Boolean (source)","title":"showNotification"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/visibility/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / visibility visibility \u00b6 var visibility: Int (source)","title":"Visibility"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/visibility/#visibility","text":"var visibility: Int (source)","title":"visibility"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder Builder \u00b6 class Builder (source) Where you get to customize how your notification will look and function. A notification is required to be displayed while TorService is running in the Foreground. Even if you set Builder.showNotification to false, TorService is brought to the Foreground when the user removes your task from the recent apps tray in order to properly shut down Tor and clean up w/o being killed by the OS. // private fun generateTorServiceNotificationBuilder(context: Context): ServiceNotification.Builder { return ServiceNotification . Builder ( channelName = \"TOPL-Android Demo\" , channelDescription = \"TorOnionProxyLibrary-Android Demo\" , channelID = \"TOPL-Android Demo\" , notificationID = 615 ) . setImageTorNetworkingEnabled ( drawableRes = R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( drawableRes = R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( drawableRes = R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( drawableRes = R . drawable . tor_stat_notifyerr ) . setVisibility ( visibility = NotificationCompat . VISIBILITY_PRIVATE ) . setCustomColor ( colorRes = R . color . primaryColor ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) . showNotification ( show = true ) // Set the notification's contentIntent for when the user clicks the notification . also { builder -> context . applicationContext . packageManager ?. getLaunchIntentForPackage ( context . applicationContext . packageName ) ?. let { intent -> // Set in your manifest for the launch activity so the intent won't launch // a new activity over top of your already created activity if the app is // open when the user clicks the notification: // // android:launchMode=\"singleInstance\" // // For more info on launchMode and Activity Intent flags, see: // // https://medium.com/swlh/truly-understand-tasks-and-back-stack-intent-flags-of-activity-2a137c401eca builder . setContentIntent ( PendingIntent . getActivity ( context . applicationContext , 0 , // Your desired request code intent , 0 // flags // can also include a bundle if desired ) ) } } // } Parameters \u00b6 channelName - Your notification channel\u2019s name (Cannot be Empty). channelID - Your notification channel\u2019s ID (Cannot be Empty). channelDescription - Your notification channel\u2019s description (Cannot be Empty). notificationID - Your foreground notification\u2019s ID. Exceptions \u00b6 IllegalArgumentException - If String fields are empty. Constructors \u00b6 Name Summary <init> Where you get to customize how your notification will look and function. Builder(channelName: String , channelID: String , channelDescription: String , notificationID: Int ) Functions \u00b6 Name Summary enableTorRestartButton Disabled by Default fun enableTorRestartButton(enable: Boolean = true): Builder enableTorStopButton Disabled by Default fun enableTorStopButton(enable: Boolean = true): Builder setActivityToBeOpenedOnTap Do not use this method. fun ~~setActivityToBeOpenedOnTap~~(clazz: Class <*>, intentExtrasKey: String ?, intentExtras: String ?, intentRequestCode: Int ?): Builder setContentIntent Allows for full control over the PendingIntent used when the user taps the ServiceNotification . fun setContentIntent(pendingIntent: PendingIntent ?): Builder setContentIntentData Do not use this method. fun ~~setContentIntentData~~(bundle: Bundle ?, requestCode: Int ?): Builder setCustomColor Defaults to R.color.tor_service_white fun setCustomColor(colorRes: Int ): Builder setImageTorDataTransfer Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_dataxfer . fun setImageTorDataTransfer(drawableRes: Int ): Builder setImageTorErrors Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_notifyerr . fun setImageTorErrors(drawableRes: Int ): Builder setImageTorNetworkingDisabled Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_disabled . fun setImageTorNetworkingDisabled(drawableRes: Int ): Builder setImageTorNetworkingEnabled Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_enabled . fun setImageTorNetworkingEnabled(drawableRes: Int ): Builder setVisibility Defaults to NotificationVisibility.VISIBILITY_SECRET fun setVisibility(visibility: Int ): Builder showNotification Shown by Default. fun showNotification(show: Boolean = false): Builder","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/#builder","text":"class Builder (source) Where you get to customize how your notification will look and function. A notification is required to be displayed while TorService is running in the Foreground. Even if you set Builder.showNotification to false, TorService is brought to the Foreground when the user removes your task from the recent apps tray in order to properly shut down Tor and clean up w/o being killed by the OS. // private fun generateTorServiceNotificationBuilder(context: Context): ServiceNotification.Builder { return ServiceNotification . Builder ( channelName = \"TOPL-Android Demo\" , channelDescription = \"TorOnionProxyLibrary-Android Demo\" , channelID = \"TOPL-Android Demo\" , notificationID = 615 ) . setImageTorNetworkingEnabled ( drawableRes = R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( drawableRes = R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( drawableRes = R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( drawableRes = R . drawable . tor_stat_notifyerr ) . setVisibility ( visibility = NotificationCompat . VISIBILITY_PRIVATE ) . setCustomColor ( colorRes = R . color . primaryColor ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) . showNotification ( show = true ) // Set the notification's contentIntent for when the user clicks the notification . also { builder -> context . applicationContext . packageManager ?. getLaunchIntentForPackage ( context . applicationContext . packageName ) ?. let { intent -> // Set in your manifest for the launch activity so the intent won't launch // a new activity over top of your already created activity if the app is // open when the user clicks the notification: // // android:launchMode=\"singleInstance\" // // For more info on launchMode and Activity Intent flags, see: // // https://medium.com/swlh/truly-understand-tasks-and-back-stack-intent-flags-of-activity-2a137c401eca builder . setContentIntent ( PendingIntent . getActivity ( context . applicationContext , 0 , // Your desired request code intent , 0 // flags // can also include a bundle if desired ) ) } } // }","title":"Builder"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/#parameters","text":"channelName - Your notification channel\u2019s name (Cannot be Empty). channelID - Your notification channel\u2019s ID (Cannot be Empty). channelDescription - Your notification channel\u2019s description (Cannot be Empty). notificationID - Your foreground notification\u2019s ID.","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/#exceptions","text":"IllegalArgumentException - If String fields are empty.","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/#constructors","text":"Name Summary <init> Where you get to customize how your notification will look and function. Builder(channelName: String , channelID: String , channelDescription: String , notificationID: Int )","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/#functions","text":"Name Summary enableTorRestartButton Disabled by Default fun enableTorRestartButton(enable: Boolean = true): Builder enableTorStopButton Disabled by Default fun enableTorStopButton(enable: Boolean = true): Builder setActivityToBeOpenedOnTap Do not use this method. fun ~~setActivityToBeOpenedOnTap~~(clazz: Class <*>, intentExtrasKey: String ?, intentExtras: String ?, intentRequestCode: Int ?): Builder setContentIntent Allows for full control over the PendingIntent used when the user taps the ServiceNotification . fun setContentIntent(pendingIntent: PendingIntent ?): Builder setContentIntentData Do not use this method. fun ~~setContentIntentData~~(bundle: Bundle ?, requestCode: Int ?): Builder setCustomColor Defaults to R.color.tor_service_white fun setCustomColor(colorRes: Int ): Builder setImageTorDataTransfer Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_dataxfer . fun setImageTorDataTransfer(drawableRes: Int ): Builder setImageTorErrors Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_notifyerr . fun setImageTorErrors(drawableRes: Int ): Builder setImageTorNetworkingDisabled Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_disabled . fun setImageTorNetworkingDisabled(drawableRes: Int ): Builder setImageTorNetworkingEnabled Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_enabled . fun setImageTorNetworkingEnabled(drawableRes: Int ): Builder setVisibility Defaults to NotificationVisibility.VISIBILITY_SECRET fun setVisibility(visibility: Int ): Builder showNotification Shown by Default. fun showNotification(show: Boolean = false): Builder","title":"Functions"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/-init-/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / <init> <init> \u00b6 Builder(channelName: String , channelID: String , channelDescription: String , notificationID: Int ) Where you get to customize how your notification will look and function. A notification is required to be displayed while TorService is running in the Foreground. Even if you set Builder.showNotification to false, TorService is brought to the Foreground when the user removes your task from the recent apps tray in order to properly shut down Tor and clean up w/o being killed by the OS. // private fun generateTorServiceNotificationBuilder(context: Context): ServiceNotification.Builder { return ServiceNotification . Builder ( channelName = \"TOPL-Android Demo\" , channelDescription = \"TorOnionProxyLibrary-Android Demo\" , channelID = \"TOPL-Android Demo\" , notificationID = 615 ) . setImageTorNetworkingEnabled ( drawableRes = R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( drawableRes = R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( drawableRes = R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( drawableRes = R . drawable . tor_stat_notifyerr ) . setVisibility ( visibility = NotificationCompat . VISIBILITY_PRIVATE ) . setCustomColor ( colorRes = R . color . primaryColor ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) . showNotification ( show = true ) // Set the notification's contentIntent for when the user clicks the notification . also { builder -> context . applicationContext . packageManager ?. getLaunchIntentForPackage ( context . applicationContext . packageName ) ?. let { intent -> // Set in your manifest for the launch activity so the intent won't launch // a new activity over top of your already created activity if the app is // open when the user clicks the notification: // // android:launchMode=\"singleInstance\" // // For more info on launchMode and Activity Intent flags, see: // // https://medium.com/swlh/truly-understand-tasks-and-back-stack-intent-flags-of-activity-2a137c401eca builder . setContentIntent ( PendingIntent . getActivity ( context . applicationContext , 0 , // Your desired request code intent , 0 // flags // can also include a bundle if desired ) ) } } // } Parameters \u00b6 channelName - Your notification channel\u2019s name (Cannot be Empty). channelID - Your notification channel\u2019s ID (Cannot be Empty). channelDescription - Your notification channel\u2019s description (Cannot be Empty). notificationID - Your foreground notification\u2019s ID. Exceptions \u00b6 IllegalArgumentException - If String fields are empty.","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/-init-/#init","text":"Builder(channelName: String , channelID: String , channelDescription: String , notificationID: Int ) Where you get to customize how your notification will look and function. A notification is required to be displayed while TorService is running in the Foreground. Even if you set Builder.showNotification to false, TorService is brought to the Foreground when the user removes your task from the recent apps tray in order to properly shut down Tor and clean up w/o being killed by the OS. // private fun generateTorServiceNotificationBuilder(context: Context): ServiceNotification.Builder { return ServiceNotification . Builder ( channelName = \"TOPL-Android Demo\" , channelDescription = \"TorOnionProxyLibrary-Android Demo\" , channelID = \"TOPL-Android Demo\" , notificationID = 615 ) . setImageTorNetworkingEnabled ( drawableRes = R . drawable . tor_stat_network_enabled ) . setImageTorNetworkingDisabled ( drawableRes = R . drawable . tor_stat_network_disabled ) . setImageTorDataTransfer ( drawableRes = R . drawable . tor_stat_network_dataxfer ) . setImageTorErrors ( drawableRes = R . drawable . tor_stat_notifyerr ) . setVisibility ( visibility = NotificationCompat . VISIBILITY_PRIVATE ) . setCustomColor ( colorRes = R . color . primaryColor ) . enableTorRestartButton ( enable = true ) . enableTorStopButton ( enable = true ) . showNotification ( show = true ) // Set the notification's contentIntent for when the user clicks the notification . also { builder -> context . applicationContext . packageManager ?. getLaunchIntentForPackage ( context . applicationContext . packageName ) ?. let { intent -> // Set in your manifest for the launch activity so the intent won't launch // a new activity over top of your already created activity if the app is // open when the user clicks the notification: // // android:launchMode=\"singleInstance\" // // For more info on launchMode and Activity Intent flags, see: // // https://medium.com/swlh/truly-understand-tasks-and-back-stack-intent-flags-of-activity-2a137c401eca builder . setContentIntent ( PendingIntent . getActivity ( context . applicationContext , 0 , // Your desired request code intent , 0 // flags // can also include a bundle if desired ) ) } } // }","title":"&lt;init&gt;"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/-init-/#parameters","text":"channelName - Your notification channel\u2019s name (Cannot be Empty). channelID - Your notification channel\u2019s ID (Cannot be Empty). channelDescription - Your notification channel\u2019s description (Cannot be Empty). notificationID - Your foreground notification\u2019s ID.","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/-init-/#exceptions","text":"IllegalArgumentException - If String fields are empty.","title":"Exceptions"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/enable-tor-restart-button/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / enableTorRestartButton enableTorRestartButton \u00b6 @JvmOverloads fun enableTorRestartButton(enable: Boolean = true): Builder (source) Disabled by Default Enable on the notification the ability to restart Tor. See Builder for code samples. Parameters \u00b6 enable - Boolean, automatically set to true but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired) Return Builder To continue customizing","title":"Enable tor restart button"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/enable-tor-restart-button/#enabletorrestartbutton","text":"@JvmOverloads fun enableTorRestartButton(enable: Boolean = true): Builder (source) Disabled by Default Enable on the notification the ability to restart Tor. See Builder for code samples.","title":"enableTorRestartButton"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/enable-tor-restart-button/#parameters","text":"enable - Boolean, automatically set to true but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired) Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/enable-tor-stop-button/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / enableTorStopButton enableTorStopButton \u00b6 @JvmOverloads fun enableTorStopButton(enable: Boolean = true): Builder (source) Disabled by Default Enable on the notification the ability to stop Tor. See Builder for code samples. Parameters \u00b6 enable - Boolean, automatically set to true but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired) Return Builder To continue customizing","title":"Enable tor stop button"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/enable-tor-stop-button/#enabletorstopbutton","text":"@JvmOverloads fun enableTorStopButton(enable: Boolean = true): Builder (source) Disabled by Default Enable on the notification the ability to stop Tor. See Builder for code samples.","title":"enableTorStopButton"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/enable-tor-stop-button/#parameters","text":"enable - Boolean, automatically set to true but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired) Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-activity-to-be-opened-on-tap/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setActivityToBeOpenedOnTap setActivityToBeOpenedOnTap \u00b6 fun ~~setActivityToBeOpenedOnTap~~(clazz: Class <*>, intentExtrasKey: String ?, intentExtras: String ?, intentRequestCode: Int ?): Builder (source) Deprecated: This method will be removed in a future release Do not use this method. Parameters \u00b6 clazz - The Activity to be opened when tapped. intentExtrasKey - ? The key for if you with to add extras in the PendingIntent. intentExtras - ? The extras that will be sent in the PendingIntent. intentRequestCode - ? The request code - Defaults to 0 if not set. See Also setContentIntent","title":"Set activity to be opened on tap"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-activity-to-be-opened-on-tap/#setactivitytobeopenedontap","text":"fun ~~setActivityToBeOpenedOnTap~~(clazz: Class <*>, intentExtrasKey: String ?, intentExtras: String ?, intentRequestCode: Int ?): Builder (source) Deprecated: This method will be removed in a future release Do not use this method.","title":"setActivityToBeOpenedOnTap"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-activity-to-be-opened-on-tap/#parameters","text":"clazz - The Activity to be opened when tapped. intentExtrasKey - ? The key for if you with to add extras in the PendingIntent. intentExtras - ? The extras that will be sent in the PendingIntent. intentRequestCode - ? The request code - Defaults to 0 if not set. See Also setContentIntent","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-content-intent-data/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setContentIntentData setContentIntentData \u00b6 fun ~~setContentIntentData~~(bundle: Bundle ?, requestCode: Int ?): Builder (source) Deprecated: This method will be removed in a future release Do not use this method. A non-null, non-0 number must be supplied for requestCode. Parameters \u00b6 bundle - Bundle to be sent to the Launch Activity requestCode - Request Code to be used when launching the Activity See Also setContentIntent","title":"Set content intent data"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-content-intent-data/#setcontentintentdata","text":"fun ~~setContentIntentData~~(bundle: Bundle ?, requestCode: Int ?): Builder (source) Deprecated: This method will be removed in a future release Do not use this method. A non-null, non-0 number must be supplied for requestCode.","title":"setContentIntentData"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-content-intent-data/#parameters","text":"bundle - Bundle to be sent to the Launch Activity requestCode - Request Code to be used when launching the Activity See Also setContentIntent","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-content-intent/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setContentIntent setContentIntent \u00b6 fun setContentIntent(pendingIntent: PendingIntent ?): Builder (source) Allows for full control over the PendingIntent used when the user taps the ServiceNotification . NOTE : use applicationContext when building your pending intent.","title":"Set content intent"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-content-intent/#setcontentintent","text":"fun setContentIntent(pendingIntent: PendingIntent ?): Builder (source) Allows for full control over the PendingIntent used when the user taps the ServiceNotification . NOTE : use applicationContext when building your pending intent.","title":"setContentIntent"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-custom-color/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setCustomColor setCustomColor \u00b6 fun setCustomColor(@ColorRes colorRes: Int ): Builder (source) Defaults to R.color.tor_service_white The color you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.ENABLED . See Builder for code samples. Parameters \u00b6 colorRes - Color resource id Return Builder To continue customizing","title":"Set custom color"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-custom-color/#setcustomcolor","text":"fun setCustomColor(@ColorRes colorRes: Int ): Builder (source) Defaults to R.color.tor_service_white The color you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.ENABLED . See Builder for code samples.","title":"setCustomColor"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-custom-color/#parameters","text":"colorRes - Color resource id Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-data-transfer/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setImageTorDataTransfer setImageTorDataTransfer \u00b6 fun setImageTorDataTransfer(@DrawableRes drawableRes: Int ): Builder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_dataxfer . The small icon you wish to display when bandwidth is being used. See Builder for code samples. Parameters \u00b6 drawableRes - Drawable resource id Return Builder To continue customizing","title":"Set image tor data transfer"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-data-transfer/#setimagetordatatransfer","text":"fun setImageTorDataTransfer(@DrawableRes drawableRes: Int ): Builder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_dataxfer . The small icon you wish to display when bandwidth is being used. See Builder for code samples.","title":"setImageTorDataTransfer"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-data-transfer/#parameters","text":"drawableRes - Drawable resource id Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-errors/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setImageTorErrors setImageTorErrors \u00b6 fun setImageTorErrors(@DrawableRes drawableRes: Int ): Builder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_notifyerr . The small icon you wish to display when Tor is having problems. See Builder for code samples. Parameters \u00b6 drawableRes - Drawable resource id Return Builder To continue customizing","title":"Set image tor errors"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-errors/#setimagetorerrors","text":"fun setImageTorErrors(@DrawableRes drawableRes: Int ): Builder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_notifyerr . The small icon you wish to display when Tor is having problems. See Builder for code samples.","title":"setImageTorErrors"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-errors/#parameters","text":"drawableRes - Drawable resource id Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-networking-disabled/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setImageTorNetworkingDisabled setImageTorNetworkingDisabled \u00b6 fun setImageTorNetworkingDisabled(@DrawableRes drawableRes: Int ): Builder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_disabled . The small icon you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.DISABLED . See Builder for code samples. Parameters \u00b6 drawableRes - Drawable resource id Return Builder To continue customizing","title":"Set image tor networking disabled"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-networking-disabled/#setimagetornetworkingdisabled","text":"fun setImageTorNetworkingDisabled(@DrawableRes drawableRes: Int ): Builder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_disabled . The small icon you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.DISABLED . See Builder for code samples.","title":"setImageTorNetworkingDisabled"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-networking-disabled/#parameters","text":"drawableRes - Drawable resource id Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-networking-enabled/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setImageTorNetworkingEnabled setImageTorNetworkingEnabled \u00b6 fun setImageTorNetworkingEnabled(@DrawableRes drawableRes: Int ): Builder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_enabled . The small icon you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.ENABLED . See Builder for code samples. Parameters \u00b6 drawableRes - Drawable resource id Return Builder To continue customizing","title":"Set image tor networking enabled"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-networking-enabled/#setimagetornetworkingenabled","text":"fun setImageTorNetworkingEnabled(@DrawableRes drawableRes: Int ): Builder (source) Defaults to Orbot/TorBrowser\u2019s icon R.drawable.tor_stat_network_enabled . The small icon you wish to display when Tor\u2019s network state is io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState.ENABLED . See Builder for code samples.","title":"setImageTorNetworkingEnabled"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-image-tor-networking-enabled/#parameters","text":"drawableRes - Drawable resource id Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-visibility/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / setVisibility setVisibility \u00b6 fun setVisibility(visibility: Int ): Builder (source) Defaults to NotificationVisibility.VISIBILITY_SECRET The visibility of your notification on the user\u2019s lock screen. See Builder for code samples. Parameters \u00b6 visibility - The NotificationVisibility you desire your notification to have Return Builder To continue customizing","title":"Set visibility"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-visibility/#setvisibility","text":"fun setVisibility(visibility: Int ): Builder (source) Defaults to NotificationVisibility.VISIBILITY_SECRET The visibility of your notification on the user\u2019s lock screen. See Builder for code samples.","title":"setVisibility"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/set-visibility/#parameters","text":"visibility - The NotificationVisibility you desire your notification to have Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/show-notification/","text":"topl-service / io.matthewnelson.topl_service.notification / ServiceNotification / Builder / showNotification showNotification \u00b6 @JvmOverloads fun showNotification(show: Boolean = false): Builder (source) Shown by Default. Setting it to false will only show a notification when the end user removes your Application from the Recent App\u2019s tray. In that event, TorService.onTaskRemoved moves the Service to the Foreground in order to properly shutdown Tor w/o the OS killing it beforehand. See Builder for code samples. Parameters \u00b6 show - Boolean, automatically set to false but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired) Return Builder To continue customizing","title":"Show notification"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/show-notification/#shownotification","text":"@JvmOverloads fun showNotification(show: Boolean = false): Builder (source) Shown by Default. Setting it to false will only show a notification when the end user removes your Application from the Recent App\u2019s tray. In that event, TorService.onTaskRemoved moves the Service to the Foreground in order to properly shutdown Tor w/o the OS killing it beforehand. See Builder for code samples.","title":"showNotification"},{"location":"topl-service/io.matthewnelson.topl_service.notification/-service-notification/-builder/show-notification/#parameters","text":"show - Boolean, automatically set to false but provides cleaner option for implementor to query SharedPreferences for user\u2019s settings (if desired) Return Builder To continue customizing","title":"Parameters"},{"location":"topl-service/io.matthewnelson.topl_service.util/","text":"topl-service / io.matthewnelson.topl_service.util Package io.matthewnelson.topl_service.util \u00b6 Types \u00b6 Name Summary ServiceConsts abstract class ServiceConsts : BaseServiceConsts","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/#package-iomatthewnelsontopl_serviceutil","text":"","title":"Package io.matthewnelson.topl_service.util"},{"location":"topl-service/io.matthewnelson.topl_service.util/#types","text":"Name Summary ServiceConsts abstract class ServiceConsts : BaseServiceConsts","title":"Types"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts ServiceConsts \u00b6 abstract class ServiceConsts : BaseServiceConsts (source) Constructors \u00b6 Name Summary <init> ServiceConsts() Inheritors \u00b6 Name Summary BackgroundManager When your application is sent to the background (the Recent App\u2019s tray or lock screen), the chosen BackgroundManager.Builder.Policy will be triggered. class BackgroundManager : ServiceConsts , LifecycleObserver ServiceNotification Everything to do with TorService \u2018s notification. class ServiceNotification : ServiceConsts TorServiceController class TorServiceController : ServiceConsts","title":"Index"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/#serviceconsts","text":"abstract class ServiceConsts : BaseServiceConsts (source)","title":"ServiceConsts"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/#constructors","text":"Name Summary <init> ServiceConsts()","title":"Constructors"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/#inheritors","text":"Name Summary BackgroundManager When your application is sent to the background (the Recent App\u2019s tray or lock screen), the chosen BackgroundManager.Builder.Policy will be triggered. class BackgroundManager : ServiceConsts , LifecycleObserver ServiceNotification Everything to do with TorService \u2018s notification. class ServiceNotification : ServiceConsts TorServiceController class TorServiceController : ServiceConsts","title":"Inheritors"},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-init-/","text":"topl-service / io.matthewnelson.topl_service.util / ServiceConsts / <init> <init> \u00b6 ServiceConsts()","title":" init "},{"location":"topl-service/io.matthewnelson.topl_service.util/-service-consts/-init-/#init","text":"ServiceConsts()","title":"&lt;init&gt;"},{"location":"topl-service-base/","text":"topl-service-base Packages \u00b6 Name Summary io.matthewnelson.topl_service_base Index \u00b6 All Types","title":"Index"},{"location":"topl-service-base/#packages","text":"Name Summary io.matthewnelson.topl_service_base","title":"Packages"},{"location":"topl-service-base/#index","text":"All Types","title":"Index"},{"location":"topl-service-base/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings \u00b6 Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . | io.matthewnelson.topl_service_base.BaseServiceConsts \u00b6 | io.matthewnelson.topl_service_base.BaseServiceTorSettings \u00b6 This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . | io.matthewnelson.topl_service_base.BaseV3ClientAuthManager \u00b6 | io.matthewnelson.topl_service_base.ServiceExecutionHooks \u00b6 Set Hooks to be executed from TorService. | io.matthewnelson.topl_service_base.ServiceUtilities \u00b6 | io.matthewnelson.topl_service_base.TorPortInfo \u00b6 Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster | io.matthewnelson.topl_service_base.TorServiceEventBroadcaster \u00b6 Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. | io.matthewnelson.topl_service_base.TorServicePrefs \u00b6 This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. | io.matthewnelson.topl_service_base.V3ClientAuthContent \u00b6 Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager","title":"Index"},{"location":"topl-service-base/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_baseapplicationdefaulttorsettings","text":"Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . |","title":"io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_basebaseserviceconsts","text":"|","title":"io.matthewnelson.topl_service_base.BaseServiceConsts"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_basebaseservicetorsettings","text":"This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . |","title":"io.matthewnelson.topl_service_base.BaseServiceTorSettings"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_basebasev3clientauthmanager","text":"|","title":"io.matthewnelson.topl_service_base.BaseV3ClientAuthManager"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_baseserviceexecutionhooks","text":"Set Hooks to be executed from TorService. |","title":"io.matthewnelson.topl_service_base.ServiceExecutionHooks"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_baseserviceutilities","text":"|","title":"io.matthewnelson.topl_service_base.ServiceUtilities"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_basetorportinfo","text":"Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster |","title":"io.matthewnelson.topl_service_base.TorPortInfo"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_basetorserviceeventbroadcaster","text":"Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. |","title":"io.matthewnelson.topl_service_base.TorServiceEventBroadcaster"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_basetorserviceprefs","text":"This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. |","title":"io.matthewnelson.topl_service_base.TorServicePrefs"},{"location":"topl-service-base/alltypes/#iomatthewnelsontopl_service_basev3clientauthcontent","text":"Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager","title":"io.matthewnelson.topl_service_base.V3ClientAuthContent"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/","text":"topl-service-base / io.matthewnelson.topl_service_base Package io.matthewnelson.topl_service_base \u00b6 Types \u00b6 Name Summary ApplicationDefaultTorSettings Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . abstract class ApplicationDefaultTorSettings : TorSettings BaseServiceConsts abstract class BaseServiceConsts : BaseConsts BaseServiceTorSettings This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . abstract class BaseServiceTorSettings : TorSettings BaseV3ClientAuthManager abstract class BaseV3ClientAuthManager ServiceExecutionHooks Set Hooks to be executed from TorService. abstract class ServiceExecutionHooks ServiceUtilities object ServiceUtilities TorPortInfo Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster class TorPortInfo TorServiceEventBroadcaster Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. abstract class TorServiceEventBroadcaster : EventBroadcaster TorServicePrefs This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. class TorServicePrefs : BaseServiceConsts V3ClientAuthContent Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager class V3ClientAuthContent","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/#package-iomatthewnelsontopl_service_base","text":"","title":"Package io.matthewnelson.topl_service_base"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/#types","text":"Name Summary ApplicationDefaultTorSettings Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . abstract class ApplicationDefaultTorSettings : TorSettings BaseServiceConsts abstract class BaseServiceConsts : BaseConsts BaseServiceTorSettings This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . abstract class BaseServiceTorSettings : TorSettings BaseV3ClientAuthManager abstract class BaseV3ClientAuthManager ServiceExecutionHooks Set Hooks to be executed from TorService. abstract class ServiceExecutionHooks ServiceUtilities object ServiceUtilities TorPortInfo Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster class TorPortInfo TorServiceEventBroadcaster Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. abstract class TorServiceEventBroadcaster : EventBroadcaster TorServicePrefs This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. class TorServicePrefs : BaseServiceConsts V3ClientAuthContent Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager class V3ClientAuthContent","title":"Types"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-application-default-tor-settings/","text":"topl-service-base / io.matthewnelson.topl_service_base / ApplicationDefaultTorSettings ApplicationDefaultTorSettings \u00b6 abstract class ApplicationDefaultTorSettings : TorSettings (source) Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . See TorSettings for information Constructors \u00b6 Name Summary <init> Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . ApplicationDefaultTorSettings()","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-application-default-tor-settings/#applicationdefaulttorsettings","text":"abstract class ApplicationDefaultTorSettings : TorSettings (source) Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . See TorSettings for information","title":"ApplicationDefaultTorSettings"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-application-default-tor-settings/#constructors","text":"Name Summary <init> Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . ApplicationDefaultTorSettings()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-application-default-tor-settings/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / ApplicationDefaultTorSettings / <init> <init> \u00b6 ApplicationDefaultTorSettings() Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . See TorSettings for information","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-application-default-tor-settings/-init-/#init","text":"ApplicationDefaultTorSettings() Simply extends TorSettings so that the topl-service module cannot be initialized with io.matthewnelson.topl_service_base.BaseServiceTorSettings . See TorSettings for information","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts BaseServiceConsts \u00b6 abstract class BaseServiceConsts : BaseConsts (source) Annotations \u00b6 Name Summary BackgroundPolicy annotation class BackgroundPolicy PrefKeyBoolean annotation class PrefKeyBoolean PrefKeyInt annotation class PrefKeyInt PrefKeyList annotation class PrefKeyList PrefKeyString annotation class PrefKeyString ServiceActionName annotation class ServiceActionName ServiceLifecycleEvent annotation class ServiceLifecycleEvent Constructors \u00b6 Name Summary <init> BaseServiceConsts() Inheritors \u00b6 Name Summary TorServicePrefs This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. class TorServicePrefs : BaseServiceConsts","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/#baseserviceconsts","text":"abstract class BaseServiceConsts : BaseConsts (source)","title":"BaseServiceConsts"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/#annotations","text":"Name Summary BackgroundPolicy annotation class BackgroundPolicy PrefKeyBoolean annotation class PrefKeyBoolean PrefKeyInt annotation class PrefKeyInt PrefKeyList annotation class PrefKeyList PrefKeyString annotation class PrefKeyString ServiceActionName annotation class ServiceActionName ServiceLifecycleEvent annotation class ServiceLifecycleEvent","title":"Annotations"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/#constructors","text":"Name Summary <init> BaseServiceConsts()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/#inheritors","text":"Name Summary TorServicePrefs This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. class TorServicePrefs : BaseServiceConsts","title":"Inheritors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / <init> <init> \u00b6 BaseServiceConsts()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-init-/#init","text":"BaseServiceConsts()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / BackgroundPolicy BackgroundPolicy \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class BackgroundPolicy (source) Constructors \u00b6 Name Summary <init> BackgroundPolicy() Companion Object Properties \u00b6 Name Summary RESPECT_RESOURCES const val RESPECT_RESOURCES: String RUN_IN_FOREGROUND const val RUN_IN_FOREGROUND: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/#backgroundpolicy","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class BackgroundPolicy (source)","title":"BackgroundPolicy"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/#constructors","text":"Name Summary <init> BackgroundPolicy()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/#companion-object-properties","text":"Name Summary RESPECT_RESOURCES const val RESPECT_RESOURCES: String RUN_IN_FOREGROUND const val RUN_IN_FOREGROUND: String","title":"Companion Object Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / BackgroundPolicy / <init> <init> \u00b6 BackgroundPolicy()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/-init-/#init","text":"BackgroundPolicy()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/-r-e-s-p-e-c-t_-r-e-s-o-u-r-c-e-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / BackgroundPolicy / RESPECT_RESOURCES RESPECT_RESOURCES \u00b6 const val RESPECT_RESOURCES: String (source)","title":" r e s p e c t  r e s o u r c e s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/-r-e-s-p-e-c-t_-r-e-s-o-u-r-c-e-s/#respect_resources","text":"const val RESPECT_RESOURCES: String (source)","title":"RESPECT_RESOURCES"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/-r-u-n_-i-n_-f-o-r-e-g-r-o-u-n-d/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / BackgroundPolicy / RUN_IN_FOREGROUND RUN_IN_FOREGROUND \u00b6 const val RUN_IN_FOREGROUND: String (source)","title":" r u n  i n  f o r e g r o u n d"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-background-policy/-r-u-n_-i-n_-f-o-r-e-g-r-o-u-n-d/#run_in_foreground","text":"const val RUN_IN_FOREGROUND: String (source)","title":"RUN_IN_FOREGROUND"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean PrefKeyBoolean \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class PrefKeyBoolean (source) Constructors \u00b6 Name Summary <init> PrefKeyBoolean() Companion Object Properties \u00b6 Name Summary DISABLE_NETWORK const val DISABLE_NETWORK: String HAS_BRIDGES const val HAS_BRIDGES: String HAS_COOKIE_AUTHENTICATION const val HAS_COOKIE_AUTHENTICATION: String HAS_DEBUG_LOGS const val HAS_DEBUG_LOGS: String HAS_DORMANT_CANCELED_BY_STARTUP const val HAS_DORMANT_CANCELED_BY_STARTUP: String HAS_OPEN_PROXY_ON_ALL_INTERFACES const val HAS_OPEN_PROXY_ON_ALL_INTERFACES: String HAS_REACHABLE_ADDRESS const val HAS_REACHABLE_ADDRESS: String HAS_REDUCED_CONNECTION_PADDING const val HAS_REDUCED_CONNECTION_PADDING: String HAS_SAFE_SOCKS const val HAS_SAFE_SOCKS: String HAS_STRICT_NODES const val HAS_STRICT_NODES: String HAS_TEST_SOCKS const val HAS_TEST_SOCKS: String IS_AUTO_MAP_HOSTS_ON_RESOLVE const val IS_AUTO_MAP_HOSTS_ON_RESOLVE: String IS_RELAY const val IS_RELAY: String RUN_AS_DAEMON const val RUN_AS_DAEMON: String USE_SOCKS5 const val USE_SOCKS5: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/#prefkeyboolean","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class PrefKeyBoolean (source)","title":"PrefKeyBoolean"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/#constructors","text":"Name Summary <init> PrefKeyBoolean()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/#companion-object-properties","text":"Name Summary DISABLE_NETWORK const val DISABLE_NETWORK: String HAS_BRIDGES const val HAS_BRIDGES: String HAS_COOKIE_AUTHENTICATION const val HAS_COOKIE_AUTHENTICATION: String HAS_DEBUG_LOGS const val HAS_DEBUG_LOGS: String HAS_DORMANT_CANCELED_BY_STARTUP const val HAS_DORMANT_CANCELED_BY_STARTUP: String HAS_OPEN_PROXY_ON_ALL_INTERFACES const val HAS_OPEN_PROXY_ON_ALL_INTERFACES: String HAS_REACHABLE_ADDRESS const val HAS_REACHABLE_ADDRESS: String HAS_REDUCED_CONNECTION_PADDING const val HAS_REDUCED_CONNECTION_PADDING: String HAS_SAFE_SOCKS const val HAS_SAFE_SOCKS: String HAS_STRICT_NODES const val HAS_STRICT_NODES: String HAS_TEST_SOCKS const val HAS_TEST_SOCKS: String IS_AUTO_MAP_HOSTS_ON_RESOLVE const val IS_AUTO_MAP_HOSTS_ON_RESOLVE: String IS_RELAY const val IS_RELAY: String RUN_AS_DAEMON const val RUN_AS_DAEMON: String USE_SOCKS5 const val USE_SOCKS5: String","title":"Companion Object Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / DISABLE_NETWORK DISABLE_NETWORK \u00b6 const val DISABLE_NETWORK: String (source)","title":" d i s a b l e  n e t w o r k"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/#disable_network","text":"const val DISABLE_NETWORK: String (source)","title":"DISABLE_NETWORK"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-b-r-i-d-g-e-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_BRIDGES HAS_BRIDGES \u00b6 const val HAS_BRIDGES: String (source)","title":" h a s  b r i d g e s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-b-r-i-d-g-e-s/#has_bridges","text":"const val HAS_BRIDGES: String (source)","title":"HAS_BRIDGES"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-c-o-o-k-i-e_-a-u-t-h-e-n-t-i-c-a-t-i-o-n/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_COOKIE_AUTHENTICATION HAS_COOKIE_AUTHENTICATION \u00b6 const val HAS_COOKIE_AUTHENTICATION: String (source)","title":" h a s  c o o k i e  a u t h e n t i c a t i o n"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-c-o-o-k-i-e_-a-u-t-h-e-n-t-i-c-a-t-i-o-n/#has_cookie_authentication","text":"const val HAS_COOKIE_AUTHENTICATION: String (source)","title":"HAS_COOKIE_AUTHENTICATION"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-d-e-b-u-g_-l-o-g-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_DEBUG_LOGS HAS_DEBUG_LOGS \u00b6 const val HAS_DEBUG_LOGS: String (source)","title":" h a s  d e b u g  l o g s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-d-e-b-u-g_-l-o-g-s/#has_debug_logs","text":"const val HAS_DEBUG_LOGS: String (source)","title":"HAS_DEBUG_LOGS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-d-o-r-m-a-n-t_-c-a-n-c-e-l-e-d_-b-y_-s-t-a-r-t-u-p/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_DORMANT_CANCELED_BY_STARTUP HAS_DORMANT_CANCELED_BY_STARTUP \u00b6 const val HAS_DORMANT_CANCELED_BY_STARTUP: String (source)","title":" h a s  d o r m a n t  c a n c e l e d  b y  s t a r t u p"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-d-o-r-m-a-n-t_-c-a-n-c-e-l-e-d_-b-y_-s-t-a-r-t-u-p/#has_dormant_canceled_by_startup","text":"const val HAS_DORMANT_CANCELED_BY_STARTUP: String (source)","title":"HAS_DORMANT_CANCELED_BY_STARTUP"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-o-p-e-n_-p-r-o-x-y_-o-n_-a-l-l_-i-n-t-e-r-f-a-c-e-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_OPEN_PROXY_ON_ALL_INTERFACES HAS_OPEN_PROXY_ON_ALL_INTERFACES \u00b6 const val HAS_OPEN_PROXY_ON_ALL_INTERFACES: String (source)","title":" h a s  o p e n  p r o x y  o n  a l l  i n t e r f a c e s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-o-p-e-n_-p-r-o-x-y_-o-n_-a-l-l_-i-n-t-e-r-f-a-c-e-s/#has_open_proxy_on_all_interfaces","text":"const val HAS_OPEN_PROXY_ON_ALL_INTERFACES: String (source)","title":"HAS_OPEN_PROXY_ON_ALL_INTERFACES"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_REACHABLE_ADDRESS HAS_REACHABLE_ADDRESS \u00b6 const val HAS_REACHABLE_ADDRESS: String (source)","title":" h a s  r e a c h a b l e  a d d r e s s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s/#has_reachable_address","text":"const val HAS_REACHABLE_ADDRESS: String (source)","title":"HAS_REACHABLE_ADDRESS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-r-e-d-u-c-e-d_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_REDUCED_CONNECTION_PADDING HAS_REDUCED_CONNECTION_PADDING \u00b6 const val HAS_REDUCED_CONNECTION_PADDING: String (source)","title":" h a s  r e d u c e d  c o n n e c t i o n  p a d d i n g"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-r-e-d-u-c-e-d_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/#has_reduced_connection_padding","text":"const val HAS_REDUCED_CONNECTION_PADDING: String (source)","title":"HAS_REDUCED_CONNECTION_PADDING"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-s-a-f-e_-s-o-c-k-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_SAFE_SOCKS HAS_SAFE_SOCKS \u00b6 const val HAS_SAFE_SOCKS: String (source)","title":" h a s  s a f e  s o c k s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-s-a-f-e_-s-o-c-k-s/#has_safe_socks","text":"const val HAS_SAFE_SOCKS: String (source)","title":"HAS_SAFE_SOCKS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-s-t-r-i-c-t_-n-o-d-e-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_STRICT_NODES HAS_STRICT_NODES \u00b6 const val HAS_STRICT_NODES: String (source)","title":" h a s  s t r i c t  n o d e s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-s-t-r-i-c-t_-n-o-d-e-s/#has_strict_nodes","text":"const val HAS_STRICT_NODES: String (source)","title":"HAS_STRICT_NODES"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-t-e-s-t_-s-o-c-k-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / HAS_TEST_SOCKS HAS_TEST_SOCKS \u00b6 const val HAS_TEST_SOCKS: String (source)","title":" h a s  t e s t  s o c k s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-h-a-s_-t-e-s-t_-s-o-c-k-s/#has_test_socks","text":"const val HAS_TEST_SOCKS: String (source)","title":"HAS_TEST_SOCKS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-i-s_-a-u-t-o_-m-a-p_-h-o-s-t-s_-o-n_-r-e-s-o-l-v-e/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / IS_AUTO_MAP_HOSTS_ON_RESOLVE IS_AUTO_MAP_HOSTS_ON_RESOLVE \u00b6 const val IS_AUTO_MAP_HOSTS_ON_RESOLVE: String (source)","title":" i s  a u t o  m a p  h o s t s  o n  r e s o l v e"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-i-s_-a-u-t-o_-m-a-p_-h-o-s-t-s_-o-n_-r-e-s-o-l-v-e/#is_auto_map_hosts_on_resolve","text":"const val IS_AUTO_MAP_HOSTS_ON_RESOLVE: String (source)","title":"IS_AUTO_MAP_HOSTS_ON_RESOLVE"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-i-s_-r-e-l-a-y/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / IS_RELAY IS_RELAY \u00b6 const val IS_RELAY: String (source)","title":" i s  r e l a y"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-i-s_-r-e-l-a-y/#is_relay","text":"const val IS_RELAY: String (source)","title":"IS_RELAY"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / <init> <init> \u00b6 PrefKeyBoolean()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-init-/#init","text":"PrefKeyBoolean()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-r-u-n_-a-s_-d-a-e-m-o-n/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / RUN_AS_DAEMON RUN_AS_DAEMON \u00b6 const val RUN_AS_DAEMON: String (source)","title":" r u n  a s  d a e m o n"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-r-u-n_-a-s_-d-a-e-m-o-n/#run_as_daemon","text":"const val RUN_AS_DAEMON: String (source)","title":"RUN_AS_DAEMON"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-u-s-e_-s-o-c-k-s5/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyBoolean / USE_SOCKS5 USE_SOCKS5 \u00b6 const val USE_SOCKS5: String (source)","title":" u s e  s o c k s5"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-boolean/-u-s-e_-s-o-c-k-s5/#use_socks5","text":"const val USE_SOCKS5: String (source)","title":"USE_SOCKS5"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyInt PrefKeyInt \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class PrefKeyInt (source) Constructors \u00b6 Name Summary <init> PrefKeyInt() Companion Object Properties \u00b6 Name Summary DORMANT_CLIENT_TIMEOUT const val DORMANT_CLIENT_TIMEOUT: String PROXY_PORT const val PROXY_PORT: String PROXY_SOCKS5_SERVER_PORT const val PROXY_SOCKS5_SERVER_PORT: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/#prefkeyint","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class PrefKeyInt (source)","title":"PrefKeyInt"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/#constructors","text":"Name Summary <init> PrefKeyInt()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/#companion-object-properties","text":"Name Summary DORMANT_CLIENT_TIMEOUT const val DORMANT_CLIENT_TIMEOUT: String PROXY_PORT const val PROXY_PORT: String PROXY_SOCKS5_SERVER_PORT const val PROXY_SOCKS5_SERVER_PORT: String","title":"Companion Object Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/-d-o-r-m-a-n-t_-c-l-i-e-n-t_-t-i-m-e-o-u-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyInt / DORMANT_CLIENT_TIMEOUT DORMANT_CLIENT_TIMEOUT \u00b6 const val DORMANT_CLIENT_TIMEOUT: String (source)","title":" d o r m a n t  c l i e n t  t i m e o u t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/-d-o-r-m-a-n-t_-c-l-i-e-n-t_-t-i-m-e-o-u-t/#dormant_client_timeout","text":"const val DORMANT_CLIENT_TIMEOUT: String (source)","title":"DORMANT_CLIENT_TIMEOUT"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyInt / <init> <init> \u00b6 PrefKeyInt()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/-init-/#init","text":"PrefKeyInt()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/-p-r-o-x-y_-p-o-r-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyInt / PROXY_PORT PROXY_PORT \u00b6 const val PROXY_PORT: String (source)","title":" p r o x y  p o r t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/-p-r-o-x-y_-p-o-r-t/#proxy_port","text":"const val PROXY_PORT: String (source)","title":"PROXY_PORT"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/-p-r-o-x-y_-s-o-c-k-s5_-s-e-r-v-e-r_-p-o-r-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyInt / PROXY_SOCKS5_SERVER_PORT PROXY_SOCKS5_SERVER_PORT \u00b6 const val PROXY_SOCKS5_SERVER_PORT: String (source)","title":" p r o x y  s o c k s5  s e r v e r  p o r t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-int/-p-r-o-x-y_-s-o-c-k-s5_-s-e-r-v-e-r_-p-o-r-t/#proxy_socks5_server_port","text":"const val PROXY_SOCKS5_SERVER_PORT: String (source)","title":"PROXY_SOCKS5_SERVER_PORT"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyList PrefKeyList \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class PrefKeyList (source) Constructors \u00b6 Name Summary <init> PrefKeyList() Companion Object Properties \u00b6 Name Summary DNS_PORT_ISOLATION_FLAGS const val DNS_PORT_ISOLATION_FLAGS: String HTTP_TUNNEL_PORT_ISOLATION_FLAGS const val HTTP_TUNNEL_PORT_ISOLATION_FLAGS: String SOCKS_PORT_ISOLATION_FLAGS const val SOCKS_PORT_ISOLATION_FLAGS: String TRANS_PORT_ISOLATION_FLAGS const val TRANS_PORT_ISOLATION_FLAGS: String USER_DEFINED_BRIDGES const val USER_DEFINED_BRIDGES: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/#prefkeylist","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class PrefKeyList (source)","title":"PrefKeyList"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/#constructors","text":"Name Summary <init> PrefKeyList()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/#companion-object-properties","text":"Name Summary DNS_PORT_ISOLATION_FLAGS const val DNS_PORT_ISOLATION_FLAGS: String HTTP_TUNNEL_PORT_ISOLATION_FLAGS const val HTTP_TUNNEL_PORT_ISOLATION_FLAGS: String SOCKS_PORT_ISOLATION_FLAGS const val SOCKS_PORT_ISOLATION_FLAGS: String TRANS_PORT_ISOLATION_FLAGS const val TRANS_PORT_ISOLATION_FLAGS: String USER_DEFINED_BRIDGES const val USER_DEFINED_BRIDGES: String","title":"Companion Object Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-d-n-s_-p-o-r-t_-i-s-o-l-a-t-i-o-n_-f-l-a-g-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyList / DNS_PORT_ISOLATION_FLAGS DNS_PORT_ISOLATION_FLAGS \u00b6 const val DNS_PORT_ISOLATION_FLAGS: String (source)","title":" d n s  p o r t  i s o l a t i o n  f l a g s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-d-n-s_-p-o-r-t_-i-s-o-l-a-t-i-o-n_-f-l-a-g-s/#dns_port_isolation_flags","text":"const val DNS_PORT_ISOLATION_FLAGS: String (source)","title":"DNS_PORT_ISOLATION_FLAGS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-h-t-t-p_-t-u-n-n-e-l_-p-o-r-t_-i-s-o-l-a-t-i-o-n_-f-l-a-g-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyList / HTTP_TUNNEL_PORT_ISOLATION_FLAGS HTTP_TUNNEL_PORT_ISOLATION_FLAGS \u00b6 const val HTTP_TUNNEL_PORT_ISOLATION_FLAGS: String (source)","title":" h t t p  t u n n e l  p o r t  i s o l a t i o n  f l a g s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-h-t-t-p_-t-u-n-n-e-l_-p-o-r-t_-i-s-o-l-a-t-i-o-n_-f-l-a-g-s/#http_tunnel_port_isolation_flags","text":"const val HTTP_TUNNEL_PORT_ISOLATION_FLAGS: String (source)","title":"HTTP_TUNNEL_PORT_ISOLATION_FLAGS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyList / <init> <init> \u00b6 PrefKeyList()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-init-/#init","text":"PrefKeyList()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-s-o-c-k-s_-p-o-r-t_-i-s-o-l-a-t-i-o-n_-f-l-a-g-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyList / SOCKS_PORT_ISOLATION_FLAGS SOCKS_PORT_ISOLATION_FLAGS \u00b6 const val SOCKS_PORT_ISOLATION_FLAGS: String (source)","title":" s o c k s  p o r t  i s o l a t i o n  f l a g s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-s-o-c-k-s_-p-o-r-t_-i-s-o-l-a-t-i-o-n_-f-l-a-g-s/#socks_port_isolation_flags","text":"const val SOCKS_PORT_ISOLATION_FLAGS: String (source)","title":"SOCKS_PORT_ISOLATION_FLAGS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-t-r-a-n-s_-p-o-r-t_-i-s-o-l-a-t-i-o-n_-f-l-a-g-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyList / TRANS_PORT_ISOLATION_FLAGS TRANS_PORT_ISOLATION_FLAGS \u00b6 const val TRANS_PORT_ISOLATION_FLAGS: String (source)","title":" t r a n s  p o r t  i s o l a t i o n  f l a g s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-t-r-a-n-s_-p-o-r-t_-i-s-o-l-a-t-i-o-n_-f-l-a-g-s/#trans_port_isolation_flags","text":"const val TRANS_PORT_ISOLATION_FLAGS: String (source)","title":"TRANS_PORT_ISOLATION_FLAGS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-u-s-e-r_-d-e-f-i-n-e-d_-b-r-i-d-g-e-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyList / USER_DEFINED_BRIDGES USER_DEFINED_BRIDGES \u00b6 const val USER_DEFINED_BRIDGES: String (source)","title":" u s e r  d e f i n e d  b r i d g e s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-list/-u-s-e-r_-d-e-f-i-n-e-d_-b-r-i-d-g-e-s/#user_defined_bridges","text":"const val USER_DEFINED_BRIDGES: String (source)","title":"USER_DEFINED_BRIDGES"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString PrefKeyString \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class PrefKeyString (source) Constructors \u00b6 Name Summary <init> PrefKeyString() Companion Object Properties \u00b6 Name Summary CUSTOM_TORRC const val CUSTOM_TORRC: String DNS_PORT const val DNS_PORT: String ENTRY_NODES const val ENTRY_NODES: String EXCLUDED_NODES const val EXCLUDED_NODES: String EXIT_NODES const val EXIT_NODES: String HAS_CONNECTION_PADDING const val HAS_CONNECTION_PADDING: String HTTP_TUNNEL_PORT const val HTTP_TUNNEL_PORT: String PROXY_HOST const val PROXY_HOST: String PROXY_PASSWORD const val PROXY_PASSWORD: String PROXY_SOCKS5_HOST const val PROXY_SOCKS5_HOST: String PROXY_TYPE const val PROXY_TYPE: String PROXY_USER const val PROXY_USER: String REACHABLE_ADDRESS_PORTS const val REACHABLE_ADDRESS_PORTS: String RELAY_NICKNAME const val RELAY_NICKNAME: String RELAY_PORT const val RELAY_PORT: String SOCKS_PORT const val SOCKS_PORT: String TRANS_PORT const val TRANS_PORT: String VIRTUAL_ADDRESS_NETWORK const val VIRTUAL_ADDRESS_NETWORK: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/#prefkeystring","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class PrefKeyString (source)","title":"PrefKeyString"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/#constructors","text":"Name Summary <init> PrefKeyString()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/#companion-object-properties","text":"Name Summary CUSTOM_TORRC const val CUSTOM_TORRC: String DNS_PORT const val DNS_PORT: String ENTRY_NODES const val ENTRY_NODES: String EXCLUDED_NODES const val EXCLUDED_NODES: String EXIT_NODES const val EXIT_NODES: String HAS_CONNECTION_PADDING const val HAS_CONNECTION_PADDING: String HTTP_TUNNEL_PORT const val HTTP_TUNNEL_PORT: String PROXY_HOST const val PROXY_HOST: String PROXY_PASSWORD const val PROXY_PASSWORD: String PROXY_SOCKS5_HOST const val PROXY_SOCKS5_HOST: String PROXY_TYPE const val PROXY_TYPE: String PROXY_USER const val PROXY_USER: String REACHABLE_ADDRESS_PORTS const val REACHABLE_ADDRESS_PORTS: String RELAY_NICKNAME const val RELAY_NICKNAME: String RELAY_PORT const val RELAY_PORT: String SOCKS_PORT const val SOCKS_PORT: String TRANS_PORT const val TRANS_PORT: String VIRTUAL_ADDRESS_NETWORK const val VIRTUAL_ADDRESS_NETWORK: String","title":"Companion Object Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-c-u-s-t-o-m_-t-o-r-r-c/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / CUSTOM_TORRC CUSTOM_TORRC \u00b6 const val CUSTOM_TORRC: String (source)","title":" c u s t o m  t o r r c"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-c-u-s-t-o-m_-t-o-r-r-c/#custom_torrc","text":"const val CUSTOM_TORRC: String (source)","title":"CUSTOM_TORRC"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-d-n-s_-p-o-r-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / DNS_PORT DNS_PORT \u00b6 const val DNS_PORT: String (source)","title":" d n s  p o r t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-d-n-s_-p-o-r-t/#dns_port","text":"const val DNS_PORT: String (source)","title":"DNS_PORT"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-e-n-t-r-y_-n-o-d-e-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / ENTRY_NODES ENTRY_NODES \u00b6 const val ENTRY_NODES: String (source)","title":" e n t r y  n o d e s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-e-n-t-r-y_-n-o-d-e-s/#entry_nodes","text":"const val ENTRY_NODES: String (source)","title":"ENTRY_NODES"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-e-x-c-l-u-d-e-d_-n-o-d-e-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / EXCLUDED_NODES EXCLUDED_NODES \u00b6 const val EXCLUDED_NODES: String (source)","title":" e x c l u d e d  n o d e s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-e-x-c-l-u-d-e-d_-n-o-d-e-s/#excluded_nodes","text":"const val EXCLUDED_NODES: String (source)","title":"EXCLUDED_NODES"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-e-x-i-t_-n-o-d-e-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / EXIT_NODES EXIT_NODES \u00b6 const val EXIT_NODES: String (source)","title":" e x i t  n o d e s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-e-x-i-t_-n-o-d-e-s/#exit_nodes","text":"const val EXIT_NODES: String (source)","title":"EXIT_NODES"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-h-a-s_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / HAS_CONNECTION_PADDING HAS_CONNECTION_PADDING \u00b6 const val HAS_CONNECTION_PADDING: String (source)","title":" h a s  c o n n e c t i o n  p a d d i n g"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-h-a-s_-c-o-n-n-e-c-t-i-o-n_-p-a-d-d-i-n-g/#has_connection_padding","text":"const val HAS_CONNECTION_PADDING: String (source)","title":"HAS_CONNECTION_PADDING"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-h-t-t-p_-t-u-n-n-e-l_-p-o-r-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / HTTP_TUNNEL_PORT HTTP_TUNNEL_PORT \u00b6 const val HTTP_TUNNEL_PORT: String (source)","title":" h t t p  t u n n e l  p o r t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-h-t-t-p_-t-u-n-n-e-l_-p-o-r-t/#http_tunnel_port","text":"const val HTTP_TUNNEL_PORT: String (source)","title":"HTTP_TUNNEL_PORT"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / <init> <init> \u00b6 PrefKeyString()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-init-/#init","text":"PrefKeyString()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-h-o-s-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / PROXY_HOST PROXY_HOST \u00b6 const val PROXY_HOST: String (source)","title":" p r o x y  h o s t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-h-o-s-t/#proxy_host","text":"const val PROXY_HOST: String (source)","title":"PROXY_HOST"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-p-a-s-s-w-o-r-d/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / PROXY_PASSWORD PROXY_PASSWORD \u00b6 const val PROXY_PASSWORD: String (source)","title":" p r o x y  p a s s w o r d"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-p-a-s-s-w-o-r-d/#proxy_password","text":"const val PROXY_PASSWORD: String (source)","title":"PROXY_PASSWORD"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-s-o-c-k-s5_-h-o-s-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / PROXY_SOCKS5_HOST PROXY_SOCKS5_HOST \u00b6 const val PROXY_SOCKS5_HOST: String (source)","title":" p r o x y  s o c k s5  h o s t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-s-o-c-k-s5_-h-o-s-t/#proxy_socks5_host","text":"const val PROXY_SOCKS5_HOST: String (source)","title":"PROXY_SOCKS5_HOST"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-t-y-p-e/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / PROXY_TYPE PROXY_TYPE \u00b6 const val PROXY_TYPE: String (source)","title":" p r o x y  t y p e"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-t-y-p-e/#proxy_type","text":"const val PROXY_TYPE: String (source)","title":"PROXY_TYPE"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-u-s-e-r/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / PROXY_USER PROXY_USER \u00b6 const val PROXY_USER: String (source)","title":" p r o x y  u s e r"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-p-r-o-x-y_-u-s-e-r/#proxy_user","text":"const val PROXY_USER: String (source)","title":"PROXY_USER"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s_-p-o-r-t-s/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / REACHABLE_ADDRESS_PORTS REACHABLE_ADDRESS_PORTS \u00b6 const val REACHABLE_ADDRESS_PORTS: String (source)","title":" r e a c h a b l e  a d d r e s s  p o r t s"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-r-e-a-c-h-a-b-l-e_-a-d-d-r-e-s-s_-p-o-r-t-s/#reachable_address_ports","text":"const val REACHABLE_ADDRESS_PORTS: String (source)","title":"REACHABLE_ADDRESS_PORTS"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-r-e-l-a-y_-n-i-c-k-n-a-m-e/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / RELAY_NICKNAME RELAY_NICKNAME \u00b6 const val RELAY_NICKNAME: String (source)","title":" r e l a y  n i c k n a m e"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-r-e-l-a-y_-n-i-c-k-n-a-m-e/#relay_nickname","text":"const val RELAY_NICKNAME: String (source)","title":"RELAY_NICKNAME"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-r-e-l-a-y_-p-o-r-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / RELAY_PORT RELAY_PORT \u00b6 const val RELAY_PORT: String (source)","title":" r e l a y  p o r t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-r-e-l-a-y_-p-o-r-t/#relay_port","text":"const val RELAY_PORT: String (source)","title":"RELAY_PORT"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-s-o-c-k-s_-p-o-r-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / SOCKS_PORT SOCKS_PORT \u00b6 const val SOCKS_PORT: String (source)","title":" s o c k s  p o r t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-s-o-c-k-s_-p-o-r-t/#socks_port","text":"const val SOCKS_PORT: String (source)","title":"SOCKS_PORT"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-t-r-a-n-s_-p-o-r-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / TRANS_PORT TRANS_PORT \u00b6 const val TRANS_PORT: String (source)","title":" t r a n s  p o r t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-t-r-a-n-s_-p-o-r-t/#trans_port","text":"const val TRANS_PORT: String (source)","title":"TRANS_PORT"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-v-i-r-t-u-a-l_-a-d-d-r-e-s-s_-n-e-t-w-o-r-k/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / PrefKeyString / VIRTUAL_ADDRESS_NETWORK VIRTUAL_ADDRESS_NETWORK \u00b6 const val VIRTUAL_ADDRESS_NETWORK: String (source)","title":" v i r t u a l  a d d r e s s  n e t w o r k"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-pref-key-string/-v-i-r-t-u-a-l_-a-d-d-r-e-s-s_-n-e-t-w-o-r-k/#virtual_address_network","text":"const val VIRTUAL_ADDRESS_NETWORK: String (source)","title":"VIRTUAL_ADDRESS_NETWORK"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceActionName ServiceActionName \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE, AnnotationTarget.PROPERTY]) annotation class ServiceActionName (source) Constructors \u00b6 Name Summary <init> ServiceActionName() Companion Object Properties \u00b6 Name Summary DISABLE_NETWORK const val DISABLE_NETWORK: String ENABLE_NETWORK const val ENABLE_NETWORK: String NEW_ID const val NEW_ID: String RESTART_TOR const val RESTART_TOR: String START const val START: String STOP const val STOP: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/#serviceactionname","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE, AnnotationTarget.PROPERTY]) annotation class ServiceActionName (source)","title":"ServiceActionName"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/#constructors","text":"Name Summary <init> ServiceActionName()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/#companion-object-properties","text":"Name Summary DISABLE_NETWORK const val DISABLE_NETWORK: String ENABLE_NETWORK const val ENABLE_NETWORK: String NEW_ID const val NEW_ID: String RESTART_TOR const val RESTART_TOR: String START const val START: String STOP const val STOP: String","title":"Companion Object Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceActionName / DISABLE_NETWORK DISABLE_NETWORK \u00b6 const val DISABLE_NETWORK: String (source)","title":" d i s a b l e  n e t w o r k"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-d-i-s-a-b-l-e_-n-e-t-w-o-r-k/#disable_network","text":"const val DISABLE_NETWORK: String (source)","title":"DISABLE_NETWORK"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-e-n-a-b-l-e_-n-e-t-w-o-r-k/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceActionName / ENABLE_NETWORK ENABLE_NETWORK \u00b6 const val ENABLE_NETWORK: String (source)","title":" e n a b l e  n e t w o r k"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-e-n-a-b-l-e_-n-e-t-w-o-r-k/#enable_network","text":"const val ENABLE_NETWORK: String (source)","title":"ENABLE_NETWORK"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceActionName / <init> <init> \u00b6 ServiceActionName()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-init-/#init","text":"ServiceActionName()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-n-e-w_-i-d/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceActionName / NEW_ID NEW_ID \u00b6 const val NEW_ID: String (source)","title":" n e w  i d"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-n-e-w_-i-d/#new_id","text":"const val NEW_ID: String (source)","title":"NEW_ID"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-r-e-s-t-a-r-t_-t-o-r/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceActionName / RESTART_TOR RESTART_TOR \u00b6 const val RESTART_TOR: String (source)","title":" r e s t a r t  t o r"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-r-e-s-t-a-r-t_-t-o-r/#restart_tor","text":"const val RESTART_TOR: String (source)","title":"RESTART_TOR"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-s-t-a-r-t/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceActionName / START START \u00b6 const val START: String (source)","title":" s t a r t"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-s-t-a-r-t/#start","text":"const val START: String (source)","title":"START"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-s-t-o-p/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceActionName / STOP STOP \u00b6 const val STOP: String (source)","title":" s t o p"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-action-name/-s-t-o-p/#stop","text":"const val STOP: String (source)","title":"STOP"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceLifecycleEvent ServiceLifecycleEvent \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class ServiceLifecycleEvent (source) Constructors \u00b6 Name Summary <init> ServiceLifecycleEvent() Companion Object Properties \u00b6 Name Summary CREATED const val CREATED: String DESTROYED const val DESTROYED: String ON_BIND const val ON_BIND: String ON_UNBIND const val ON_UNBIND: String TASK_REMOVED const val TASK_REMOVED: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/#servicelifecycleevent","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.PROPERTY, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.TYPE]) annotation class ServiceLifecycleEvent (source)","title":"ServiceLifecycleEvent"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/#constructors","text":"Name Summary <init> ServiceLifecycleEvent()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/#companion-object-properties","text":"Name Summary CREATED const val CREATED: String DESTROYED const val DESTROYED: String ON_BIND const val ON_BIND: String ON_UNBIND const val ON_UNBIND: String TASK_REMOVED const val TASK_REMOVED: String","title":"Companion Object Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-c-r-e-a-t-e-d/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceLifecycleEvent / CREATED CREATED \u00b6 const val CREATED: String (source)","title":" c r e a t e d"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-c-r-e-a-t-e-d/#created","text":"const val CREATED: String (source)","title":"CREATED"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-d-e-s-t-r-o-y-e-d/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceLifecycleEvent / DESTROYED DESTROYED \u00b6 const val DESTROYED: String (source)","title":" d e s t r o y e d"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-d-e-s-t-r-o-y-e-d/#destroyed","text":"const val DESTROYED: String (source)","title":"DESTROYED"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceLifecycleEvent / <init> <init> \u00b6 ServiceLifecycleEvent()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-init-/#init","text":"ServiceLifecycleEvent()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-o-n_-b-i-n-d/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceLifecycleEvent / ON_BIND ON_BIND \u00b6 const val ON_BIND: String (source)","title":" o n  b i n d"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-o-n_-b-i-n-d/#on_bind","text":"const val ON_BIND: String (source)","title":"ON_BIND"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-o-n_-u-n-b-i-n-d/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceLifecycleEvent / ON_UNBIND ON_UNBIND \u00b6 const val ON_UNBIND: String (source)","title":" o n  u n b i n d"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-o-n_-u-n-b-i-n-d/#on_unbind","text":"const val ON_UNBIND: String (source)","title":"ON_UNBIND"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-t-a-s-k_-r-e-m-o-v-e-d/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceConsts / ServiceLifecycleEvent / TASK_REMOVED TASK_REMOVED \u00b6 const val TASK_REMOVED: String (source)","title":" t a s k  r e m o v e d"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-consts/-service-lifecycle-event/-t-a-s-k_-r-e-m-o-v-e-d/#task_removed","text":"const val TASK_REMOVED: String (source)","title":"TASK_REMOVED"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings BaseServiceTorSettings \u00b6 abstract class BaseServiceTorSettings : TorSettings (source) This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . It enables the updating of settings in a standardized manner so library users can simply instantiate TorServicePrefs , modify settings, and then call restartTor from the topl-service::TorServiceController to have them applied to the Tor Process. It also makes designing of a settings screen much easier for your application. Parameters \u00b6 servicePrefs - TorServicePrefs to query/save values to shared preferences defaultTorSettings - Default values to fall back on if nothing is returned from TorServicePrefs Constructors \u00b6 Name Summary <init> This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . BaseServiceTorSettings(servicePrefs: TorServicePrefs , defaultTorSettings: ApplicationDefaultTorSettings ) Properties \u00b6 Name Summary connectionPadding open val connectionPadding: String customTorrc open val customTorrc: String ? defaultTorSettings Default values to fall back on if nothing is returned from TorServicePrefs val defaultTorSettings: ApplicationDefaultTorSettings disableNetwork open val disableNetwork: Boolean dnsPort open val dnsPort: String dnsPortIsolationFlags open val dnsPortIsolationFlags: List < String >? dormantClientTimeout open val dormantClientTimeout: Int ? entryNodes open val entryNodes: String ? excludeNodes open val excludeNodes: String ? exitNodes open val exitNodes: String ? hasBridges open val hasBridges: Boolean hasCookieAuthentication open val hasCookieAuthentication: Boolean hasDebugLogs open val hasDebugLogs: Boolean hasDormantCanceledByStartup open val hasDormantCanceledByStartup: Boolean hasOpenProxyOnAllInterfaces open val hasOpenProxyOnAllInterfaces: Boolean hasReachableAddress open val hasReachableAddress: Boolean hasReducedConnectionPadding open val hasReducedConnectionPadding: Boolean hasSafeSocks open val hasSafeSocks: Boolean hasStrictNodes open val hasStrictNodes: Boolean hasTestSocks open val hasTestSocks: Boolean httpTunnelPort open val httpTunnelPort: String httpTunnelPortIsolationFlags open val httpTunnelPortIsolationFlags: List < String >? isAutoMapHostsOnResolve open val isAutoMapHostsOnResolve: Boolean isRelay open val isRelay: Boolean listOfSupportedBridges open val listOfSupportedBridges: List < String > proxyHost open val proxyHost: String ? proxyPassword open val proxyPassword: String ? proxyPort open val proxyPort: Int ? proxySocks5Host open val proxySocks5Host: String ? proxySocks5ServerPort open val proxySocks5ServerPort: Int ? proxyType open val proxyType: String proxyUser open val proxyUser: String ? reachableAddressPorts open val reachableAddressPorts: String relayNickname open val relayNickname: String ? relayPort open val relayPort: String runAsDaemon open val runAsDaemon: Boolean servicePrefs TorServicePrefs to query/save values to shared preferences val servicePrefs: TorServicePrefs socksPort open val socksPort: String socksPortIsolationFlags open val socksPortIsolationFlags: List < String >? transPort open val transPort: String transPortIsolationFlags open val transPortIsolationFlags: List < String >? useSocks5 open val useSocks5: Boolean virtualAddressNetwork open val virtualAddressNetwork: String ? Functions \u00b6 Name Summary connectionPaddingSave Saves the value for connectionPadding to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun connectionPaddingSave(connectionPadding: String ): Unit customTorrcSave Saves the value for customTorrc to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun customTorrcSave(customTorrc: String ?): Unit disableNetworkSave Saves the value for disableNetwork to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun disableNetworkSave(boolean: Boolean ): Unit dnsPortIsolationFlagsSave Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun dnsPortIsolationFlagsSave(isolationFlags: List < String >): Unit dnsPortSave Saves the value for dnsPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun dnsPortSave(dnsPort: String ): Unit dormantClientTimeoutSave abstract fun dormantClientTimeoutSave(minutes: Int ?): Unit entryNodesSave Saves the value for entryNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun entryNodesSave(entryNodes: String ?): Unit excludeNodesSave Saves the value for excludeNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun excludeNodesSave(excludeNodes: String ?): Unit exitNodesSave Saves the value for exitNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun exitNodesSave(exitNodes: String ?): Unit hasBridgesSave Saves the value for hasBridges to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasBridgesSave(boolean: Boolean ): Unit hasCookieAuthenticationSave Saves the value for hasCookieAuthentication to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasCookieAuthenticationSave(boolean: Boolean ): Unit hasDebugLogsSave Saves the value for hasDebugLogs to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasDebugLogsSave(boolean: Boolean ): Unit hasDormantCanceledByStartupSave Saves the value for hasDormantCanceledByStartup to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasDormantCanceledByStartupSave(boolean: Boolean ): Unit hasOpenProxyOnAllInterfacesSave Saves the value for hasOpenProxyOnAllInterfaces to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasOpenProxyOnAllInterfacesSave(boolean: Boolean ): Unit hasReachableAddressSave Saves the value for hasReachableAddress to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasReachableAddressSave(boolean: Boolean ): Unit hasReducedConnectionPaddingSave Saves the value for hasReducedConnectionPadding to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasReducedConnectionPaddingSave(boolean: Boolean ): Unit hasSafeSocksSave Saves the value for hasSafeSocks to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasSafeSocksSave(boolean: Boolean ): Unit hasStrictNodesSave Saves the value for hasStrictNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasStrictNodesSave(boolean: Boolean ): Unit hasTestSocksSave Saves the value for hasTestSocks to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasTestSocksSave(boolean: Boolean ): Unit httpPortIsolationFlagsSave Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun httpPortIsolationFlagsSave(isolationFlags: List < String >): Unit httpTunnelPortSave Saves the value for httpPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun httpTunnelPortSave(httpPort: String ): Unit isAutoMapHostsOnResolveSave Saves the value for isAutoMapHostsOnResolve to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun isAutoMapHostsOnResolveSave(boolean: Boolean ): Unit isRelaySave Saves the value for isRelay to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun isRelaySave(boolean: Boolean ): Unit proxyHostSave Saves the value for proxyHost to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyHostSave(proxyHost: String ?): Unit proxyPasswordSave Saves the value for proxyPassword to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyPasswordSave(proxyPassword: String ?): Unit proxyPortSave Saves the value for proxyPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyPortSave(proxyPort: Int ?): Unit proxySocks5HostSave Saves the value for proxySocks5Host to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxySocks5HostSave(proxySocks5Host: String ?): Unit proxySocks5ServerPortSave Saves the value for proxySocks5ServerPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxySocks5ServerPortSave(proxySocks5ServerPort: Int ?): Unit proxyTypeSave Saves the value for proxyType to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyTypeSave(proxyType: String ): Unit proxyUserSave Saves the value for proxyUser to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyUserSave(proxyUser: String ?): Unit reachableAddressPortsSave Saves the value for reachableAddressPorts to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun reachableAddressPortsSave(reachableAddressPorts: String ): Unit relayNicknameSave Saves the value for relayNickname to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun relayNicknameSave(relayNickname: String ): Unit relayPortSave Saves the value for relayPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun relayPortSave(relayPort: String ): Unit runAsDaemonSave Saves the value for runAsDaemon to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun runAsDaemonSave(boolean: Boolean ): Unit socksPortIsolationFlagsSave Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun socksPortIsolationFlagsSave(isolationFlags: List < String >): Unit socksPortSave Saves the value for socksPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun socksPortSave(socksPort: String ): Unit transPortIsolationFlagsSave Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun transPortIsolationFlagsSave(isolationFlags: List < String >): Unit transPortSave Saves the value for transPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun transPortSave(transPort: String ): Unit useSocks5Save Saves the value for useSocks5 to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun useSocks5Save(boolean: Boolean ): Unit virtualAddressNetworkSave Saves the value for virtualAddressNetwork to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun virtualAddressNetworkSave(virtualAddressNetwork: String ): Unit","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/#baseservicetorsettings","text":"abstract class BaseServiceTorSettings : TorSettings (source) This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . It enables the updating of settings in a standardized manner so library users can simply instantiate TorServicePrefs , modify settings, and then call restartTor from the topl-service::TorServiceController to have them applied to the Tor Process. It also makes designing of a settings screen much easier for your application.","title":"BaseServiceTorSettings"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/#parameters","text":"servicePrefs - TorServicePrefs to query/save values to shared preferences defaultTorSettings - Default values to fall back on if nothing is returned from TorServicePrefs","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/#constructors","text":"Name Summary <init> This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . BaseServiceTorSettings(servicePrefs: TorServicePrefs , defaultTorSettings: ApplicationDefaultTorSettings )","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/#properties","text":"Name Summary connectionPadding open val connectionPadding: String customTorrc open val customTorrc: String ? defaultTorSettings Default values to fall back on if nothing is returned from TorServicePrefs val defaultTorSettings: ApplicationDefaultTorSettings disableNetwork open val disableNetwork: Boolean dnsPort open val dnsPort: String dnsPortIsolationFlags open val dnsPortIsolationFlags: List < String >? dormantClientTimeout open val dormantClientTimeout: Int ? entryNodes open val entryNodes: String ? excludeNodes open val excludeNodes: String ? exitNodes open val exitNodes: String ? hasBridges open val hasBridges: Boolean hasCookieAuthentication open val hasCookieAuthentication: Boolean hasDebugLogs open val hasDebugLogs: Boolean hasDormantCanceledByStartup open val hasDormantCanceledByStartup: Boolean hasOpenProxyOnAllInterfaces open val hasOpenProxyOnAllInterfaces: Boolean hasReachableAddress open val hasReachableAddress: Boolean hasReducedConnectionPadding open val hasReducedConnectionPadding: Boolean hasSafeSocks open val hasSafeSocks: Boolean hasStrictNodes open val hasStrictNodes: Boolean hasTestSocks open val hasTestSocks: Boolean httpTunnelPort open val httpTunnelPort: String httpTunnelPortIsolationFlags open val httpTunnelPortIsolationFlags: List < String >? isAutoMapHostsOnResolve open val isAutoMapHostsOnResolve: Boolean isRelay open val isRelay: Boolean listOfSupportedBridges open val listOfSupportedBridges: List < String > proxyHost open val proxyHost: String ? proxyPassword open val proxyPassword: String ? proxyPort open val proxyPort: Int ? proxySocks5Host open val proxySocks5Host: String ? proxySocks5ServerPort open val proxySocks5ServerPort: Int ? proxyType open val proxyType: String proxyUser open val proxyUser: String ? reachableAddressPorts open val reachableAddressPorts: String relayNickname open val relayNickname: String ? relayPort open val relayPort: String runAsDaemon open val runAsDaemon: Boolean servicePrefs TorServicePrefs to query/save values to shared preferences val servicePrefs: TorServicePrefs socksPort open val socksPort: String socksPortIsolationFlags open val socksPortIsolationFlags: List < String >? transPort open val transPort: String transPortIsolationFlags open val transPortIsolationFlags: List < String >? useSocks5 open val useSocks5: Boolean virtualAddressNetwork open val virtualAddressNetwork: String ?","title":"Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/#functions","text":"Name Summary connectionPaddingSave Saves the value for connectionPadding to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun connectionPaddingSave(connectionPadding: String ): Unit customTorrcSave Saves the value for customTorrc to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun customTorrcSave(customTorrc: String ?): Unit disableNetworkSave Saves the value for disableNetwork to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun disableNetworkSave(boolean: Boolean ): Unit dnsPortIsolationFlagsSave Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun dnsPortIsolationFlagsSave(isolationFlags: List < String >): Unit dnsPortSave Saves the value for dnsPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun dnsPortSave(dnsPort: String ): Unit dormantClientTimeoutSave abstract fun dormantClientTimeoutSave(minutes: Int ?): Unit entryNodesSave Saves the value for entryNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun entryNodesSave(entryNodes: String ?): Unit excludeNodesSave Saves the value for excludeNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun excludeNodesSave(excludeNodes: String ?): Unit exitNodesSave Saves the value for exitNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun exitNodesSave(exitNodes: String ?): Unit hasBridgesSave Saves the value for hasBridges to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasBridgesSave(boolean: Boolean ): Unit hasCookieAuthenticationSave Saves the value for hasCookieAuthentication to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasCookieAuthenticationSave(boolean: Boolean ): Unit hasDebugLogsSave Saves the value for hasDebugLogs to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasDebugLogsSave(boolean: Boolean ): Unit hasDormantCanceledByStartupSave Saves the value for hasDormantCanceledByStartup to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasDormantCanceledByStartupSave(boolean: Boolean ): Unit hasOpenProxyOnAllInterfacesSave Saves the value for hasOpenProxyOnAllInterfaces to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasOpenProxyOnAllInterfacesSave(boolean: Boolean ): Unit hasReachableAddressSave Saves the value for hasReachableAddress to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasReachableAddressSave(boolean: Boolean ): Unit hasReducedConnectionPaddingSave Saves the value for hasReducedConnectionPadding to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasReducedConnectionPaddingSave(boolean: Boolean ): Unit hasSafeSocksSave Saves the value for hasSafeSocks to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasSafeSocksSave(boolean: Boolean ): Unit hasStrictNodesSave Saves the value for hasStrictNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasStrictNodesSave(boolean: Boolean ): Unit hasTestSocksSave Saves the value for hasTestSocks to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun hasTestSocksSave(boolean: Boolean ): Unit httpPortIsolationFlagsSave Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun httpPortIsolationFlagsSave(isolationFlags: List < String >): Unit httpTunnelPortSave Saves the value for httpPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun httpTunnelPortSave(httpPort: String ): Unit isAutoMapHostsOnResolveSave Saves the value for isAutoMapHostsOnResolve to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun isAutoMapHostsOnResolveSave(boolean: Boolean ): Unit isRelaySave Saves the value for isRelay to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun isRelaySave(boolean: Boolean ): Unit proxyHostSave Saves the value for proxyHost to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyHostSave(proxyHost: String ?): Unit proxyPasswordSave Saves the value for proxyPassword to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyPasswordSave(proxyPassword: String ?): Unit proxyPortSave Saves the value for proxyPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyPortSave(proxyPort: Int ?): Unit proxySocks5HostSave Saves the value for proxySocks5Host to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxySocks5HostSave(proxySocks5Host: String ?): Unit proxySocks5ServerPortSave Saves the value for proxySocks5ServerPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxySocks5ServerPortSave(proxySocks5ServerPort: Int ?): Unit proxyTypeSave Saves the value for proxyType to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyTypeSave(proxyType: String ): Unit proxyUserSave Saves the value for proxyUser to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun proxyUserSave(proxyUser: String ?): Unit reachableAddressPortsSave Saves the value for reachableAddressPorts to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun reachableAddressPortsSave(reachableAddressPorts: String ): Unit relayNicknameSave Saves the value for relayNickname to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun relayNicknameSave(relayNickname: String ): Unit relayPortSave Saves the value for relayPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun relayPortSave(relayPort: String ): Unit runAsDaemonSave Saves the value for runAsDaemon to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun runAsDaemonSave(boolean: Boolean ): Unit socksPortIsolationFlagsSave Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun socksPortIsolationFlagsSave(isolationFlags: List < String >): Unit socksPortSave Saves the value for socksPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun socksPortSave(socksPort: String ): Unit transPortIsolationFlagsSave Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun transPortIsolationFlagsSave(isolationFlags: List < String >): Unit transPortSave Saves the value for transPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun transPortSave(transPort: String ): Unit useSocks5Save Saves the value for useSocks5 to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun useSocks5Save(boolean: Boolean ): Unit virtualAddressNetworkSave Saves the value for virtualAddressNetwork to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. abstract fun virtualAddressNetworkSave(virtualAddressNetwork: String ): Unit","title":"Functions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / <init> <init> \u00b6 BaseServiceTorSettings(servicePrefs: TorServicePrefs , defaultTorSettings: ApplicationDefaultTorSettings ) This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . It enables the updating of settings in a standardized manner so library users can simply instantiate TorServicePrefs , modify settings, and then call restartTor from the topl-service::TorServiceController to have them applied to the Tor Process. It also makes designing of a settings screen much easier for your application. Parameters \u00b6 servicePrefs - TorServicePrefs to query/save values to shared preferences defaultTorSettings - Default values to fall back on if nothing is returned from TorServicePrefs","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/-init-/#init","text":"BaseServiceTorSettings(servicePrefs: TorServicePrefs , defaultTorSettings: ApplicationDefaultTorSettings ) This class enables the querying of TorServicePrefs to obtain values potentially set by the User such that they are preferred over static/default values you may have set in your ApplicationDefaultTorSettings . It enables the updating of settings in a standardized manner so library users can simply instantiate TorServicePrefs , modify settings, and then call restartTor from the topl-service::TorServiceController to have them applied to the Tor Process. It also makes designing of a settings screen much easier for your application.","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/-init-/#parameters","text":"servicePrefs - TorServicePrefs to query/save values to shared preferences defaultTorSettings - Default values to fall back on if nothing is returned from TorServicePrefs","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/connection-padding-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / connectionPaddingSave connectionPaddingSave \u00b6 @WorkerThread abstract fun connectionPaddingSave(connectionPadding: String ): Unit (source) Saves the value for connectionPadding to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 connectionPadding - A io.matthewnelson.topl_core_base.BaseConsts.ConnectionPadding Exceptions \u00b6 IllegalArgumentException - if the value is not 0 (Off), 1 (On), or auto See Also io.matthewnelson.topl_core_base.BaseConsts.ConnectionPadding TorSettings.connectionPadding","title":"Connection padding save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/connection-padding-save/#connectionpaddingsave","text":"@WorkerThread abstract fun connectionPaddingSave(connectionPadding: String ): Unit (source) Saves the value for connectionPadding to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"connectionPaddingSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/connection-padding-save/#parameters","text":"connectionPadding - A io.matthewnelson.topl_core_base.BaseConsts.ConnectionPadding","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/connection-padding-save/#exceptions","text":"IllegalArgumentException - if the value is not 0 (Off), 1 (On), or auto See Also io.matthewnelson.topl_core_base.BaseConsts.ConnectionPadding TorSettings.connectionPadding","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/connection-padding/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / connectionPadding connectionPadding \u00b6 open val connectionPadding: String (source)","title":"Connection padding"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/connection-padding/#connectionpadding","text":"open val connectionPadding: String (source)","title":"connectionPadding"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/custom-torrc-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / customTorrcSave customTorrcSave \u00b6 @WorkerThread abstract fun customTorrcSave(customTorrc: String ?): Unit (source) Saves the value for customTorrc to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 customTorrc - A String of values to be added to the torrc file See Also TorSettings.customTorrc","title":"Custom torrc save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/custom-torrc-save/#customtorrcsave","text":"@WorkerThread abstract fun customTorrcSave(customTorrc: String ?): Unit (source) Saves the value for customTorrc to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"customTorrcSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/custom-torrc-save/#parameters","text":"customTorrc - A String of values to be added to the torrc file See Also TorSettings.customTorrc","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/custom-torrc/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / customTorrc customTorrc \u00b6 open val customTorrc: String ? (source)","title":"Custom torrc"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/custom-torrc/#customtorrc","text":"open val customTorrc: String ? (source)","title":"customTorrc"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/default-tor-settings/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / defaultTorSettings defaultTorSettings \u00b6 val defaultTorSettings: ApplicationDefaultTorSettings (source) Default values to fall back on if nothing is returned from TorServicePrefs","title":"Default tor settings"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/default-tor-settings/#defaulttorsettings","text":"val defaultTorSettings: ApplicationDefaultTorSettings (source) Default values to fall back on if nothing is returned from TorServicePrefs","title":"defaultTorSettings"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/disable-network-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / disableNetworkSave disableNetworkSave \u00b6 @WorkerThread abstract fun disableNetworkSave(boolean: Boolean ): Unit (source) Saves the value for disableNetwork to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - See Also TorSettings.disableNetwork","title":"Disable network save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/disable-network-save/#disablenetworksave","text":"@WorkerThread abstract fun disableNetworkSave(boolean: Boolean ): Unit (source) Saves the value for disableNetwork to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"disableNetworkSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/disable-network-save/#parameters","text":"boolean - See Also TorSettings.disableNetwork","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/disable-network/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / disableNetwork disableNetwork \u00b6 open val disableNetwork: Boolean (source)","title":"Disable network"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/disable-network/#disablenetwork","text":"open val disableNetwork: Boolean (source)","title":"disableNetwork"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-isolation-flags-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / dnsPortIsolationFlagsSave dnsPortIsolationFlagsSave \u00b6 @WorkerThread abstract fun dnsPortIsolationFlagsSave(isolationFlags: List < String >): Unit (source) Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 isolationFlags - A List of io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag \u2018s for the dnsPort See Also io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag TorSettings.dnsPortIsolationFlags","title":"Dns port isolation flags save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-isolation-flags-save/#dnsportisolationflagssave","text":"@WorkerThread abstract fun dnsPortIsolationFlagsSave(isolationFlags: List < String >): Unit (source) Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"dnsPortIsolationFlagsSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-isolation-flags-save/#parameters","text":"isolationFlags - A List of io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag \u2018s for the dnsPort See Also io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag TorSettings.dnsPortIsolationFlags","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-isolation-flags/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / dnsPortIsolationFlags dnsPortIsolationFlags \u00b6 open val dnsPortIsolationFlags: List < String >? (source)","title":"Dns port isolation flags"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-isolation-flags/#dnsportisolationflags","text":"open val dnsPortIsolationFlags: List < String >? (source)","title":"dnsPortIsolationFlags"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / dnsPortSave dnsPortSave \u00b6 @WorkerThread abstract fun dnsPortSave(dnsPort: String ): Unit (source) Saves the value for dnsPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 dnsPort - A String value of 0, auto, or number between 1024 and 65535 Exceptions \u00b6 IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.dnsPort","title":"Dns port save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-save/#dnsportsave","text":"@WorkerThread abstract fun dnsPortSave(dnsPort: String ): Unit (source) Saves the value for dnsPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"dnsPortSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-save/#parameters","text":"dnsPort - A String value of 0, auto, or number between 1024 and 65535","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port-save/#exceptions","text":"IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.dnsPort","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / dnsPort dnsPort \u00b6 open val dnsPort: String (source)","title":"Dns port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dns-port/#dnsport","text":"open val dnsPort: String (source)","title":"dnsPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dormant-client-timeout-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / dormantClientTimeoutSave dormantClientTimeoutSave \u00b6 @WorkerThread abstract fun dormantClientTimeoutSave(minutes: Int ?): Unit (source)","title":"Dormant client timeout save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dormant-client-timeout-save/#dormantclienttimeoutsave","text":"@WorkerThread abstract fun dormantClientTimeoutSave(minutes: Int ?): Unit (source)","title":"dormantClientTimeoutSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dormant-client-timeout/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / dormantClientTimeout dormantClientTimeout \u00b6 open val dormantClientTimeout: Int ? (source)","title":"Dormant client timeout"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/dormant-client-timeout/#dormantclienttimeout","text":"open val dormantClientTimeout: Int ? (source)","title":"dormantClientTimeout"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/entry-nodes-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / entryNodesSave entryNodesSave \u00b6 @WorkerThread abstract fun entryNodesSave(entryNodes: String ?): Unit (source) Saves the value for entryNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 entryNodes - A comma separated list of nodes See Also TorSettings.entryNodes","title":"Entry nodes save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/entry-nodes-save/#entrynodessave","text":"@WorkerThread abstract fun entryNodesSave(entryNodes: String ?): Unit (source) Saves the value for entryNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"entryNodesSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/entry-nodes-save/#parameters","text":"entryNodes - A comma separated list of nodes See Also TorSettings.entryNodes","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/entry-nodes/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / entryNodes entryNodes \u00b6 open val entryNodes: String ? (source)","title":"Entry nodes"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/entry-nodes/#entrynodes","text":"open val entryNodes: String ? (source)","title":"entryNodes"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exclude-nodes-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / excludeNodesSave excludeNodesSave \u00b6 @WorkerThread abstract fun excludeNodesSave(excludeNodes: String ?): Unit (source) Saves the value for excludeNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 excludeNodes - A comma separated list of nodes See Also TorSettings.excludeNodes","title":"Exclude nodes save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exclude-nodes-save/#excludenodessave","text":"@WorkerThread abstract fun excludeNodesSave(excludeNodes: String ?): Unit (source) Saves the value for excludeNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"excludeNodesSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exclude-nodes-save/#parameters","text":"excludeNodes - A comma separated list of nodes See Also TorSettings.excludeNodes","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exclude-nodes/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / excludeNodes excludeNodes \u00b6 open val excludeNodes: String ? (source)","title":"Exclude nodes"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exclude-nodes/#excludenodes","text":"open val excludeNodes: String ? (source)","title":"excludeNodes"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exit-nodes-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / exitNodesSave exitNodesSave \u00b6 @WorkerThread abstract fun exitNodesSave(exitNodes: String ?): Unit (source) Saves the value for exitNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 exitNodes - A comma separated list of nodes See Also TorSettings.exitNodes","title":"Exit nodes save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exit-nodes-save/#exitnodessave","text":"@WorkerThread abstract fun exitNodesSave(exitNodes: String ?): Unit (source) Saves the value for exitNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"exitNodesSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exit-nodes-save/#parameters","text":"exitNodes - A comma separated list of nodes See Also TorSettings.exitNodes","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exit-nodes/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / exitNodes exitNodes \u00b6 open val exitNodes: String ? (source)","title":"Exit nodes"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/exit-nodes/#exitnodes","text":"open val exitNodes: String ? (source)","title":"exitNodes"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-bridges-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasBridgesSave hasBridgesSave \u00b6 @WorkerThread abstract fun hasBridgesSave(boolean: Boolean ): Unit (source) Saves the value for hasBridges to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasBridges","title":"Has bridges save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-bridges-save/#hasbridgessave","text":"@WorkerThread abstract fun hasBridgesSave(boolean: Boolean ): Unit (source) Saves the value for hasBridges to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasBridgesSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-bridges-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasBridges","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-bridges/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasBridges hasBridges \u00b6 open val hasBridges: Boolean (source)","title":"Has bridges"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-bridges/#hasbridges","text":"open val hasBridges: Boolean (source)","title":"hasBridges"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-cookie-authentication-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasCookieAuthenticationSave hasCookieAuthenticationSave \u00b6 @WorkerThread abstract fun hasCookieAuthenticationSave(boolean: Boolean ): Unit (source) Saves the value for hasCookieAuthentication to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasCookieAuthentication","title":"Has cookie authentication save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-cookie-authentication-save/#hascookieauthenticationsave","text":"@WorkerThread abstract fun hasCookieAuthenticationSave(boolean: Boolean ): Unit (source) Saves the value for hasCookieAuthentication to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasCookieAuthenticationSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-cookie-authentication-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasCookieAuthentication","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-cookie-authentication/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasCookieAuthentication hasCookieAuthentication \u00b6 open val hasCookieAuthentication: Boolean (source)","title":"Has cookie authentication"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-cookie-authentication/#hascookieauthentication","text":"open val hasCookieAuthentication: Boolean (source)","title":"hasCookieAuthentication"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-debug-logs-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasDebugLogsSave hasDebugLogsSave \u00b6 @WorkerThread abstract fun hasDebugLogsSave(boolean: Boolean ): Unit (source) Saves the value for hasDebugLogs to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasDebugLogs","title":"Has debug logs save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-debug-logs-save/#hasdebuglogssave","text":"@WorkerThread abstract fun hasDebugLogsSave(boolean: Boolean ): Unit (source) Saves the value for hasDebugLogs to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasDebugLogsSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-debug-logs-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasDebugLogs","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-debug-logs/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasDebugLogs hasDebugLogs \u00b6 open val hasDebugLogs: Boolean (source)","title":"Has debug logs"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-debug-logs/#hasdebuglogs","text":"open val hasDebugLogs: Boolean (source)","title":"hasDebugLogs"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-dormant-canceled-by-startup-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasDormantCanceledByStartupSave hasDormantCanceledByStartupSave \u00b6 @WorkerThread abstract fun hasDormantCanceledByStartupSave(boolean: Boolean ): Unit (source) Saves the value for hasDormantCanceledByStartup to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasDormantCanceledByStartup","title":"Has dormant canceled by startup save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-dormant-canceled-by-startup-save/#hasdormantcanceledbystartupsave","text":"@WorkerThread abstract fun hasDormantCanceledByStartupSave(boolean: Boolean ): Unit (source) Saves the value for hasDormantCanceledByStartup to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasDormantCanceledByStartupSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-dormant-canceled-by-startup-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasDormantCanceledByStartup","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-dormant-canceled-by-startup/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasDormantCanceledByStartup hasDormantCanceledByStartup \u00b6 open val hasDormantCanceledByStartup: Boolean (source)","title":"Has dormant canceled by startup"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-dormant-canceled-by-startup/#hasdormantcanceledbystartup","text":"open val hasDormantCanceledByStartup: Boolean (source)","title":"hasDormantCanceledByStartup"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-open-proxy-on-all-interfaces-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasOpenProxyOnAllInterfacesSave hasOpenProxyOnAllInterfacesSave \u00b6 @WorkerThread abstract fun hasOpenProxyOnAllInterfacesSave(boolean: Boolean ): Unit (source) Saves the value for hasOpenProxyOnAllInterfaces to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasOpenProxyOnAllInterfaces","title":"Has open proxy on all interfaces save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-open-proxy-on-all-interfaces-save/#hasopenproxyonallinterfacessave","text":"@WorkerThread abstract fun hasOpenProxyOnAllInterfacesSave(boolean: Boolean ): Unit (source) Saves the value for hasOpenProxyOnAllInterfaces to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasOpenProxyOnAllInterfacesSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-open-proxy-on-all-interfaces-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasOpenProxyOnAllInterfaces","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-open-proxy-on-all-interfaces/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasOpenProxyOnAllInterfaces hasOpenProxyOnAllInterfaces \u00b6 open val hasOpenProxyOnAllInterfaces: Boolean (source)","title":"Has open proxy on all interfaces"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-open-proxy-on-all-interfaces/#hasopenproxyonallinterfaces","text":"open val hasOpenProxyOnAllInterfaces: Boolean (source)","title":"hasOpenProxyOnAllInterfaces"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reachable-address-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasReachableAddressSave hasReachableAddressSave \u00b6 @WorkerThread abstract fun hasReachableAddressSave(boolean: Boolean ): Unit (source) Saves the value for hasReachableAddress to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasReachableAddress","title":"Has reachable address save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reachable-address-save/#hasreachableaddresssave","text":"@WorkerThread abstract fun hasReachableAddressSave(boolean: Boolean ): Unit (source) Saves the value for hasReachableAddress to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasReachableAddressSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reachable-address-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasReachableAddress","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reachable-address/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasReachableAddress hasReachableAddress \u00b6 open val hasReachableAddress: Boolean (source)","title":"Has reachable address"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reachable-address/#hasreachableaddress","text":"open val hasReachableAddress: Boolean (source)","title":"hasReachableAddress"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reduced-connection-padding-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasReducedConnectionPaddingSave hasReducedConnectionPaddingSave \u00b6 @WorkerThread abstract fun hasReducedConnectionPaddingSave(boolean: Boolean ): Unit (source) Saves the value for hasReducedConnectionPadding to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasReducedConnectionPadding","title":"Has reduced connection padding save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reduced-connection-padding-save/#hasreducedconnectionpaddingsave","text":"@WorkerThread abstract fun hasReducedConnectionPaddingSave(boolean: Boolean ): Unit (source) Saves the value for hasReducedConnectionPadding to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasReducedConnectionPaddingSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reduced-connection-padding-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasReducedConnectionPadding","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reduced-connection-padding/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasReducedConnectionPadding hasReducedConnectionPadding \u00b6 open val hasReducedConnectionPadding: Boolean (source)","title":"Has reduced connection padding"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-reduced-connection-padding/#hasreducedconnectionpadding","text":"open val hasReducedConnectionPadding: Boolean (source)","title":"hasReducedConnectionPadding"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-safe-socks-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasSafeSocksSave hasSafeSocksSave \u00b6 @WorkerThread abstract fun hasSafeSocksSave(boolean: Boolean ): Unit (source) Saves the value for hasSafeSocks to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasSafeSocks","title":"Has safe socks save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-safe-socks-save/#hassafesockssave","text":"@WorkerThread abstract fun hasSafeSocksSave(boolean: Boolean ): Unit (source) Saves the value for hasSafeSocks to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasSafeSocksSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-safe-socks-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasSafeSocks","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-safe-socks/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasSafeSocks hasSafeSocks \u00b6 open val hasSafeSocks: Boolean (source)","title":"Has safe socks"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-safe-socks/#hassafesocks","text":"open val hasSafeSocks: Boolean (source)","title":"hasSafeSocks"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-strict-nodes-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasStrictNodesSave hasStrictNodesSave \u00b6 @WorkerThread abstract fun hasStrictNodesSave(boolean: Boolean ): Unit (source) Saves the value for hasStrictNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasStrictNodes","title":"Has strict nodes save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-strict-nodes-save/#hasstrictnodessave","text":"@WorkerThread abstract fun hasStrictNodesSave(boolean: Boolean ): Unit (source) Saves the value for hasStrictNodes to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasStrictNodesSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-strict-nodes-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasStrictNodes","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-strict-nodes/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasStrictNodes hasStrictNodes \u00b6 open val hasStrictNodes: Boolean (source)","title":"Has strict nodes"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-strict-nodes/#hasstrictnodes","text":"open val hasStrictNodes: Boolean (source)","title":"hasStrictNodes"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-test-socks-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasTestSocksSave hasTestSocksSave \u00b6 @WorkerThread abstract fun hasTestSocksSave(boolean: Boolean ): Unit (source) Saves the value for hasTestSocks to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.hasTestSocks","title":"Has test socks save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-test-socks-save/#hastestsockssave","text":"@WorkerThread abstract fun hasTestSocksSave(boolean: Boolean ): Unit (source) Saves the value for hasTestSocks to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"hasTestSocksSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-test-socks-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.hasTestSocks","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-test-socks/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / hasTestSocks hasTestSocks \u00b6 open val hasTestSocks: Boolean (source)","title":"Has test socks"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/has-test-socks/#hastestsocks","text":"open val hasTestSocks: Boolean (source)","title":"hasTestSocks"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-port-isolation-flags-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / httpPortIsolationFlagsSave httpPortIsolationFlagsSave \u00b6 @WorkerThread abstract fun httpPortIsolationFlagsSave(isolationFlags: List < String >): Unit (source) Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 isolationFlags - A List of io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag \u2018s for the httpTunnelPort See Also io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag TorSettings.httpTunnelPortIsolationFlags","title":"Http port isolation flags save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-port-isolation-flags-save/#httpportisolationflagssave","text":"@WorkerThread abstract fun httpPortIsolationFlagsSave(isolationFlags: List < String >): Unit (source) Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"httpPortIsolationFlagsSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-port-isolation-flags-save/#parameters","text":"isolationFlags - A List of io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag \u2018s for the httpTunnelPort See Also io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag TorSettings.httpTunnelPortIsolationFlags","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-tunnel-port-isolation-flags/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / httpTunnelPortIsolationFlags httpTunnelPortIsolationFlags \u00b6 open val httpTunnelPortIsolationFlags: List < String >? (source)","title":"Http tunnel port isolation flags"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-tunnel-port-isolation-flags/#httptunnelportisolationflags","text":"open val httpTunnelPortIsolationFlags: List < String >? (source)","title":"httpTunnelPortIsolationFlags"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-tunnel-port-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / httpTunnelPortSave httpTunnelPortSave \u00b6 @WorkerThread abstract fun httpTunnelPortSave(httpPort: String ): Unit (source) Saves the value for httpPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 httpPort - A String value of 0, auto, or number between 1024 and 65535 Exceptions \u00b6 IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.httpTunnelPort","title":"Http tunnel port save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-tunnel-port-save/#httptunnelportsave","text":"@WorkerThread abstract fun httpTunnelPortSave(httpPort: String ): Unit (source) Saves the value for httpPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"httpTunnelPortSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-tunnel-port-save/#parameters","text":"httpPort - A String value of 0, auto, or number between 1024 and 65535","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-tunnel-port-save/#exceptions","text":"IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.httpTunnelPort","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-tunnel-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / httpTunnelPort httpTunnelPort \u00b6 open val httpTunnelPort: String (source)","title":"Http tunnel port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/http-tunnel-port/#httptunnelport","text":"open val httpTunnelPort: String (source)","title":"httpTunnelPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-auto-map-hosts-on-resolve-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / isAutoMapHostsOnResolveSave isAutoMapHostsOnResolveSave \u00b6 @WorkerThread abstract fun isAutoMapHostsOnResolveSave(boolean: Boolean ): Unit (source) Saves the value for isAutoMapHostsOnResolve to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.isAutoMapHostsOnResolve","title":"Is auto map hosts on resolve save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-auto-map-hosts-on-resolve-save/#isautomaphostsonresolvesave","text":"@WorkerThread abstract fun isAutoMapHostsOnResolveSave(boolean: Boolean ): Unit (source) Saves the value for isAutoMapHostsOnResolve to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"isAutoMapHostsOnResolveSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-auto-map-hosts-on-resolve-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.isAutoMapHostsOnResolve","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-auto-map-hosts-on-resolve/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / isAutoMapHostsOnResolve isAutoMapHostsOnResolve \u00b6 open val isAutoMapHostsOnResolve: Boolean (source)","title":"Is auto map hosts on resolve"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-auto-map-hosts-on-resolve/#isautomaphostsonresolve","text":"open val isAutoMapHostsOnResolve: Boolean (source)","title":"isAutoMapHostsOnResolve"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-relay-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / isRelaySave isRelaySave \u00b6 @WorkerThread abstract fun isRelaySave(boolean: Boolean ): Unit (source) Saves the value for isRelay to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.isRelay","title":"Is relay save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-relay-save/#isrelaysave","text":"@WorkerThread abstract fun isRelaySave(boolean: Boolean ): Unit (source) Saves the value for isRelay to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"isRelaySave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-relay-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.isRelay","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-relay/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / isRelay isRelay \u00b6 open val isRelay: Boolean (source)","title":"Is relay"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/is-relay/#isrelay","text":"open val isRelay: Boolean (source)","title":"isRelay"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/list-of-supported-bridges/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / listOfSupportedBridges listOfSupportedBridges \u00b6 open val listOfSupportedBridges: List < String > (source)","title":"List of supported bridges"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/list-of-supported-bridges/#listofsupportedbridges","text":"open val listOfSupportedBridges: List < String > (source)","title":"listOfSupportedBridges"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-host-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyHostSave proxyHostSave \u00b6 @WorkerThread abstract fun proxyHostSave(proxyHost: String ?): Unit (source) Saves the value for proxyHost to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 proxyHost - See Also TorSettings.proxyHost","title":"Proxy host save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-host-save/#proxyhostsave","text":"@WorkerThread abstract fun proxyHostSave(proxyHost: String ?): Unit (source) Saves the value for proxyHost to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"proxyHostSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-host-save/#parameters","text":"proxyHost - See Also TorSettings.proxyHost","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-host/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyHost proxyHost \u00b6 open val proxyHost: String ? (source)","title":"Proxy host"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-host/#proxyhost","text":"open val proxyHost: String ? (source)","title":"proxyHost"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-password-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyPasswordSave proxyPasswordSave \u00b6 @WorkerThread abstract fun proxyPasswordSave(proxyPassword: String ?): Unit (source) Saves the value for proxyPassword to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 proxyPassword - See Also TorSettings.proxyPassword","title":"Proxy password save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-password-save/#proxypasswordsave","text":"@WorkerThread abstract fun proxyPasswordSave(proxyPassword: String ?): Unit (source) Saves the value for proxyPassword to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"proxyPasswordSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-password-save/#parameters","text":"proxyPassword - See Also TorSettings.proxyPassword","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-password/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyPassword proxyPassword \u00b6 open val proxyPassword: String ? (source)","title":"Proxy password"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-password/#proxypassword","text":"open val proxyPassword: String ? (source)","title":"proxyPassword"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-port-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyPortSave proxyPortSave \u00b6 @WorkerThread abstract fun proxyPortSave(proxyPort: Int ?): Unit (source) Saves the value for proxyPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 proxyPort - An Int value between 1024 and 65535, or null Exceptions \u00b6 IllegalArgumentException - if the value is not null , or between 1024 and 65535 See Also TorSettings.proxyPort","title":"Proxy port save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-port-save/#proxyportsave","text":"@WorkerThread abstract fun proxyPortSave(proxyPort: Int ?): Unit (source) Saves the value for proxyPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"proxyPortSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-port-save/#parameters","text":"proxyPort - An Int value between 1024 and 65535, or null","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-port-save/#exceptions","text":"IllegalArgumentException - if the value is not null , or between 1024 and 65535 See Also TorSettings.proxyPort","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyPort proxyPort \u00b6 open val proxyPort: Int ? (source)","title":"Proxy port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-port/#proxyport","text":"open val proxyPort: Int ? (source)","title":"proxyPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-host-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxySocks5HostSave proxySocks5HostSave \u00b6 @WorkerThread abstract fun proxySocks5HostSave(proxySocks5Host: String ?): Unit (source) Saves the value for proxySocks5Host to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 proxySocks5Host - See Also TorSettings.proxySocks5Host","title":"Proxy socks5 host save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-host-save/#proxysocks5hostsave","text":"@WorkerThread abstract fun proxySocks5HostSave(proxySocks5Host: String ?): Unit (source) Saves the value for proxySocks5Host to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"proxySocks5HostSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-host-save/#parameters","text":"proxySocks5Host - See Also TorSettings.proxySocks5Host","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-host/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxySocks5Host proxySocks5Host \u00b6 open val proxySocks5Host: String ? (source)","title":"Proxy socks5 host"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-host/#proxysocks5host","text":"open val proxySocks5Host: String ? (source)","title":"proxySocks5Host"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-server-port-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxySocks5ServerPortSave proxySocks5ServerPortSave \u00b6 @WorkerThread abstract fun proxySocks5ServerPortSave(proxySocks5ServerPort: Int ?): Unit (source) Saves the value for proxySocks5ServerPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 proxySocks5ServerPort - An Int value between 1024 and 65535, or null Exceptions \u00b6 IllegalArgumentException - if the value is not null , or between 1024 and 65535 See Also TorSettings.proxySocks5ServerPort","title":"Proxy socks5 server port save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-server-port-save/#proxysocks5serverportsave","text":"@WorkerThread abstract fun proxySocks5ServerPortSave(proxySocks5ServerPort: Int ?): Unit (source) Saves the value for proxySocks5ServerPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"proxySocks5ServerPortSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-server-port-save/#parameters","text":"proxySocks5ServerPort - An Int value between 1024 and 65535, or null","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-server-port-save/#exceptions","text":"IllegalArgumentException - if the value is not null , or between 1024 and 65535 See Also TorSettings.proxySocks5ServerPort","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-server-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxySocks5ServerPort proxySocks5ServerPort \u00b6 open val proxySocks5ServerPort: Int ? (source)","title":"Proxy socks5 server port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-socks5-server-port/#proxysocks5serverport","text":"open val proxySocks5ServerPort: Int ? (source)","title":"proxySocks5ServerPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-type-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyTypeSave proxyTypeSave \u00b6 @WorkerThread abstract fun proxyTypeSave(proxyType: String ): Unit (source) Saves the value for proxyType to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 proxyType - A io.matthewnelson.topl_core_base.BaseConsts.ProxyType Exceptions \u00b6 IllegalArgumentException - if the value is not empty (disabled), HTTPS, or Socks5 See Also io.matthewnelson.topl_core_base.BaseConsts.ProxyType TorSettings.proxyType","title":"Proxy type save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-type-save/#proxytypesave","text":"@WorkerThread abstract fun proxyTypeSave(proxyType: String ): Unit (source) Saves the value for proxyType to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"proxyTypeSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-type-save/#parameters","text":"proxyType - A io.matthewnelson.topl_core_base.BaseConsts.ProxyType","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-type-save/#exceptions","text":"IllegalArgumentException - if the value is not empty (disabled), HTTPS, or Socks5 See Also io.matthewnelson.topl_core_base.BaseConsts.ProxyType TorSettings.proxyType","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-type/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyType proxyType \u00b6 open val proxyType: String (source)","title":"Proxy type"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-type/#proxytype","text":"open val proxyType: String (source)","title":"proxyType"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-user-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyUserSave proxyUserSave \u00b6 @WorkerThread abstract fun proxyUserSave(proxyUser: String ?): Unit (source) Saves the value for proxyUser to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 proxyUser - See Also TorSettings.proxyUser","title":"Proxy user save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-user-save/#proxyusersave","text":"@WorkerThread abstract fun proxyUserSave(proxyUser: String ?): Unit (source) Saves the value for proxyUser to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"proxyUserSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-user-save/#parameters","text":"proxyUser - See Also TorSettings.proxyUser","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-user/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / proxyUser proxyUser \u00b6 open val proxyUser: String ? (source)","title":"Proxy user"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/proxy-user/#proxyuser","text":"open val proxyUser: String ? (source)","title":"proxyUser"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/reachable-address-ports-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / reachableAddressPortsSave reachableAddressPortsSave \u00b6 @WorkerThread abstract fun reachableAddressPortsSave(reachableAddressPorts: String ): Unit (source) Saves the value for reachableAddressPorts to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 reachableAddressPorts - See Also TorSettings.reachableAddressPorts","title":"Reachable address ports save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/reachable-address-ports-save/#reachableaddressportssave","text":"@WorkerThread abstract fun reachableAddressPortsSave(reachableAddressPorts: String ): Unit (source) Saves the value for reachableAddressPorts to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"reachableAddressPortsSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/reachable-address-ports-save/#parameters","text":"reachableAddressPorts - See Also TorSettings.reachableAddressPorts","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/reachable-address-ports/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / reachableAddressPorts reachableAddressPorts \u00b6 open val reachableAddressPorts: String (source)","title":"Reachable address ports"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/reachable-address-ports/#reachableaddressports","text":"open val reachableAddressPorts: String (source)","title":"reachableAddressPorts"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-nickname-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / relayNicknameSave relayNicknameSave \u00b6 @WorkerThread abstract fun relayNicknameSave(relayNickname: String ): Unit (source) Saves the value for relayNickname to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 relayNickname - See Also TorSettings.relayNickname","title":"Relay nickname save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-nickname-save/#relaynicknamesave","text":"@WorkerThread abstract fun relayNicknameSave(relayNickname: String ): Unit (source) Saves the value for relayNickname to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"relayNicknameSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-nickname-save/#parameters","text":"relayNickname - See Also TorSettings.relayNickname","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-nickname/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / relayNickname relayNickname \u00b6 open val relayNickname: String ? (source)","title":"Relay nickname"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-nickname/#relaynickname","text":"open val relayNickname: String ? (source)","title":"relayNickname"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-port-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / relayPortSave relayPortSave \u00b6 @WorkerThread abstract fun relayPortSave(relayPort: String ): Unit (source) Saves the value for relayPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 relayPort - A String value of 0, auto, or number between 1024 and 65535 Exceptions \u00b6 IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.relayPort","title":"Relay port save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-port-save/#relayportsave","text":"@WorkerThread abstract fun relayPortSave(relayPort: String ): Unit (source) Saves the value for relayPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"relayPortSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-port-save/#parameters","text":"relayPort - A String value of 0, auto, or number between 1024 and 65535","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-port-save/#exceptions","text":"IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.relayPort","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / relayPort relayPort \u00b6 open val relayPort: String (source)","title":"Relay port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/relay-port/#relayport","text":"open val relayPort: String (source)","title":"relayPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/run-as-daemon-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / runAsDaemonSave runAsDaemonSave \u00b6 @WorkerThread abstract fun runAsDaemonSave(boolean: Boolean ): Unit (source) Saves the value for runAsDaemon to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.runAsDaemon","title":"Run as daemon save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/run-as-daemon-save/#runasdaemonsave","text":"@WorkerThread abstract fun runAsDaemonSave(boolean: Boolean ): Unit (source) Saves the value for runAsDaemon to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"runAsDaemonSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/run-as-daemon-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.runAsDaemon","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/run-as-daemon/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / runAsDaemon runAsDaemon \u00b6 open val runAsDaemon: Boolean (source)","title":"Run as daemon"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/run-as-daemon/#runasdaemon","text":"open val runAsDaemon: Boolean (source)","title":"runAsDaemon"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/service-prefs/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / servicePrefs servicePrefs \u00b6 val servicePrefs: TorServicePrefs (source) TorServicePrefs to query/save values to shared preferences","title":"Service prefs"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/service-prefs/#serviceprefs","text":"val servicePrefs: TorServicePrefs (source) TorServicePrefs to query/save values to shared preferences","title":"servicePrefs"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-isolation-flags-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / socksPortIsolationFlagsSave socksPortIsolationFlagsSave \u00b6 @WorkerThread abstract fun socksPortIsolationFlagsSave(isolationFlags: List < String >): Unit (source) Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 isolationFlags - A List of io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag \u2018s for the socksPort See Also io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag TorSettings.socksPortIsolationFlags","title":"Socks port isolation flags save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-isolation-flags-save/#socksportisolationflagssave","text":"@WorkerThread abstract fun socksPortIsolationFlagsSave(isolationFlags: List < String >): Unit (source) Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"socksPortIsolationFlagsSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-isolation-flags-save/#parameters","text":"isolationFlags - A List of io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag \u2018s for the socksPort See Also io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag TorSettings.socksPortIsolationFlags","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-isolation-flags/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / socksPortIsolationFlags socksPortIsolationFlags \u00b6 open val socksPortIsolationFlags: List < String >? (source)","title":"Socks port isolation flags"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-isolation-flags/#socksportisolationflags","text":"open val socksPortIsolationFlags: List < String >? (source)","title":"socksPortIsolationFlags"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / socksPortSave socksPortSave \u00b6 @WorkerThread abstract fun socksPortSave(socksPort: String ): Unit (source) Saves the value for socksPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 socksPort - A String value of 0, auto, or number between 1024 and 65535 Exceptions \u00b6 IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.socksPort","title":"Socks port save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-save/#socksportsave","text":"@WorkerThread abstract fun socksPortSave(socksPort: String ): Unit (source) Saves the value for socksPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"socksPortSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-save/#parameters","text":"socksPort - A String value of 0, auto, or number between 1024 and 65535","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port-save/#exceptions","text":"IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.socksPort","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / socksPort socksPort \u00b6 open val socksPort: String (source)","title":"Socks port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/socks-port/#socksport","text":"open val socksPort: String (source)","title":"socksPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-isolation-flags-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / transPortIsolationFlagsSave transPortIsolationFlagsSave \u00b6 @WorkerThread abstract fun transPortIsolationFlagsSave(isolationFlags: List < String >): Unit (source) Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 isolationFlags - A List of io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag \u2018s for the transPort See Also io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag TorSettings.transPortIsolationFlags","title":"Trans port isolation flags save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-isolation-flags-save/#transportisolationflagssave","text":"@WorkerThread abstract fun transPortIsolationFlagsSave(isolationFlags: List < String >): Unit (source) Saves the value for isolationFlags to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"transPortIsolationFlagsSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-isolation-flags-save/#parameters","text":"isolationFlags - A List of io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag \u2018s for the transPort See Also io.matthewnelson.topl_core_base.BaseConsts.IsolationFlag TorSettings.transPortIsolationFlags","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-isolation-flags/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / transPortIsolationFlags transPortIsolationFlags \u00b6 open val transPortIsolationFlags: List < String >? (source)","title":"Trans port isolation flags"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-isolation-flags/#transportisolationflags","text":"open val transPortIsolationFlags: List < String >? (source)","title":"transPortIsolationFlags"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / transPortSave transPortSave \u00b6 @WorkerThread abstract fun transPortSave(transPort: String ): Unit (source) Saves the value for transPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 transPort - A String value of 0, auto, or number between 1024 and 65535 Exceptions \u00b6 IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.transPort","title":"Trans port save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-save/#transportsave","text":"@WorkerThread abstract fun transPortSave(transPort: String ): Unit (source) Saves the value for transPort to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"transPortSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-save/#parameters","text":"transPort - A String value of 0, auto, or number between 1024 and 65535","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port-save/#exceptions","text":"IllegalArgumentException - if the value is not 0, auto, or between 1024 and 65535 See Also TorSettings.transPort","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / transPort transPort \u00b6 open val transPort: String (source)","title":"Trans port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/trans-port/#transport","text":"open val transPort: String (source)","title":"transPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/use-socks5-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / useSocks5Save useSocks5Save \u00b6 @WorkerThread abstract fun useSocks5Save(boolean: Boolean ): Unit (source) Saves the value for useSocks5 to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 boolean - to enable/disable See Also TorSettings.useSocks5","title":"Use socks5 save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/use-socks5-save/#usesocks5save","text":"@WorkerThread abstract fun useSocks5Save(boolean: Boolean ): Unit (source) Saves the value for useSocks5 to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"useSocks5Save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/use-socks5-save/#parameters","text":"boolean - to enable/disable See Also TorSettings.useSocks5","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/use-socks5/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / useSocks5 useSocks5 \u00b6 open val useSocks5: Boolean (source)","title":"Use socks5"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/use-socks5/#usesocks5","text":"open val useSocks5: Boolean (source)","title":"useSocks5"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/virtual-address-network-save/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / virtualAddressNetworkSave virtualAddressNetworkSave \u00b6 @WorkerThread abstract fun virtualAddressNetworkSave(virtualAddressNetwork: String ): Unit (source) Saves the value for virtualAddressNetwork to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists. Parameters \u00b6 virtualAddressNetwork - See Also TorSettings.virtualAddressNetwork","title":"Virtual address network save"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/virtual-address-network-save/#virtualaddressnetworksave","text":"@WorkerThread abstract fun virtualAddressNetworkSave(virtualAddressNetwork: String ): Unit (source) Saves the value for virtualAddressNetwork to TorServicePrefs . If the value is the same as what is declared in defaultTorSettings , TorServicePrefs is queried to remove the setting if it exists.","title":"virtualAddressNetworkSave"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/virtual-address-network-save/#parameters","text":"virtualAddressNetwork - See Also TorSettings.virtualAddressNetwork","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/virtual-address-network/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseServiceTorSettings / virtualAddressNetwork virtualAddressNetwork \u00b6 open val virtualAddressNetwork: String ? (source)","title":"Virtual address network"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-service-tor-settings/virtual-address-network/#virtualaddressnetwork","text":"open val virtualAddressNetwork: String ? (source)","title":"virtualAddressNetwork"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseV3ClientAuthManager BaseV3ClientAuthManager \u00b6 abstract class BaseV3ClientAuthManager (source) Constructors \u00b6 Name Summary <init> BaseV3ClientAuthManager() Functions \u00b6 Name Summary addV3ClientAuthenticationPrivateKey Creates a file containing v3 Client Authorization for a Hidden Service in the format of: abstract fun addV3ClientAuthenticationPrivateKey(nickname: String , onionAddress: String , base32EncodedPrivateKey: String ): File ? deleteFile abstract fun deleteFile(nickname: String ): Boolean ? abstract fun deleteFile(file: File ): Boolean ? getAllFileNicknames From the v3 Client Authentication directory, all files that contain the \u201c.auth_private\u201d extension will have their name w/o the extension returned in an array. If the directory is empty, returns null . abstract fun getAllFileNicknames(): Array < String >? getAllFiles All files within the v3 Client Authentication directory are returned. If the directory is empty, returns null . abstract fun getAllFiles(): Array < File >? getFileByNickname Retrieve a v3 client authentication file by the nickname, whether the file extension \u201c.auth_private\u201d is included or not. abstract fun getFileByNickname(nickname: String ): File ? getFileContent abstract fun getFileContent(nickname: String ): V3ClientAuthContent ? abstract fun getFileContent(file: File ): V3ClientAuthContent ?","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/#basev3clientauthmanager","text":"abstract class BaseV3ClientAuthManager (source)","title":"BaseV3ClientAuthManager"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/#constructors","text":"Name Summary <init> BaseV3ClientAuthManager()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/#functions","text":"Name Summary addV3ClientAuthenticationPrivateKey Creates a file containing v3 Client Authorization for a Hidden Service in the format of: abstract fun addV3ClientAuthenticationPrivateKey(nickname: String , onionAddress: String , base32EncodedPrivateKey: String ): File ? deleteFile abstract fun deleteFile(nickname: String ): Boolean ? abstract fun deleteFile(file: File ): Boolean ? getAllFileNicknames From the v3 Client Authentication directory, all files that contain the \u201c.auth_private\u201d extension will have their name w/o the extension returned in an array. If the directory is empty, returns null . abstract fun getAllFileNicknames(): Array < String >? getAllFiles All files within the v3 Client Authentication directory are returned. If the directory is empty, returns null . abstract fun getAllFiles(): Array < File >? getFileByNickname Retrieve a v3 client authentication file by the nickname, whether the file extension \u201c.auth_private\u201d is included or not. abstract fun getFileByNickname(nickname: String ): File ? getFileContent abstract fun getFileContent(nickname: String ): V3ClientAuthContent ? abstract fun getFileContent(file: File ): V3ClientAuthContent ?","title":"Functions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseV3ClientAuthManager / <init> <init> \u00b6 BaseV3ClientAuthManager()","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/-init-/#init","text":"BaseV3ClientAuthManager()","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/add-v3-client-authentication-private-key/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseV3ClientAuthManager / addV3ClientAuthenticationPrivateKey addV3ClientAuthenticationPrivateKey \u00b6 @WorkerThread abstract fun addV3ClientAuthenticationPrivateKey(nickname: String , onionAddress: String , base32EncodedPrivateKey: String ): File ? (source) Creates a file containing v3 Client Authorization for a Hidden Service in the format of: Filename: nickname .auth_private File Contents: (56-char-onion-addr- without .onion):descriptor:x25519:(x25519 private key in base32) Exceptions are thrown for you with adequate messages if the values passed are non-compliant. Docs: https://2019.www.torproject.org/docs/tor-onion-service.html.en#ClientAuthorization Parameters \u00b6 nickname - The nickname for the file. Is appended with .auth_private and used as the File name nickname requirements are: onionAddress - The .onion address for which this Private Key will exist for base32EncodedPrivateKey - The private key for authenticating to the Hidden Service Exceptions \u00b6 IllegalArgumentException - If passed arguments are not compliant with the spec IllegalStateException - If the file already exists (and must be deleted before overwriting), or if a file exists with the same onion address & private key SecurityException - If access is not authorized Return The File if it was created properly, null if it was not","title":"Add v3 client authentication private key"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/add-v3-client-authentication-private-key/#addv3clientauthenticationprivatekey","text":"@WorkerThread abstract fun addV3ClientAuthenticationPrivateKey(nickname: String , onionAddress: String , base32EncodedPrivateKey: String ): File ? (source) Creates a file containing v3 Client Authorization for a Hidden Service in the format of: Filename: nickname .auth_private File Contents: (56-char-onion-addr- without .onion):descriptor:x25519:(x25519 private key in base32) Exceptions are thrown for you with adequate messages if the values passed are non-compliant. Docs: https://2019.www.torproject.org/docs/tor-onion-service.html.en#ClientAuthorization","title":"addV3ClientAuthenticationPrivateKey"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/add-v3-client-authentication-private-key/#parameters","text":"nickname - The nickname for the file. Is appended with .auth_private and used as the File name nickname requirements are: onionAddress - The .onion address for which this Private Key will exist for base32EncodedPrivateKey - The private key for authenticating to the Hidden Service","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/add-v3-client-authentication-private-key/#exceptions","text":"IllegalArgumentException - If passed arguments are not compliant with the spec IllegalStateException - If the file already exists (and must be deleted before overwriting), or if a file exists with the same onion address & private key SecurityException - If access is not authorized Return The File if it was created properly, null if it was not","title":"Exceptions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/delete-file/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseV3ClientAuthManager / deleteFile deleteFile \u00b6 @WorkerThread abstract fun deleteFile(nickname: String ): Boolean ? (source) @WorkerThread abstract fun deleteFile(file: File ): Boolean ? (source)","title":"Delete file"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/delete-file/#deletefile","text":"@WorkerThread abstract fun deleteFile(nickname: String ): Boolean ? (source) @WorkerThread abstract fun deleteFile(file: File ): Boolean ? (source)","title":"deleteFile"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-all-file-nicknames/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseV3ClientAuthManager / getAllFileNicknames getAllFileNicknames \u00b6 @WorkerThread abstract fun getAllFileNicknames(): Array < String >? (source) From the v3 Client Authentication directory, all files that contain the \u201c.auth_private\u201d extension will have their name w/o the extension returned in an array. If the directory is empty, returns null .","title":"Get all file nicknames"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-all-file-nicknames/#getallfilenicknames","text":"@WorkerThread abstract fun getAllFileNicknames(): Array < String >? (source) From the v3 Client Authentication directory, all files that contain the \u201c.auth_private\u201d extension will have their name w/o the extension returned in an array. If the directory is empty, returns null .","title":"getAllFileNicknames"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-all-files/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseV3ClientAuthManager / getAllFiles getAllFiles \u00b6 @WorkerThread abstract fun getAllFiles(): Array < File >? (source) All files within the v3 Client Authentication directory are returned. If the directory is empty, returns null .","title":"Get all files"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-all-files/#getallfiles","text":"@WorkerThread abstract fun getAllFiles(): Array < File >? (source) All files within the v3 Client Authentication directory are returned. If the directory is empty, returns null .","title":"getAllFiles"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-file-by-nickname/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseV3ClientAuthManager / getFileByNickname getFileByNickname \u00b6 @WorkerThread abstract fun getFileByNickname(nickname: String ): File ? (source) Retrieve a v3 client authentication file by the nickname, whether the file extension \u201c.auth_private\u201d is included or not. Parameters \u00b6 nickname - The pre file extension name","title":"Get file by nickname"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-file-by-nickname/#getfilebynickname","text":"@WorkerThread abstract fun getFileByNickname(nickname: String ): File ? (source) Retrieve a v3 client authentication file by the nickname, whether the file extension \u201c.auth_private\u201d is included or not.","title":"getFileByNickname"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-file-by-nickname/#parameters","text":"nickname - The pre file extension name","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-file-content/","text":"topl-service-base / io.matthewnelson.topl_service_base / BaseV3ClientAuthManager / getFileContent getFileContent \u00b6 @WorkerThread abstract fun getFileContent(nickname: String ): V3ClientAuthContent ? (source) @WorkerThread abstract fun getFileContent(file: File ): V3ClientAuthContent ? (source)","title":"Get file content"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-base-v3-client-auth-manager/get-file-content/#getfilecontent","text":"@WorkerThread abstract fun getFileContent(nickname: String ): V3ClientAuthContent ? (source) @WorkerThread abstract fun getFileContent(file: File ): V3ClientAuthContent ? (source)","title":"getFileContent"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceExecutionHooks ServiceExecutionHooks \u00b6 abstract class ServiceExecutionHooks (source) Set Hooks to be executed from TorService. class MyServiceExecutionHooks : ServiceExecutionHooks () { override suspend fun executeOnCreateTorService ( context : Context ) { // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook started\" ) delay ( 20 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook completed\" ) } } } } override suspend fun executeOnStartCommandBeforeStartTor ( context : Context ) { // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook started\" ) delay ( 1 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook completed\" ) } } } } override suspend fun executeBeforeStartTor ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook completed\" ) } } } override suspend fun executeAfterStopTor ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook completed\" ) } } } override suspend fun executeBeforeStoppingService ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook started\" ) delay ( 2 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook completed\" ) } } } } Constructors \u00b6 Name Summary <init> Set Hooks to be executed from TorService. ServiceExecutionHooks() Functions \u00b6 Name Summary executeAfterStopTor Is executed from TorService.stopTor on Dispatchers.IO open suspend fun executeAfterStopTor(context: Context ): Unit executeBeforeStartTor Is executed from TorService.startTor on Dispatchers.IO open suspend fun executeBeforeStartTor(context: Context ): Unit executeBeforeStoppingService Is executed from TorService.stopService on Dispatchers.IO open suspend fun executeBeforeStoppingService(context: Context ): Unit executeOnCreateTorService Is executed from TorService.onCreate on Dispatchers.Default launched from it\u2019s own coroutine. open suspend fun executeOnCreateTorService(context: Context ): Unit executeOnStartCommandBeforeStartTor Is executed from TorService.onStartCommand on Dispatchers.Default. This works in conjunction with executeBeforeStoppingService such that if executeBeforeStoppingService is active, executeOnStartCommandBeforeStartTor will suspend until that has been completed, then execute, then start Tor. open suspend fun executeOnStartCommandBeforeStartTor(context: Context ): Unit","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/#serviceexecutionhooks","text":"abstract class ServiceExecutionHooks (source) Set Hooks to be executed from TorService. class MyServiceExecutionHooks : ServiceExecutionHooks () { override suspend fun executeOnCreateTorService ( context : Context ) { // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook started\" ) delay ( 20 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook completed\" ) } } } } override suspend fun executeOnStartCommandBeforeStartTor ( context : Context ) { // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook started\" ) delay ( 1 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook completed\" ) } } } } override suspend fun executeBeforeStartTor ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook completed\" ) } } } override suspend fun executeAfterStopTor ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook completed\" ) } } } override suspend fun executeBeforeStoppingService ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook started\" ) delay ( 2 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook completed\" ) } } } }","title":"ServiceExecutionHooks"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/#constructors","text":"Name Summary <init> Set Hooks to be executed from TorService. ServiceExecutionHooks()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/#functions","text":"Name Summary executeAfterStopTor Is executed from TorService.stopTor on Dispatchers.IO open suspend fun executeAfterStopTor(context: Context ): Unit executeBeforeStartTor Is executed from TorService.startTor on Dispatchers.IO open suspend fun executeBeforeStartTor(context: Context ): Unit executeBeforeStoppingService Is executed from TorService.stopService on Dispatchers.IO open suspend fun executeBeforeStoppingService(context: Context ): Unit executeOnCreateTorService Is executed from TorService.onCreate on Dispatchers.Default launched from it\u2019s own coroutine. open suspend fun executeOnCreateTorService(context: Context ): Unit executeOnStartCommandBeforeStartTor Is executed from TorService.onStartCommand on Dispatchers.Default. This works in conjunction with executeBeforeStoppingService such that if executeBeforeStoppingService is active, executeOnStartCommandBeforeStartTor will suspend until that has been completed, then execute, then start Tor. open suspend fun executeOnStartCommandBeforeStartTor(context: Context ): Unit","title":"Functions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceExecutionHooks / <init> <init> \u00b6 ServiceExecutionHooks() Set Hooks to be executed from TorService. class MyServiceExecutionHooks : ServiceExecutionHooks () { override suspend fun executeOnCreateTorService ( context : Context ) { // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook started\" ) delay ( 20 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook completed\" ) } } } } override suspend fun executeOnStartCommandBeforeStartTor ( context : Context ) { // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook started\" ) delay ( 1 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook completed\" ) } } } } override suspend fun executeBeforeStartTor ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook completed\" ) } } } override suspend fun executeAfterStopTor ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook completed\" ) } } } override suspend fun executeBeforeStoppingService ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook started\" ) delay ( 2 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook completed\" ) } } } }","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/-init-/#init","text":"ServiceExecutionHooks() Set Hooks to be executed from TorService. class MyServiceExecutionHooks : ServiceExecutionHooks () { override suspend fun executeOnCreateTorService ( context : Context ) { // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook started\" ) delay ( 20 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook completed\" ) } } } } override suspend fun executeOnStartCommandBeforeStartTor ( context : Context ) { // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook started\" ) delay ( 1 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook completed\" ) } } } } override suspend fun executeBeforeStartTor ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook completed\" ) } } } override suspend fun executeAfterStopTor ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook completed\" ) } } } override suspend fun executeBeforeStoppingService ( context : Context ) { // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook started\" ) delay ( 2 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook completed\" ) } } } }","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-after-stop-tor/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceExecutionHooks / executeAfterStopTor executeAfterStopTor \u00b6 open suspend fun executeAfterStopTor(context: Context ): Unit (source) Is executed from TorService.stopTor on Dispatchers.IO This is meant to provide synchronous code execution after Tor has been stopped, and will be executed every single time Tor is stopped (even on restarts). WARNING : Indefinitely suspending the coroutine (ex. collecting Flow or something) will also indefinitely suspend the ServiceActionProcessor which will inhibit processing of any other commands; perform those tasks from executeOnCreateTorService . NOTE : Exceptions thrown from your implementation will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook completed\" ) } }","title":"Execute after stop tor"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-after-stop-tor/#executeafterstoptor","text":"open suspend fun executeAfterStopTor(context: Context ): Unit (source) Is executed from TorService.stopTor on Dispatchers.IO This is meant to provide synchronous code execution after Tor has been stopped, and will be executed every single time Tor is stopped (even on restarts). WARNING : Indefinitely suspending the coroutine (ex. collecting Flow or something) will also indefinitely suspend the ServiceActionProcessor which will inhibit processing of any other commands; perform those tasks from executeOnCreateTorService . NOTE : Exceptions thrown from your implementation will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"AfterStopTor execution hook completed\" ) } }","title":"executeAfterStopTor"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-before-start-tor/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceExecutionHooks / executeBeforeStartTor executeBeforeStartTor \u00b6 open suspend fun executeBeforeStartTor(context: Context ): Unit (source) Is executed from TorService.startTor on Dispatchers.IO This is meant to provide synchronous code execution prior to the start of Tor, and will be executed every single time Tor is started (even on restarts). WARNING : Indefinitely suspending the coroutine (ex. collecting Flow or something) will also indefinitely suspend the ServiceActionProcessor which will inhibit processing of any other commands; perform those tasks from executeOnCreateTorService . NOTE : Exceptions thrown from your implementation will inhibit starting Tor and will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook completed\" ) } }","title":"Execute before start tor"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-before-start-tor/#executebeforestarttor","text":"open suspend fun executeBeforeStartTor(context: Context ): Unit (source) Is executed from TorService.startTor on Dispatchers.IO This is meant to provide synchronous code execution prior to the start of Tor, and will be executed every single time Tor is started (even on restarts). WARNING : Indefinitely suspending the coroutine (ex. collecting Flow or something) will also indefinitely suspend the ServiceActionProcessor which will inhibit processing of any other commands; perform those tasks from executeOnCreateTorService . NOTE : Exceptions thrown from your implementation will inhibit starting Tor and will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook started\" ) delay ( 500L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStartTor execution hook completed\" ) } }","title":"executeBeforeStartTor"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-before-stopping-service/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceExecutionHooks / executeBeforeStoppingService executeBeforeStoppingService \u00b6 open suspend fun executeBeforeStoppingService(context: Context ): Unit (source) Is executed from TorService.stopService on Dispatchers.IO This is meant to provide synchronous code execution prior to calling stopSelf() on the service. When this is called for execution, executeOnStartCommandBeforeStartTor , will be allowed to execute again if TorServiceController.startTor() is called prior to this method\u2019s completion. WARNING : Indefinitely suspending the coroutine (ex. collecting Flow or something) will also indefinitely suspend the ServiceActionProcessor which will inhibit processing of any other commands; perform those tasks from executeOnCreateTorService . NOTE : Exceptions thrown from your implementation will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook started\" ) delay ( 2 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook completed\" ) } }","title":"Execute before stopping service"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-before-stopping-service/#executebeforestoppingservice","text":"open suspend fun executeBeforeStoppingService(context: Context ): Unit (source) Is executed from TorService.stopService on Dispatchers.IO This is meant to provide synchronous code execution prior to calling stopSelf() on the service. When this is called for execution, executeOnStartCommandBeforeStartTor , will be allowed to execute again if TorServiceController.startTor() is called prior to this method\u2019s completion. WARNING : Indefinitely suspending the coroutine (ex. collecting Flow or something) will also indefinitely suspend the ServiceActionProcessor which will inhibit processing of any other commands; perform those tasks from executeOnCreateTorService . NOTE : Exceptions thrown from your implementation will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.IO withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> if ( ! settings . hasDebugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook started\" ) delay ( 2 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"BeforeStoppingService execution hook completed\" ) } }","title":"executeBeforeStoppingService"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-on-create-tor-service/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceExecutionHooks / executeOnCreateTorService executeOnCreateTorService \u00b6 open suspend fun executeOnCreateTorService(context: Context ): Unit (source) Is executed from TorService.onCreate on Dispatchers.Default launched from it\u2019s own coroutine. NOTE : Exceptions thrown from your implementation will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook started\" ) delay ( 20 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook completed\" ) } } }","title":"Execute on create tor service"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-on-create-tor-service/#executeoncreatetorservice","text":"open suspend fun executeOnCreateTorService(context: Context ): Unit (source) Is executed from TorService.onCreate on Dispatchers.Default launched from it\u2019s own coroutine. NOTE : Exceptions thrown from your implementation will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook started\" ) delay ( 20 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"onCreateTorService execution hook completed\" ) } } }","title":"executeOnCreateTorService"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-on-start-command-before-start-tor/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceExecutionHooks / executeOnStartCommandBeforeStartTor executeOnStartCommandBeforeStartTor \u00b6 open suspend fun executeOnStartCommandBeforeStartTor(context: Context ): Unit (source) Is executed from TorService.onStartCommand on Dispatchers.Default. This works in conjunction with executeBeforeStoppingService such that if executeBeforeStoppingService is active, executeOnStartCommandBeforeStartTor will suspend until that has been completed, then execute, then start Tor. This is meant to provide quasi one-time synchronous code execution at first start of TorService, prior to starting Tor. Example usage: If you want to query a DB for V3 Client Authorization Keys stored in an encrypted fashion, write them to disk prior to first start of Tor, then in executeBeforeStoppingService delete the private keys. If the user (or some other process) executes TorServiceController.startTor() while executeBeforeStoppingService is active, TorService.stopSelf() be prevented from being called, execution of this method will suspend until executeBeforeStoppingService completes, then execute, then Tor will be started again. WARNING : Indefinitely suspending the coroutine (ex. collecting Flow or something) will also indefinitely suspend the ServiceActionProcessor which will inhibit processing of any other commands; perform those tasks from executeOnCreateTorService . NOTE : Exceptions thrown from your implementation will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook started\" ) delay ( 1 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook completed\" ) } } }","title":"Execute on start command before start tor"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-execution-hooks/execute-on-start-command-before-start-tor/#executeonstartcommandbeforestarttor","text":"open suspend fun executeOnStartCommandBeforeStartTor(context: Context ): Unit (source) Is executed from TorService.onStartCommand on Dispatchers.Default. This works in conjunction with executeBeforeStoppingService such that if executeBeforeStoppingService is active, executeOnStartCommandBeforeStartTor will suspend until that has been completed, then execute, then start Tor. This is meant to provide quasi one-time synchronous code execution at first start of TorService, prior to starting Tor. Example usage: If you want to query a DB for V3 Client Authorization Keys stored in an encrypted fashion, write them to disk prior to first start of Tor, then in executeBeforeStoppingService delete the private keys. If the user (or some other process) executes TorServiceController.startTor() while executeBeforeStoppingService is active, TorService.stopSelf() be prevented from being called, execution of this method will suspend until executeBeforeStoppingService completes, then execute, then Tor will be started again. WARNING : Indefinitely suspending the coroutine (ex. collecting Flow or something) will also indefinitely suspend the ServiceActionProcessor which will inhibit processing of any other commands; perform those tasks from executeOnCreateTorService . NOTE : Exceptions thrown from your implementation will be broadcast via the EventBroadcaster on Dispatchers.Main. // Executed on Dispatchers.Default, so querying shared prefs has to switch // context to IO. withContext ( Dispatchers . Main ) { TorServiceController . getServiceTorSettings () }. let { settings -> withContext ( Dispatchers . IO ) { settings . hasDebugLogs }. let { debugLogs -> if ( ! debugLogs ) { return } withContext ( Dispatchers . Main ) { TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook started\" ) delay ( 1 _000L ) TorServiceController . appEventBroadcaster ?. broadcastDebug ( \" ${ BroadcastType . DEBUG } |\" + \" ${ this @MyServiceExecutionHooks.javaClass.simpleName } |\" + \"OnStartCommandBeforeStartTor execution hook completed\" ) } } }","title":"executeOnStartCommandBeforeStartTor"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-utilities/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceUtilities ServiceUtilities \u00b6 object ServiceUtilities (source) Functions \u00b6 Name Summary getFormattedBandwidthString Formats the supplied values to look like: 20KBps \u2193 / 85KBps \u2191``fun getFormattedBandwidthString(download: Long , upload: Long ): String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-utilities/#serviceutilities","text":"object ServiceUtilities (source)","title":"ServiceUtilities"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-utilities/#functions","text":"Name Summary getFormattedBandwidthString Formats the supplied values to look like: 20KBps \u2193 / 85KBps \u2191``fun getFormattedBandwidthString(download: Long , upload: Long ): String","title":"Functions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-utilities/get-formatted-bandwidth-string/","text":"topl-service-base / io.matthewnelson.topl_service_base / ServiceUtilities / getFormattedBandwidthString getFormattedBandwidthString \u00b6 @JvmStatic fun getFormattedBandwidthString(download: Long , upload: Long ): String (source) Formats the supplied values to look like: 20KBps \u2193 / 85KBps \u2191 Parameters \u00b6 download - Long value associated with download (bytesRead) upload - Long value associated with upload (bytesWritten)","title":"Get formatted bandwidth string"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-utilities/get-formatted-bandwidth-string/#getformattedbandwidthstring","text":"@JvmStatic fun getFormattedBandwidthString(download: Long , upload: Long ): String (source) Formats the supplied values to look like: 20KBps \u2193 / 85KBps \u2191","title":"getFormattedBandwidthString"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-service-utilities/get-formatted-bandwidth-string/#parameters","text":"download - Long value associated with download (bytesRead) upload - Long value associated with upload (bytesWritten)","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorPortInfo TorPortInfo \u00b6 class TorPortInfo (source) Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster Example of what one of the fields will contain: \u201c127.0.0.1:33432\u201d Constructors \u00b6 Name Summary <init> Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster TorPortInfo(controlPort: String ?, dnsPort: String ?, httpPort: String ?, socksPort: String ?, transPort: String ?) Properties \u00b6 Name Summary controlPort val controlPort: String ? dnsPort val dnsPort: String ? httpPort val httpPort: String ? socksPort val socksPort: String ? transPort val transPort: String ?","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/#torportinfo","text":"class TorPortInfo (source) Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster Example of what one of the fields will contain: \u201c127.0.0.1:33432\u201d","title":"TorPortInfo"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/#constructors","text":"Name Summary <init> Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster TorPortInfo(controlPort: String ?, dnsPort: String ?, httpPort: String ?, socksPort: String ?, transPort: String ?)","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/#properties","text":"Name Summary controlPort val controlPort: String ? dnsPort val dnsPort: String ? httpPort val httpPort: String ? socksPort val socksPort: String ? transPort val transPort: String ?","title":"Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorPortInfo / <init> <init> \u00b6 TorPortInfo(controlPort: String ?, dnsPort: String ?, httpPort: String ?, socksPort: String ?, transPort: String ?) Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster Example of what one of the fields will contain: \u201c127.0.0.1:33432\u201d","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/-init-/#init","text":"TorPortInfo(controlPort: String ?, dnsPort: String ?, httpPort: String ?, socksPort: String ?, transPort: String ?) Holder for information regarding what ports Tor is operating on that is broadcast to the implementing application via io.matthewnelson.topl_service_base.TorServiceEventBroadcaster Example of what one of the fields will contain: \u201c127.0.0.1:33432\u201d","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/control-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorPortInfo / controlPort controlPort \u00b6 val controlPort: String ? (source)","title":"Control port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/control-port/#controlport","text":"val controlPort: String ? (source)","title":"controlPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/dns-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorPortInfo / dnsPort dnsPort \u00b6 val dnsPort: String ? (source)","title":"Dns port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/dns-port/#dnsport","text":"val dnsPort: String ? (source)","title":"dnsPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/http-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorPortInfo / httpPort httpPort \u00b6 val httpPort: String ? (source)","title":"Http port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/http-port/#httpport","text":"val httpPort: String ? (source)","title":"httpPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/socks-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorPortInfo / socksPort socksPort \u00b6 val socksPort: String ? (source)","title":"Socks port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/socks-port/#socksport","text":"val socksPort: String ? (source)","title":"socksPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/trans-port/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorPortInfo / transPort transPort \u00b6 val transPort: String ? (source)","title":"Trans port"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-port-info/trans-port/#transport","text":"val transPort: String ? (source)","title":"transPort"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServiceEventBroadcaster TorServiceEventBroadcaster \u00b6 abstract class TorServiceEventBroadcaster : EventBroadcaster (source) Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. The addresses will be broadcast to you after Tor has been fully Bootstrapped. If Tor is stopped or connectivity is lost, (ie. it\u2019s io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState changes from ENABLED to DISABLED ), a TorPortInfo object containing \u2018null\u2019 for all fields will be broadcast. All broadcasts to your implementation to this class will occur on the Main Thread. /** * @suppress * @see [TorServiceEventBroadcaster] * @see [io.matthewnelson.topl_core_base.EventBroadcaster] * */ class MyEventBroadcaster : TorServiceEventBroadcaster () { /////////////////// /// TorPortInfo /// /////////////////// private val _liveTorPortInfo = MutableLiveData < TorPortInfo > ( null ) val liveTorPortInfo : LiveData < TorPortInfo > = _liveTorPortInfo override fun broadcastPortInformation ( torPortInfo : TorPortInfo ) { _liveTorPortInfo . value = torPortInfo } override fun broadcastServiceLifecycleEvent ( event : String , hashCode : Int ) { broadcastLogMessage ( \"NOTICE|TorService|LCE= $ event - HashCode= $ hashCode \" ) } ///////////////// /// Bandwidth /// ///////////////// private var lastDownload = \"0\" private var lastUpload = \"0\" private val _liveBandwidth = MutableLiveData < String > ( ServiceUtilities . getFormattedBandwidthString ( 0L , 0L ) ) val liveBandwidth : LiveData < String > = _liveBandwidth override fun broadcastBandwidth ( bytesRead : String , bytesWritten : String ) { if ( bytesRead == lastDownload && bytesWritten == lastUpload ) return lastDownload = bytesRead lastUpload = bytesWritten if ( ! liveBandwidth . hasActiveObservers ()) return _liveBandwidth . value = ServiceUtilities . getFormattedBandwidthString ( bytesRead . toLong (), bytesWritten . toLong () ) } override fun broadcastDebug ( msg : String ) { broadcastLogMessage ( msg ) } override fun broadcastException ( msg : String? , e : Exception ) { if ( msg . isNullOrEmpty ()) return broadcastLogMessage ( msg ) e . printStackTrace () } //////////////////// /// Log Messages /// //////////////////// override fun broadcastLogMessage ( logMessage : String? ) { if ( logMessage . isNullOrEmpty ()) return val splitMsg = logMessage . split ( \"|\" ) if ( splitMsg . size < 3 ) return LogMessageAdapter . addLogMessageNotifyAndCurate ( \" ${ splitMsg [ 0 ] } | ${ splitMsg [ 1 ] } | ${ splitMsg [ 2 ] } \" ) } override fun broadcastNotice ( msg : String ) { broadcastLogMessage ( msg ) } /////////////////// /// Tor's State /// /////////////////// inner class TorStateData ( val state : String , val networkState : String ) private var lastState = TorState . OFF private var lastNetworkState = TorNetworkState . DISABLED private val _liveTorState = MutableLiveData < TorStateData > ( TorStateData ( lastState , lastNetworkState ) ) val liveTorState : LiveData < TorStateData > = _liveTorState override fun broadcastTorState ( @TorState state : String , @TorNetworkState networkState : String ) { if ( state == lastState && networkState == lastNetworkState ) return lastState = state lastNetworkState = networkState _liveTorState . value = TorStateData ( state , networkState ) } } Constructors \u00b6 Name Summary <init> Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. TorServiceEventBroadcaster() Functions \u00b6 Name Summary broadcastPortInformation Override this method to implement receiving of port information pertaining to Tor. abstract fun broadcastPortInformation(torPortInfo: TorPortInfo ): Unit broadcastServiceLifecycleEvent open fun broadcastServiceLifecycleEvent(event: String , hashCode: Int ): Unit","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/#torserviceeventbroadcaster","text":"abstract class TorServiceEventBroadcaster : EventBroadcaster (source) Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. The addresses will be broadcast to you after Tor has been fully Bootstrapped. If Tor is stopped or connectivity is lost, (ie. it\u2019s io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState changes from ENABLED to DISABLED ), a TorPortInfo object containing \u2018null\u2019 for all fields will be broadcast. All broadcasts to your implementation to this class will occur on the Main Thread. /** * @suppress * @see [TorServiceEventBroadcaster] * @see [io.matthewnelson.topl_core_base.EventBroadcaster] * */ class MyEventBroadcaster : TorServiceEventBroadcaster () { /////////////////// /// TorPortInfo /// /////////////////// private val _liveTorPortInfo = MutableLiveData < TorPortInfo > ( null ) val liveTorPortInfo : LiveData < TorPortInfo > = _liveTorPortInfo override fun broadcastPortInformation ( torPortInfo : TorPortInfo ) { _liveTorPortInfo . value = torPortInfo } override fun broadcastServiceLifecycleEvent ( event : String , hashCode : Int ) { broadcastLogMessage ( \"NOTICE|TorService|LCE= $ event - HashCode= $ hashCode \" ) } ///////////////// /// Bandwidth /// ///////////////// private var lastDownload = \"0\" private var lastUpload = \"0\" private val _liveBandwidth = MutableLiveData < String > ( ServiceUtilities . getFormattedBandwidthString ( 0L , 0L ) ) val liveBandwidth : LiveData < String > = _liveBandwidth override fun broadcastBandwidth ( bytesRead : String , bytesWritten : String ) { if ( bytesRead == lastDownload && bytesWritten == lastUpload ) return lastDownload = bytesRead lastUpload = bytesWritten if ( ! liveBandwidth . hasActiveObservers ()) return _liveBandwidth . value = ServiceUtilities . getFormattedBandwidthString ( bytesRead . toLong (), bytesWritten . toLong () ) } override fun broadcastDebug ( msg : String ) { broadcastLogMessage ( msg ) } override fun broadcastException ( msg : String? , e : Exception ) { if ( msg . isNullOrEmpty ()) return broadcastLogMessage ( msg ) e . printStackTrace () } //////////////////// /// Log Messages /// //////////////////// override fun broadcastLogMessage ( logMessage : String? ) { if ( logMessage . isNullOrEmpty ()) return val splitMsg = logMessage . split ( \"|\" ) if ( splitMsg . size < 3 ) return LogMessageAdapter . addLogMessageNotifyAndCurate ( \" ${ splitMsg [ 0 ] } | ${ splitMsg [ 1 ] } | ${ splitMsg [ 2 ] } \" ) } override fun broadcastNotice ( msg : String ) { broadcastLogMessage ( msg ) } /////////////////// /// Tor's State /// /////////////////// inner class TorStateData ( val state : String , val networkState : String ) private var lastState = TorState . OFF private var lastNetworkState = TorNetworkState . DISABLED private val _liveTorState = MutableLiveData < TorStateData > ( TorStateData ( lastState , lastNetworkState ) ) val liveTorState : LiveData < TorStateData > = _liveTorState override fun broadcastTorState ( @TorState state : String , @TorNetworkState networkState : String ) { if ( state == lastState && networkState == lastNetworkState ) return lastState = state lastNetworkState = networkState _liveTorState . value = TorStateData ( state , networkState ) } }","title":"TorServiceEventBroadcaster"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/#constructors","text":"Name Summary <init> Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. TorServiceEventBroadcaster()","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/#functions","text":"Name Summary broadcastPortInformation Override this method to implement receiving of port information pertaining to Tor. abstract fun broadcastPortInformation(torPortInfo: TorPortInfo ): Unit broadcastServiceLifecycleEvent open fun broadcastServiceLifecycleEvent(event: String , hashCode: Int ): Unit","title":"Functions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServiceEventBroadcaster / <init> <init> \u00b6 TorServiceEventBroadcaster() Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. The addresses will be broadcast to you after Tor has been fully Bootstrapped. If Tor is stopped or connectivity is lost, (ie. it\u2019s io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState changes from ENABLED to DISABLED ), a TorPortInfo object containing \u2018null\u2019 for all fields will be broadcast. All broadcasts to your implementation to this class will occur on the Main Thread. /** * @suppress * @see [TorServiceEventBroadcaster] * @see [io.matthewnelson.topl_core_base.EventBroadcaster] * */ class MyEventBroadcaster : TorServiceEventBroadcaster () { /////////////////// /// TorPortInfo /// /////////////////// private val _liveTorPortInfo = MutableLiveData < TorPortInfo > ( null ) val liveTorPortInfo : LiveData < TorPortInfo > = _liveTorPortInfo override fun broadcastPortInformation ( torPortInfo : TorPortInfo ) { _liveTorPortInfo . value = torPortInfo } override fun broadcastServiceLifecycleEvent ( event : String , hashCode : Int ) { broadcastLogMessage ( \"NOTICE|TorService|LCE= $ event - HashCode= $ hashCode \" ) } ///////////////// /// Bandwidth /// ///////////////// private var lastDownload = \"0\" private var lastUpload = \"0\" private val _liveBandwidth = MutableLiveData < String > ( ServiceUtilities . getFormattedBandwidthString ( 0L , 0L ) ) val liveBandwidth : LiveData < String > = _liveBandwidth override fun broadcastBandwidth ( bytesRead : String , bytesWritten : String ) { if ( bytesRead == lastDownload && bytesWritten == lastUpload ) return lastDownload = bytesRead lastUpload = bytesWritten if ( ! liveBandwidth . hasActiveObservers ()) return _liveBandwidth . value = ServiceUtilities . getFormattedBandwidthString ( bytesRead . toLong (), bytesWritten . toLong () ) } override fun broadcastDebug ( msg : String ) { broadcastLogMessage ( msg ) } override fun broadcastException ( msg : String? , e : Exception ) { if ( msg . isNullOrEmpty ()) return broadcastLogMessage ( msg ) e . printStackTrace () } //////////////////// /// Log Messages /// //////////////////// override fun broadcastLogMessage ( logMessage : String? ) { if ( logMessage . isNullOrEmpty ()) return val splitMsg = logMessage . split ( \"|\" ) if ( splitMsg . size < 3 ) return LogMessageAdapter . addLogMessageNotifyAndCurate ( \" ${ splitMsg [ 0 ] } | ${ splitMsg [ 1 ] } | ${ splitMsg [ 2 ] } \" ) } override fun broadcastNotice ( msg : String ) { broadcastLogMessage ( msg ) } /////////////////// /// Tor's State /// /////////////////// inner class TorStateData ( val state : String , val networkState : String ) private var lastState = TorState . OFF private var lastNetworkState = TorNetworkState . DISABLED private val _liveTorState = MutableLiveData < TorStateData > ( TorStateData ( lastState , lastNetworkState ) ) val liveTorState : LiveData < TorStateData > = _liveTorState override fun broadcastTorState ( @TorState state : String , @TorNetworkState networkState : String ) { if ( state == lastState && networkState == lastNetworkState ) return lastState = state lastNetworkState = networkState _liveTorState . value = TorStateData ( state , networkState ) } }","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/-init-/#init","text":"TorServiceEventBroadcaster() Adds broadcasting methods to the EventBroadcaster for updating you with information about what addresses Tor is operating on. Very helpful when choosing \u201cauto\u201d in your io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings to easily identify what addresses to use for making network calls, as well as being notified when Tor is ready to be used. The addresses will be broadcast to you after Tor has been fully Bootstrapped. If Tor is stopped or connectivity is lost, (ie. it\u2019s io.matthewnelson.topl_core_base.BaseConsts.TorNetworkState changes from ENABLED to DISABLED ), a TorPortInfo object containing \u2018null\u2019 for all fields will be broadcast. All broadcasts to your implementation to this class will occur on the Main Thread. /** * @suppress * @see [TorServiceEventBroadcaster] * @see [io.matthewnelson.topl_core_base.EventBroadcaster] * */ class MyEventBroadcaster : TorServiceEventBroadcaster () { /////////////////// /// TorPortInfo /// /////////////////// private val _liveTorPortInfo = MutableLiveData < TorPortInfo > ( null ) val liveTorPortInfo : LiveData < TorPortInfo > = _liveTorPortInfo override fun broadcastPortInformation ( torPortInfo : TorPortInfo ) { _liveTorPortInfo . value = torPortInfo } override fun broadcastServiceLifecycleEvent ( event : String , hashCode : Int ) { broadcastLogMessage ( \"NOTICE|TorService|LCE= $ event - HashCode= $ hashCode \" ) } ///////////////// /// Bandwidth /// ///////////////// private var lastDownload = \"0\" private var lastUpload = \"0\" private val _liveBandwidth = MutableLiveData < String > ( ServiceUtilities . getFormattedBandwidthString ( 0L , 0L ) ) val liveBandwidth : LiveData < String > = _liveBandwidth override fun broadcastBandwidth ( bytesRead : String , bytesWritten : String ) { if ( bytesRead == lastDownload && bytesWritten == lastUpload ) return lastDownload = bytesRead lastUpload = bytesWritten if ( ! liveBandwidth . hasActiveObservers ()) return _liveBandwidth . value = ServiceUtilities . getFormattedBandwidthString ( bytesRead . toLong (), bytesWritten . toLong () ) } override fun broadcastDebug ( msg : String ) { broadcastLogMessage ( msg ) } override fun broadcastException ( msg : String? , e : Exception ) { if ( msg . isNullOrEmpty ()) return broadcastLogMessage ( msg ) e . printStackTrace () } //////////////////// /// Log Messages /// //////////////////// override fun broadcastLogMessage ( logMessage : String? ) { if ( logMessage . isNullOrEmpty ()) return val splitMsg = logMessage . split ( \"|\" ) if ( splitMsg . size < 3 ) return LogMessageAdapter . addLogMessageNotifyAndCurate ( \" ${ splitMsg [ 0 ] } | ${ splitMsg [ 1 ] } | ${ splitMsg [ 2 ] } \" ) } override fun broadcastNotice ( msg : String ) { broadcastLogMessage ( msg ) } /////////////////// /// Tor's State /// /////////////////// inner class TorStateData ( val state : String , val networkState : String ) private var lastState = TorState . OFF private var lastNetworkState = TorNetworkState . DISABLED private val _liveTorState = MutableLiveData < TorStateData > ( TorStateData ( lastState , lastNetworkState ) ) val liveTorState : LiveData < TorStateData > = _liveTorState override fun broadcastTorState ( @TorState state : String , @TorNetworkState networkState : String ) { if ( state == lastState && networkState == lastNetworkState ) return lastState = state lastNetworkState = networkState _liveTorState . value = TorStateData ( state , networkState ) } }","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/broadcast-port-information/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServiceEventBroadcaster / broadcastPortInformation broadcastPortInformation \u00b6 abstract fun broadcastPortInformation(torPortInfo: TorPortInfo ): Unit (source) Override this method to implement receiving of port information pertaining to Tor. See Also TorPortInfo","title":"Broadcast port information"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/broadcast-port-information/#broadcastportinformation","text":"abstract fun broadcastPortInformation(torPortInfo: TorPortInfo ): Unit (source) Override this method to implement receiving of port information pertaining to Tor. See Also TorPortInfo","title":"broadcastPortInformation"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/broadcast-service-lifecycle-event/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServiceEventBroadcaster / broadcastServiceLifecycleEvent broadcastServiceLifecycleEvent \u00b6 open fun broadcastServiceLifecycleEvent(event: String , hashCode: Int ): Unit (source)","title":"Broadcast service lifecycle event"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-event-broadcaster/broadcast-service-lifecycle-event/#broadcastservicelifecycleevent","text":"open fun broadcastServiceLifecycleEvent(event: String , hashCode: Int ): Unit (source)","title":"broadcastServiceLifecycleEvent"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs TorServicePrefs \u00b6 class TorServicePrefs : BaseServiceConsts (source) This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. The values saved to TorServicePrefs are always preferred over the defaults declared when initializing the topl-service module. Restarting Tor is currently required for the new settings to take effect. Constructors \u00b6 Name Summary <init> This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. TorServicePrefs(context: Context ) Functions \u00b6 Name Summary clear fun clear(): Unit contains Checks if the SharedPreference contains a value for the supplied prefsKey . Accepts the following annotation type String values: fun contains(prefsKey: String ): Boolean getAll fun getAll(): Map < String , *> getBoolean Returns a Boolean value for the provided BaseServiceConsts.PrefKeyBoolean . If no value is stored in the SharedPreference, defValue will be returned. fun getBoolean(booleanKey: String , defValue: Boolean ): Boolean getInt Returns an Int value for the provided BaseServiceConsts.PrefKeyInt . If no value is stored in the SharedPreference, defValue will be returned. fun getInt(intKey: String , defValue: Int ?): Int ? getList Returns a List of Strings for the provided BaseServiceConsts.PrefKeyList . If no value is stored in the SharedPreference, defValue will be returned. fun getList(listKey: String , defValue: List < String >): List < String > getString Returns a String value for the provided BaseServiceConsts.PrefKeyString . If no value is stored in the SharedPreference, defValue will be returned. fun getString(stringKey: String , defValue: String ?): String ? putBoolean Inserts a Boolean value into the SharedPreference for the supplied booleanKey . fun putBoolean(booleanKey: String , value: Boolean ): Unit putInt Inserts an Int value into the SharedPreference for the supplied intKey . fun putInt(intKey: String , value: Int ?): Unit putList Inserts a List of Strings as a comma separated String into the SharedPreference for the supplied listKey . fun putList(listKey: String , value: List < String >): Unit putString Inserts a String value into the SharedPreference for the supplied stringKey . fun putString(stringKey: String , value: String ?): Unit registerListener Registers a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference fun registerListener(listener: OnSharedPreferenceChangeListener ): Unit remove Removes from the SharedPreference the value associated with prefsKey if there is one. Accepts the following annotation type String values: fun remove(prefsKey: String ): Unit unregisterListener Unregisters a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference fun unregisterListener(listener: OnSharedPreferenceChangeListener ): Unit Companion Object Properties \u00b6 Name Summary NULL_INT_VALUE const val NULL_INT_VALUE: Int NULL_STRING_VALUE const val NULL_STRING_VALUE: String TOR_SERVICE_PREFS_NAME const val TOR_SERVICE_PREFS_NAME: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/#torserviceprefs","text":"class TorServicePrefs : BaseServiceConsts (source) This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. The values saved to TorServicePrefs are always preferred over the defaults declared when initializing the topl-service module. Restarting Tor is currently required for the new settings to take effect.","title":"TorServicePrefs"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/#constructors","text":"Name Summary <init> This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. TorServicePrefs(context: Context )","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/#functions","text":"Name Summary clear fun clear(): Unit contains Checks if the SharedPreference contains a value for the supplied prefsKey . Accepts the following annotation type String values: fun contains(prefsKey: String ): Boolean getAll fun getAll(): Map < String , *> getBoolean Returns a Boolean value for the provided BaseServiceConsts.PrefKeyBoolean . If no value is stored in the SharedPreference, defValue will be returned. fun getBoolean(booleanKey: String , defValue: Boolean ): Boolean getInt Returns an Int value for the provided BaseServiceConsts.PrefKeyInt . If no value is stored in the SharedPreference, defValue will be returned. fun getInt(intKey: String , defValue: Int ?): Int ? getList Returns a List of Strings for the provided BaseServiceConsts.PrefKeyList . If no value is stored in the SharedPreference, defValue will be returned. fun getList(listKey: String , defValue: List < String >): List < String > getString Returns a String value for the provided BaseServiceConsts.PrefKeyString . If no value is stored in the SharedPreference, defValue will be returned. fun getString(stringKey: String , defValue: String ?): String ? putBoolean Inserts a Boolean value into the SharedPreference for the supplied booleanKey . fun putBoolean(booleanKey: String , value: Boolean ): Unit putInt Inserts an Int value into the SharedPreference for the supplied intKey . fun putInt(intKey: String , value: Int ?): Unit putList Inserts a List of Strings as a comma separated String into the SharedPreference for the supplied listKey . fun putList(listKey: String , value: List < String >): Unit putString Inserts a String value into the SharedPreference for the supplied stringKey . fun putString(stringKey: String , value: String ?): Unit registerListener Registers a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference fun registerListener(listener: OnSharedPreferenceChangeListener ): Unit remove Removes from the SharedPreference the value associated with prefsKey if there is one. Accepts the following annotation type String values: fun remove(prefsKey: String ): Unit unregisterListener Unregisters a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference fun unregisterListener(listener: OnSharedPreferenceChangeListener ): Unit","title":"Functions"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/#companion-object-properties","text":"Name Summary NULL_INT_VALUE const val NULL_INT_VALUE: Int NULL_STRING_VALUE const val NULL_STRING_VALUE: String TOR_SERVICE_PREFS_NAME const val TOR_SERVICE_PREFS_NAME: String","title":"Companion Object Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / <init> <init> \u00b6 TorServicePrefs(context: Context ) This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. The values saved to TorServicePrefs are always preferred over the defaults declared when initializing the topl-service module. Restarting Tor is currently required for the new settings to take effect.","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/-init-/#init","text":"TorServicePrefs(context: Context ) This class provides a standardized way for library users to change settings used by the topl-service module such that the values expressed as default io.matthewnelson.topl_service_base.ApplicationDefaultTorSettings when initializing things can be modified by the implementing application. The values saved to TorServicePrefs are always preferred over the defaults declared when initializing the topl-service module. Restarting Tor is currently required for the new settings to take effect.","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/-n-u-l-l_-i-n-t_-v-a-l-u-e/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / NULL_INT_VALUE NULL_INT_VALUE \u00b6 const val NULL_INT_VALUE: Int (source)","title":" n u l l  i n t  v a l u e"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/-n-u-l-l_-i-n-t_-v-a-l-u-e/#null_int_value","text":"const val NULL_INT_VALUE: Int (source)","title":"NULL_INT_VALUE"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/-n-u-l-l_-s-t-r-i-n-g_-v-a-l-u-e/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / NULL_STRING_VALUE NULL_STRING_VALUE \u00b6 const val NULL_STRING_VALUE: String (source)","title":" n u l l  s t r i n g  v a l u e"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/-n-u-l-l_-s-t-r-i-n-g_-v-a-l-u-e/#null_string_value","text":"const val NULL_STRING_VALUE: String (source)","title":"NULL_STRING_VALUE"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/-t-o-r_-s-e-r-v-i-c-e_-p-r-e-f-s_-n-a-m-e/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / TOR_SERVICE_PREFS_NAME TOR_SERVICE_PREFS_NAME \u00b6 const val TOR_SERVICE_PREFS_NAME: String (source)","title":" t o r  s e r v i c e  p r e f s  n a m e"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/-t-o-r_-s-e-r-v-i-c-e_-p-r-e-f-s_-n-a-m-e/#tor_service_prefs_name","text":"const val TOR_SERVICE_PREFS_NAME: String (source)","title":"TOR_SERVICE_PREFS_NAME"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/clear/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / clear clear \u00b6 @WorkerThread fun clear(): Unit (source)","title":"Clear"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/clear/#clear","text":"@WorkerThread fun clear(): Unit (source)","title":"clear"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/contains/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / contains contains \u00b6 @WorkerThread fun contains(prefsKey: String ): Boolean (source) Checks if the SharedPreference contains a value for the supplied prefsKey . Accepts the following annotation type String values: BaseServiceConsts.PrefKeyBoolean BaseServiceConsts.PrefKeyInt BaseServiceConsts.PrefKeyList BaseServiceConsts.PrefKeyString Parameters \u00b6 prefsKey - String of type ServiceConsts.PrefKey* Return True if the SharedPreference contains a value for the associated prefsKey , false if not","title":"Contains"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/contains/#contains","text":"@WorkerThread fun contains(prefsKey: String ): Boolean (source) Checks if the SharedPreference contains a value for the supplied prefsKey . Accepts the following annotation type String values: BaseServiceConsts.PrefKeyBoolean BaseServiceConsts.PrefKeyInt BaseServiceConsts.PrefKeyList BaseServiceConsts.PrefKeyString","title":"contains"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/contains/#parameters","text":"prefsKey - String of type ServiceConsts.PrefKey* Return True if the SharedPreference contains a value for the associated prefsKey , false if not","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-all/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / getAll getAll \u00b6 @WorkerThread fun getAll(): Map < String , *> (source)","title":"Get all"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-all/#getall","text":"@WorkerThread fun getAll(): Map < String , *> (source)","title":"getAll"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-boolean/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / getBoolean getBoolean \u00b6 @WorkerThread fun getBoolean(booleanKey: String , defValue: Boolean ): Boolean (source) Returns a Boolean value for the provided BaseServiceConsts.PrefKeyBoolean . If no value is stored in the SharedPreference, defValue will be returned. Parameters \u00b6 booleanKey - String of type BaseServiceConsts.PrefKeyBoolean defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the booleanKey . Return The Boolean value associated with the booleanKey , otherwise defValue","title":"Get boolean"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-boolean/#getboolean","text":"@WorkerThread fun getBoolean(booleanKey: String , defValue: Boolean ): Boolean (source) Returns a Boolean value for the provided BaseServiceConsts.PrefKeyBoolean . If no value is stored in the SharedPreference, defValue will be returned.","title":"getBoolean"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-boolean/#parameters","text":"booleanKey - String of type BaseServiceConsts.PrefKeyBoolean defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the booleanKey . Return The Boolean value associated with the booleanKey , otherwise defValue","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-int/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / getInt getInt \u00b6 @WorkerThread fun getInt(intKey: String , defValue: Int ?): Int ? (source) Returns an Int value for the provided BaseServiceConsts.PrefKeyInt . If no value is stored in the SharedPreference, defValue will be returned. Parameters \u00b6 intKey - String of type BaseServiceConsts.PrefKeyInt defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the intKey . Return The Int value associated with intKey , otherwise defValue","title":"Get int"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-int/#getint","text":"@WorkerThread fun getInt(intKey: String , defValue: Int ?): Int ? (source) Returns an Int value for the provided BaseServiceConsts.PrefKeyInt . If no value is stored in the SharedPreference, defValue will be returned.","title":"getInt"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-int/#parameters","text":"intKey - String of type BaseServiceConsts.PrefKeyInt defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the intKey . Return The Int value associated with intKey , otherwise defValue","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-list/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / getList getList \u00b6 @WorkerThread fun getList(listKey: String , defValue: List < String >): List < String > (source) Returns a List of Strings for the provided BaseServiceConsts.PrefKeyList . If no value is stored in the SharedPreference, defValue will be returned. Parameters \u00b6 listKey - String of type BaseServiceConsts.PrefKeyList defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the listKey . Return The List of Strings associated with the listKey , otherwise defValue","title":"Get list"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-list/#getlist","text":"@WorkerThread fun getList(listKey: String , defValue: List < String >): List < String > (source) Returns a List of Strings for the provided BaseServiceConsts.PrefKeyList . If no value is stored in the SharedPreference, defValue will be returned.","title":"getList"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-list/#parameters","text":"listKey - String of type BaseServiceConsts.PrefKeyList defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the listKey . Return The List of Strings associated with the listKey , otherwise defValue","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-string/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / getString getString \u00b6 @WorkerThread fun getString(stringKey: String , defValue: String ?): String ? (source) Returns a String value for the provided BaseServiceConsts.PrefKeyString . If no value is stored in the SharedPreference, defValue will be returned. Parameters \u00b6 stringKey - String of type BaseServiceConsts.PrefKeyString defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the stringKey . Return The String value associated with stringKey , otherwise defValue","title":"Get string"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-string/#getstring","text":"@WorkerThread fun getString(stringKey: String , defValue: String ?): String ? (source) Returns a String value for the provided BaseServiceConsts.PrefKeyString . If no value is stored in the SharedPreference, defValue will be returned.","title":"getString"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/get-string/#parameters","text":"stringKey - String of type BaseServiceConsts.PrefKeyString defValue - Use the io.matthewnelson.topl_core_base.TorSettings value associated with the stringKey . Return The String value associated with stringKey , otherwise defValue","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-boolean/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / putBoolean putBoolean \u00b6 @WorkerThread fun putBoolean(booleanKey: String , value: Boolean ): Unit (source) Inserts a Boolean value into the SharedPreference for the supplied booleanKey . Parameters \u00b6 booleanKey - String of type BaseServiceConsts.PrefKeyBoolean value - Your Boolean value","title":"Put boolean"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-boolean/#putboolean","text":"@WorkerThread fun putBoolean(booleanKey: String , value: Boolean ): Unit (source) Inserts a Boolean value into the SharedPreference for the supplied booleanKey .","title":"putBoolean"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-boolean/#parameters","text":"booleanKey - String of type BaseServiceConsts.PrefKeyBoolean value - Your Boolean value","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-int/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / putInt putInt \u00b6 @WorkerThread fun putInt(intKey: String , value: Int ?): Unit (source) Inserts an Int value into the SharedPreference for the supplied intKey . Parameters \u00b6 intKey - String of type BaseServiceConsts.PrefKeyInt value - Your Int? value","title":"Put int"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-int/#putint","text":"@WorkerThread fun putInt(intKey: String , value: Int ?): Unit (source) Inserts an Int value into the SharedPreference for the supplied intKey .","title":"putInt"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-int/#parameters","text":"intKey - String of type BaseServiceConsts.PrefKeyInt value - Your Int? value","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-list/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / putList putList \u00b6 @WorkerThread fun putList(listKey: String , value: List < String >): Unit (source) Inserts a List of Strings as a comma separated String into the SharedPreference for the supplied listKey . Parameters \u00b6 listKey - String of type BaseServiceConsts.PrefKeyList value - Your List value","title":"Put list"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-list/#putlist","text":"@WorkerThread fun putList(listKey: String , value: List < String >): Unit (source) Inserts a List of Strings as a comma separated String into the SharedPreference for the supplied listKey .","title":"putList"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-list/#parameters","text":"listKey - String of type BaseServiceConsts.PrefKeyList value - Your List value","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-string/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / putString putString \u00b6 @WorkerThread fun putString(stringKey: String , value: String ?): Unit (source) Inserts a String value into the SharedPreference for the supplied stringKey . Parameters \u00b6 stringKey - String of type BaseServiceConsts.PrefKeyString value - Your String value","title":"Put string"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-string/#putstring","text":"@WorkerThread fun putString(stringKey: String , value: String ?): Unit (source) Inserts a String value into the SharedPreference for the supplied stringKey .","title":"putString"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/put-string/#parameters","text":"stringKey - String of type BaseServiceConsts.PrefKeyString value - Your String value","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/register-listener/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / registerListener registerListener \u00b6 fun registerListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Registers a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference","title":"Register listener"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/register-listener/#registerlistener","text":"fun registerListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Registers a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference","title":"registerListener"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/remove/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / remove remove \u00b6 @WorkerThread fun remove(prefsKey: String ): Unit (source) Removes from the SharedPreference the value associated with prefsKey if there is one. Accepts the following annotation type String values: BaseServiceConsts.PrefKeyBoolean BaseServiceConsts.PrefKeyInt BaseServiceConsts.PrefKeyList BaseServiceConsts.PrefKeyString Parameters \u00b6 prefsKey - String of type ServiceConsts.PrefKey*","title":"Remove"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/remove/#remove","text":"@WorkerThread fun remove(prefsKey: String ): Unit (source) Removes from the SharedPreference the value associated with prefsKey if there is one. Accepts the following annotation type String values: BaseServiceConsts.PrefKeyBoolean BaseServiceConsts.PrefKeyInt BaseServiceConsts.PrefKeyList BaseServiceConsts.PrefKeyString","title":"remove"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/remove/#parameters","text":"prefsKey - String of type ServiceConsts.PrefKey*","title":"Parameters"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/unregister-listener/","text":"topl-service-base / io.matthewnelson.topl_service_base / TorServicePrefs / unregisterListener unregisterListener \u00b6 fun unregisterListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Unregisters a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference","title":"Unregister listener"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-tor-service-prefs/unregister-listener/#unregisterlistener","text":"fun unregisterListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Unregisters a SharedPreferences.OnSharedPreferenceChangeListener for the associated SharedPreference","title":"unregisterListener"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/","text":"topl-service-base / io.matthewnelson.topl_service_base / V3ClientAuthContent V3ClientAuthContent \u00b6 class V3ClientAuthContent (source) Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager Constructors \u00b6 Name Summary <init> Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager V3ClientAuthContent(address: String , privateKey: String ) Properties \u00b6 Name Summary address val address: String privateKey val privateKey: String","title":"Index"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/#v3clientauthcontent","text":"class V3ClientAuthContent (source) Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager","title":"V3ClientAuthContent"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/#constructors","text":"Name Summary <init> Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager V3ClientAuthContent(address: String , privateKey: String )","title":"Constructors"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/#properties","text":"Name Summary address val address: String privateKey val privateKey: String","title":"Properties"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/-init-/","text":"topl-service-base / io.matthewnelson.topl_service_base / V3ClientAuthContent / <init> <init> \u00b6 V3ClientAuthContent(address: String , privateKey: String ) Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager","title":" init "},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/-init-/#init","text":"V3ClientAuthContent(address: String , privateKey: String ) Holder for v3 client authentication data used by io.matthewnelson.topl_service_base.BaseV3ClientAuthManager","title":"&lt;init&gt;"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/address/","text":"topl-service-base / io.matthewnelson.topl_service_base / V3ClientAuthContent / address address \u00b6 val address: String (source)","title":"Address"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/address/#address","text":"val address: String (source)","title":"address"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/private-key/","text":"topl-service-base / io.matthewnelson.topl_service_base / V3ClientAuthContent / privateKey privateKey \u00b6 val privateKey: String (source)","title":"Private key"},{"location":"topl-service-base/io.matthewnelson.topl_service_base/-v3-client-auth-content/private-key/#privatekey","text":"val privateKey: String (source)","title":"privateKey"}]}